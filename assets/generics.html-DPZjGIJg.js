import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,e}from"./app-CxJd8nF7.js";const t={},p=e(`<h1 id="java泛型" tabindex="-1"><a class="header-anchor" href="#java泛型"><span>Java泛型</span></a></h1><p>泛型，即“参数化类型”。顾名思义，就是将类型由原来的具体的类型&#39;参数化&#39;，此时类型也定义成参数形式，然后在使用/调用时传入具体的类型。事先不确定类型, 先写一个东西代指, 在使用的时候具体指定</p><ul><li><p>Java 泛型（generics）是 <strong>JDK 5</strong> 中引入的一个新特性, 泛型提供了编译时类型安全检测机制，该机制允许开发者在编译时检测到非法的类型。</p></li><li><p>泛型的本质是参数化类型，也就是说所操作的数据类型被指定为一个参数。在使用/调用时传入具体的类型（类型实参）。</p></li><li><p>Java采用 <strong>类型擦除(Type erasure generics)</strong> 的方式实现泛型，即这个泛型只存在源码中。</p><p>java中的泛型仅仅存在于编译之前, 经过编译之后全部泛型变成Object, 使用泛型变成类型强转</p></li></ul><h2 id="_1-注意事项" tabindex="-1"><a class="header-anchor" href="#_1-注意事项"><span>1. 注意事项</span></a></h2><p>Java开发手册推荐使用：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 泛型的写法: 一般常用T E K V (语法上可以使用别的字符都可以, 但是习惯上用这些)</span>
<span class="token comment">// T : type</span>
<span class="token comment">// E : element</span>
<span class="token comment">// K : key</span>
<span class="token comment">// V : value</span>

<span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 我们可以在泛型定义的时候定义多个泛型(语法完全允许), 但是建议不要超过两个 </span>
<span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token class-name">E</span><span class="token punctuation">,</span> <span class="token class-name">X</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token class-name">E</span> name<span class="token punctuation">;</span>
    <span class="token class-name">T</span> age<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token class-name">E</span> name<span class="token punctuation">,</span> <span class="token class-name">T</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>泛型使用的写法</strong>：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">User</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> zs1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token string">&quot;zs&quot;</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 在引用上 和  new 类型上都指定类型:  jdk1.5时候的写法</span>

<span class="token class-name">User</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> zs2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token string">&quot;zs&quot;</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// 只写引用, 后面省略: jdk1.7时候做的写法优化</span>

 <span class="token comment">// 如果某个地方需要传泛型, 但是我们使用的时候没有指定具体的泛型类型, 这个泛型在这次使用中默认表现为Object</span>
<span class="token class-name">User</span> zs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">&quot;zs&quot;</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Object</span> age <span class="token operator">=</span> zs<span class="token punctuation">.</span>age<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>泛型不允许使用基本类型</strong>：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 泛型的使用不允许使用基本类型</span>
<span class="token comment">// 报错: User&lt;int&gt; zs3 = new User&lt;&gt;(&quot;zs&quot;, 18);</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>泛型的好处</strong>：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>a<span class="token punctuation">.</span> 提高了程序的安全性
b<span class="token punctuation">.</span> 将运行期遇到的问题转移到了编译期
c<span class="token punctuation">.</span> 省去了类型强转的麻烦
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-泛型的使用" tabindex="-1"><a class="header-anchor" href="#_2-泛型的使用"><span>2. 泛型的使用</span></a></h2><h3 id="泛型类" tabindex="-1"><a class="header-anchor" href="#泛型类"><span>泛型类</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 泛型类：（在实例化泛型类时，需要指明泛型类中的类型参数，并赋予泛型类属性相应类型的值）</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ClassName</span><span class="token operator">&lt;</span>dataType1<span class="token punctuation">,</span>dataType2<span class="token punctuation">,</span>…<span class="token operator">&gt;</span><span class="token punctuation">{</span>
    <span class="token keyword">private</span> dataType1 propertyName1<span class="token punctuation">;</span>
    <span class="token keyword">private</span> dataType2 propertyName2<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 定义一个泛型类：</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ClassName</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">T</span> data<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> data<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setData</span><span class="token punctuation">(</span><span class="token class-name">T</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> data<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// 注意1: 定义一个泛型类, 这个泛型作用域范围, 仅在类名之后和类体上</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="泛型接口" tabindex="-1"><a class="header-anchor" href="#泛型接口"><span>泛型接口</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 泛型接口</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IntercaceName</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>
    <span class="token class-name">T</span> <span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 实现接口时，可以选择指定泛型类型，也可以选择不指定</span>
<span class="token comment">// 指定类型 如下：</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Interface1</span> <span class="token keyword">implements</span> <span class="token class-name">IntercaceName</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> text<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> text<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 不指定类型：</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Interface1</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">implements</span> <span class="token class-name">IntercaceName</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">T</span> data<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> data<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="泛型方法" tabindex="-1"><a class="header-anchor" href="#泛型方法"><span>泛型方法</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 泛型方法，例如: </span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">List</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> cs<span class="token punctuation">,</span><span class="token keyword">int</span> userId<span class="token punctuation">)</span><span class="token punctuation">{</span>

    <span class="token comment">// 使用了泛型的方法不一定是泛型方法, 定义了泛型的方法才是泛型方法</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>是否拥有泛型方法，与其所在的类是不是泛型没有关系</li><li>如果 static 方法需要使用泛型能力，就必须使其成为泛型方法</li></ul><h2 id="_3-泛型通配" tabindex="-1"><a class="header-anchor" href="#_3-泛型通配"><span>3. 泛型通配</span></a></h2><p>泛型是不允许类似数组一样协变的，但是有的时候, 我们又希望它能像数组一样, 产生类似协变的效果</p><p>泛型通配: 这个泛型通配就是为了模拟数组的协变, 又避免了数组协变的坏处(类型问题)</p><ul><li><p><code>？</code>：任意类型，如果没有明确，那么就是Object以及任意的Java类了</p><p>表示不确定的 java 类型，通常用于泛型方法的调用代码和形参，不能用于定义类和泛型方法</p></li><li><p><code>? extends E</code>（向下限定，E及其子类）</p><p>上界通配符 <code>&lt; ? extends E&gt;</code>：限制泛型可用类型, 表示参数化的类型可能是所指定的类型，或者是此类型的子类。</p><ul><li>如果传入的类型不是 E 或者 E 的子类，编译不成功</li><li>泛型中可以使用 E 的方法，否则需要强转成 E 才能使用</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 当没有使用 extends 关键字限制泛型类型时，其实是默认使用 Object 类作为泛型类型/</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ClassName</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token comment">// 等同于：</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ClassName</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span> <span class="token keyword">extends</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>? super E</code> （向上限定，E及其父类）</p><p>下界通配符 <code>&lt; ? super E&gt;</code>：表示参数化的类型可能是所指定的类型，或者是此类型的父类型，直至 Object</p></li></ul>`,25),c=[p];function l(o,i){return s(),a("div",null,c)}const r=n(t,[["render",l],["__file","generics.html.vue"]]),k=JSON.parse(`{"path":"/java/syntax/collection/generics.html","title":"Java泛型","lang":"en-US","frontmatter":{"order":1,"description":"Java泛型 泛型，即“参数化类型”。顾名思义，就是将类型由原来的具体的类型'参数化'，此时类型也定义成参数形式，然后在使用/调用时传入具体的类型。事先不确定类型, 先写一个东西代指, 在使用的时候具体指定 Java 泛型（generics）是 JDK 5 中引入的一个新特性, 泛型提供了编译时类型安全检测机制，该机制允许开发者在编译时检测到非法的类型...","head":[["meta",{"property":"og:url","content":"https://x.app/notebook/java/syntax/collection/generics.html"}],["meta",{"property":"og:site_name","content":"Notebook"}],["meta",{"property":"og:title","content":"Java泛型"}],["meta",{"property":"og:description","content":"Java泛型 泛型，即“参数化类型”。顾名思义，就是将类型由原来的具体的类型'参数化'，此时类型也定义成参数形式，然后在使用/调用时传入具体的类型。事先不确定类型, 先写一个东西代指, 在使用的时候具体指定 Java 泛型（generics）是 JDK 5 中引入的一个新特性, 泛型提供了编译时类型安全检测机制，该机制允许开发者在编译时检测到非法的类型..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-04-15T09:06:58.000Z"}],["meta",{"property":"article:author","content":"Mr.Topple"}],["meta",{"property":"article:modified_time","content":"2024-04-15T09:06:58.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java泛型\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-04-15T09:06:58.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Topple\\",\\"url\\":\\"https://www.baidu.com\\"}]}"]]},"headers":[{"level":2,"title":"1. 注意事项","slug":"_1-注意事项","link":"#_1-注意事项","children":[]},{"level":2,"title":"2. 泛型的使用","slug":"_2-泛型的使用","link":"#_2-泛型的使用","children":[{"level":3,"title":"泛型类","slug":"泛型类","link":"#泛型类","children":[]},{"level":3,"title":"泛型接口","slug":"泛型接口","link":"#泛型接口","children":[]},{"level":3,"title":"泛型方法","slug":"泛型方法","link":"#泛型方法","children":[]}]},{"level":2,"title":"3. 泛型通配","slug":"_3-泛型通配","link":"#_3-泛型通配","children":[]}],"git":{"createdTime":1713172018000,"updatedTime":1713172018000,"contributors":[{"name":"Neil","email":"msdrizzle@outlook.com","commits":1}]},"readingTime":{"minutes":4.03,"words":1210},"filePathRelative":"java/syntax/collection/generics.md","localizedDate":"April 15, 2024","autoDesc":true}`);export{r as comp,k as data};
