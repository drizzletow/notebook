import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as c,o,c as l,a as n,b as s,d as t,e}from"./app-CQ1Pqlzg.js";const i={},u=e(`<h1 id="java常用类库" tabindex="-1"><a class="header-anchor" href="#java常用类库"><span>Java常用类库</span></a></h1><h2 id="一-常用类库" tabindex="-1"><a class="header-anchor" href="#一-常用类库"><span>一 常用类库</span></a></h2><h3 id="_1-objects" tabindex="-1"><a class="header-anchor" href="#_1-objects"><span>1. Objects</span></a></h3><p>在JDK7版本的时候，Java引入了<code>java.util.Objects</code>工具类，用于封装一些平时使用频度很高或容易出错的操作，这些操作形成了Objects的各个方法。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Objects</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> a<span class="token punctuation">,</span> <span class="token class-name">Object</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>a <span class="token operator">==</span> b<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>a <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">deepEquals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> a<span class="token punctuation">,</span> <span class="token class-name">Object</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">==</span> b<span class="token punctuation">)</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> b <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span>
            <span class="token keyword">return</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">deepEquals0</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>equals()：有别于<code>Object.equals()</code>，这个方法可以避免空指针异常。</p><p>deepEquals()：<code>Object.equals()</code>用于比较两个对象的引用是否相同，而<code>deepEquals()</code>却扩展成了可以支持数组。</p><h3 id="_2-arrays" tabindex="-1"><a class="header-anchor" href="#_2-arrays"><span>2. Arrays</span></a></h3><p>Arrays 类是一个工具类，其中包含了数组操作的很多方法。这个 Arrays 类里均为 static 修饰的方法（static 修饰的方法可以直接通过类名调用）</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token number">1.</span> 对数组进行升序排序
<span class="token class-name">Array</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">)</span>

<span class="token comment">// 从元素下标为from,到下标为to-1的元素进行排序    </span>
<span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">,</span> <span class="token keyword">int</span> from<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token keyword">to</span><span class="token punctuation">)</span>    

<span class="token number">2.</span> 为数组元素填充相同的值    
<span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">,</span><span class="token class-name">Object</span> object<span class="token punctuation">)</span>
<span class="token comment">// 对数组的部分元素填充一个值,从起始位置到结束位置，取头不取尾</span>
<span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">,</span><span class="token keyword">int</span> from<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token keyword">to</span><span class="token punctuation">,</span><span class="token class-name">Object</span> object<span class="token punctuation">)</span>    

<span class="token number">3.</span> 返回数组的字符串形式
<span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">)</span>
<span class="token comment">// 返回多维数组的字符串形式</span>
<span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">deepToString</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arrays<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-system" tabindex="-1"><a class="header-anchor" href="#_3-system"><span>3. System</span></a></h3><ol><li><p>获取系统当前毫秒值 <code>public static long currentTimeMillis()</code></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 1634043714170</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">// 1634043714170</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>结束正在运行的Java程序 <code>public staitc void exit(int status)</code></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>运行JVM中的垃圾回收器，完成内存中垃圾的清除 <code>public static void gc()</code></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>确定当前的系统属性 <code>public static getProperties()</code></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>System类方法复制数组</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">native</span> <span class="token keyword">void</span> <span class="token function">arraycopy</span><span class="token punctuation">(</span><span class="token class-name">Object</span> src<span class="token punctuation">,</span> <span class="token keyword">int</span> srcPos<span class="token punctuation">,</span> <span class="token class-name">Object</span> dest<span class="token punctuation">,</span> <span class="token keyword">int</span> destPos<span class="token punctuation">,</span><span class="token keyword">int</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>Object src：要复制的原数组；</li><li>Int srcPos：数组源的起始索引；</li><li>Object dest：复制后的目标数组；</li><li>int destPos：目标数组起始索引；</li><li>int length，指定复制的长度；</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>arr1<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> arr2<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// [3, 4, 10]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h2 id="二-数学工具" tabindex="-1"><a class="header-anchor" href="#二-数学工具"><span>二 数学工具</span></a></h2><h3 id="_1-math" tabindex="-1"><a class="header-anchor" href="#_1-math"><span>1. Math</span></a></h3><p>Math 类位于 java.lang 包，封装了常用的数学运算，它的构造方法是 private 的，因此无法创建 Math 类的对象。</p><ul><li><p>Math 类中的所有方法都是类方法，可以直接通过类名来调用它们。</p></li><li><p>Math 类中包含 $E$ 和 $PI$ 两个静态常量，正如它们名字所暗示的，它们的值分别等于 $e$（自然对数）和 $π$（圆周率）。</p></li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 随机数例子：</span>
<span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                         <span class="token comment">// [0.0，1.0)之间的随机数</span>
<span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">100</span>                     <span class="token comment">// [0.0，100.0)之间的随机数</span>
<span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">98</span> <span class="token operator">+</span> <span class="token number">2</span>                  <span class="token comment">// [2.0，100.0)之间的随机数</span>
<span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">98</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span>           <span class="token comment">// [2，100)之间的随机整数</span>

<span class="token comment">// 产生随机数还可以借助java.util.Random类</span>
<span class="token class-name">Random</span> random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 以当前时间为默认种子, 可以使用 Random(long seed) 以指定的种子值</span>
<span class="token keyword">int</span> num <span class="token operator">=</span> random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 生成一个随机的int值，该值介于[0,100)的区间</span>
<span class="token keyword">double</span> d <span class="token operator">=</span> random<span class="token punctuation">.</span><span class="token function">nextDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//产生[0,1)范围的随机小数</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>(1) 求最大值、最小值和绝对值</strong></p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>static int abs(int a)</td><td>返回 a 的绝对值</td></tr><tr><td>static long abs(long a)</td><td>返回 a 的绝对值</td></tr><tr><td>static float abs(float a)</td><td>返回 a 的绝对值</td></tr><tr><td>static double abs(double a)</td><td>返回 a 的绝对值</td></tr><tr><td>static int max(int x,int y)</td><td>返回 x 和 y 中的最大值</td></tr><tr><td>static double max(double x,double y)</td><td>返回 x 和 y 中的最大值</td></tr><tr><td>static long max(long x,long y)</td><td>返回 x 和 y 中的最大值</td></tr><tr><td>static float max(float x,float y)</td><td>返回 x 和 y 中的最大值</td></tr><tr><td>static int min(int x,int y)</td><td>返回 x 和 y 中的最小值</td></tr><tr><td>static long min(long x,long y)</td><td>返回 x 和 y 中的最小值</td></tr><tr><td>static double min(double x,double y)</td><td>返回 x 和 y 中的最小值</td></tr><tr><td>static float min(float x,float y)</td><td>返回 x 和 y 中的最小值</td></tr></tbody></table><p><strong>(2) 取整方法</strong></p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>static double ceil(double a)</td><td>返回大于或等于 a 的最小整数（向上取整）</td></tr><tr><td>static double floor(double a)</td><td>返回小于或等于 a 的最大整数（向下取整）</td></tr><tr><td>static double rint(double a)</td><td>返回最接近 a 的整数值，如果有两个同样接近的整数，则结果取偶数（四舍六入五取偶）</td></tr><tr><td>static int round(float a)</td><td>将原来的数字加上0.5后再向下取整 （四舍五入）</td></tr><tr><td>static long round(double a)</td><td>将原来的数字加上0.5后再向下取整（长整型 ）</td></tr></tbody></table><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span><span class="token number">1.1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 2.0</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1.1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// -1.0 向上取整</span>

<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token number">1.1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 1.0</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1.1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// -2.0 向下取整</span>

<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">rint</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1.4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// -1.0</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">rint</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1.5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// -2.0 （四舍六入五取偶）</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">rint</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2.5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// -2.0  </span>

<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token number">1.4f</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 1  (表示”四舍五入”)</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1.5f</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// -1 (-1.5 + 0.5 = -1.0 取整为 -1)</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1.51</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// -2 (-1.51 + 0.5 = -1.01 向下取整为 -2)</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1.6f</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// -2 (-1.6 + 0.5 = -1.1 向下取整为 -2)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>(3) 指数运算</strong></p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>static double exp(double a)</td><td>返回 e 的 a 次幂</td></tr><tr><td>static double pow(double a,double b)</td><td>返回以 a 为底数，以 b 为指数的幂值</td></tr><tr><td>static double sqrt(double a)</td><td>返回 a 的平方根</td></tr><tr><td>static double cbrt(double a)</td><td>返回 a 的立方根</td></tr><tr><td>static double log(double a)</td><td>返回 a 的自然对数，即 lna 的值</td></tr><tr><td>static double log10(double a)</td><td>返回以 10 为底 a 的对数</td></tr></tbody></table><p><strong>(4) 三角函数</strong></p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>static double sin(double a)</td><td>返回角的三角正弦值，参数以孤度为单位</td></tr><tr><td>static double cos(double a)</td><td>返回角的三角余弦值，参数以孤度为单位</td></tr><tr><td>static double asin(double a)</td><td>返回一个值的反正弦值，参数域在 [-1,1]，值域在 [-PI/2,PI/2]</td></tr><tr><td>static double acos(double a)</td><td>返回一个值的反余弦值，参数域在 [-1,1]，值域在 [0.0,PI]</td></tr><tr><td>static double tan(double a)</td><td>返回角的三角正切值，参数以弧度为单位</td></tr><tr><td>static double atan(double a)</td><td>返回一个值的反正切值，值域在 [-PI/2,PI/2]</td></tr><tr><td>static double toDegrees(double angrad)</td><td>将用孤度表示的角转换为近似相等的用角度表示的角</td></tr><tr><td>staticdouble toRadians(double angdeg)</td><td>将用角度表示的角转换为近似相等的用弧度表示的角</td></tr></tbody></table><h3 id="_2-bigdecimal" tabindex="-1"><a class="header-anchor" href="#_2-bigdecimal"><span>2. BigDecimal</span></a></h3><p>BigDecimal 类支持任何精度的浮点数，可以用来精确计算货币值。</p><ul><li>BigDecimal(double val)：实例化时将双精度型转换为 BigDecimal 类型</li><li>BigDecimal(String val)：实例化时将字符串形式转换为 BigDecimal 类型</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">BigDecimal</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">BigDecimal</span> augend<span class="token punctuation">)</span>                                     <span class="token comment">// 加法操作</span>
<span class="token class-name">BigDecimal</span> <span class="token function">subtract</span><span class="token punctuation">(</span><span class="token class-name">BigDecimal</span> subtrahend<span class="token punctuation">)</span>                            <span class="token comment">// 减法操作</span>
<span class="token class-name">BigDecimal</span> <span class="token function">multiply</span><span class="token punctuation">(</span><span class="token class-name">BigDecimal</span> multiplieand<span class="token punctuation">)</span>                          <span class="token comment">// 乘法操作</span>
<span class="token class-name">BigDecimal</span> <span class="token function">divide</span><span class="token punctuation">(</span><span class="token class-name">BigDecimal</span> divisor<span class="token punctuation">,</span><span class="token keyword">int</span> scale<span class="token punctuation">,</span><span class="token keyword">int</span> roundingMode <span class="token punctuation">)</span>     <span class="token comment">// 除法操作</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><table><thead><tr><th>模式名称</th><th>说明</th></tr></thead><tbody><tr><td>BigDecimal.ROUND_UP</td><td>商的最后一位如果大于 0，则向前进位，正负数都如此</td></tr><tr><td>BigDecimal.ROUND_DOWN</td><td>商的最后一位无论是什么数字都省略</td></tr><tr><td>BigDecimal.ROUND_CEILING</td><td>商如果是正数，按照 ROUND_UP 模式处理；如果是负数，按照 ROUND_DOWN 模式处理</td></tr><tr><td>BigDecimal.ROUND_FLOOR</td><td>与 ROUND_CELING 模式相反，商如果是正数，按照 ROUND_DOWN 模式处理； 如果是负数，按照 ROUND_UP 模式处理</td></tr><tr><td>BigDecimal.ROUND_HALF_ DOWN</td><td>对商进行五舍六入操作。如果商最后一位小于等于 5，则做舍弃操作，否则对最后 一位进行进位操作</td></tr><tr><td>BigDecimal.ROUND_HALF_UP</td><td>对商进行四舍五入操作。如果商最后一位小于 5，则做舍弃操作，否则对最后一位 进行进位操作</td></tr><tr><td>BigDecimal.ROUND_HALF_EVEN</td><td>如果商的倒数第二位是奇数，则按照 ROUND_HALF_UP 处理；如果是偶数，则按 照 ROUND_HALF_DOWN 处理</td></tr></tbody></table><h2 id="三-日期日历" tabindex="-1"><a class="header-anchor" href="#三-日期日历"><span>三 日期日历</span></a></h2><h3 id="_1-date" tabindex="-1"><a class="header-anchor" href="#_1-date"><span>1. Date</span></a></h3><p>Date 类表示系统特定的时间戳，可以精确到毫秒。Date 对象表示时间的默认顺序是星期、月、日、小时、分、秒、年。</p><p>Date 类有如下两个构造方法。</p><ul><li>Date()：此种形式表示分配 Date 对象并初始化此对象，以表示分配它的时间（精确到毫秒），使用该构造方法创建的对象可以获取本地的当前时间。</li><li>Date(long date)：此种形式表示从 GMT 时间（格林尼治时间）1970 年 1 月 1 日 0 时 0 分 0 秒开始经过参数 date 指定的毫秒数。</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// Tue Oct 12 20:08:43 CST 2021</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Thu Jan 01 08:00:00 CST 1970</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Date 类带 long 类型参数的构造方法获取的是距离 GMT 指定毫秒数的时间，而 GMT（格林尼治标准时间）与 CST（中央标准时间）相差 8 小时，也就是说 <code>1970 年 1 月 1 日 00:00:00 GMT</code> 与 <code>1970 年 1 月 1 日 08:00:00 CST</code> 表示的是同一时间。</p><p>Date类中的常用方法：</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>boolean after(Date when)</td><td>判断此日期是否在指定日期之后</td></tr><tr><td>boolean before(Date when)</td><td>判断此日期是否在指定日期之前</td></tr><tr><td>int compareTo(Date anotherDate)</td><td>比较两个日期的顺序</td></tr><tr><td>boolean equals(Object obj)</td><td>比较两个日期的相等性</td></tr><tr><td>long getTime()</td><td>返回自 1970 年 1 月 1 日 00:00:00 GMT 以来，此 Date 对象表示的毫秒数</td></tr><tr><td>String toString()</td><td>把此 Date 对象转换为以下形式的 String: dow mon dd hh:mm:ss zzz yyyy</td></tr></tbody></table><h3 id="_2-dateformat" tabindex="-1"><a class="header-anchor" href="#_2-dateformat"><span>2. DateFormat</span></a></h3><p>DateFormat 是日期/时间格式化子类的抽象类，它以与语言无关的方式格式化并解析日期或时间，在创建 DateFormat 对象时不能使用 new 关键字，而应该使用 DateFormat 类中的静态方法 getDateInstance()</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">DateFormat</span> df <span class="token operator">=</span> <span class="token class-name">DateFormat</span><span class="token punctuation">.</span><span class="token function">getDatelnstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>String format(Date date)</td><td>将 Date 格式化日期/时间字符串</td></tr><tr><td>Calendar getCalendar()</td><td>获取与此日期/时间格式相关联的日历</td></tr><tr><td>static DateFormat getDateInstance()</td><td>获取具有默认格式化风格和默认语言环境的日期格式</td></tr><tr><td>static DateFormat getDateInstance(int style)</td><td>获取具有指定格式化风格和默认语言环境的日期格式</td></tr><tr><td>static DateFormat getDateInstance(int style, Locale locale)</td><td>获取具有指定格式化风格和指定语言环境的日期格式</td></tr><tr><td>static DateFormat getDateTimeInstance()</td><td>获取具有默认格式化风格和默认语言环境的日期/时间 格式</td></tr><tr><td>static DateFormat getDateTimeInstance(int dateStyle,int timeStyle)</td><td>获取具有指定日期/时间格式化风格和默认语言环境的 日期/时间格式</td></tr><tr><td>static DateFormat getDateTimeInstance(int dateStyle,int timeStyle,Locale locale)</td><td>获取具有指定日期/时间格式化风格和指定语言环境的 日期/时间格式</td></tr><tr><td>static DateFormat getTimeInstance()</td><td>获取具有默认格式化风格和默认语言环境的时间格式</td></tr><tr><td>static DateFormat getTimeInstance(int style)</td><td>获取具有指定格式化风格和默认语言环境的时间格式</td></tr><tr><td>static DateFormat getTimeInstance(int style, Locale locale)</td><td>获取具有指定格式化风格和指定语言环境的时间格式</td></tr><tr><td>void setCalendar(Calendar newCalendar)</td><td>为此格式设置日历</td></tr><tr><td>Date parse(String source)</td><td>将给定的字符串解析成日期/时间</td></tr></tbody></table><p>格式化样式主要通过 DateFormat 常量设置。将不同的常量传入到上表所示的方法中，以控制结果的长度。DateFormat 类的常量如下：</p><ul><li>SHORT：完全为数字，如 12.5.10 或 5:30pm。</li><li>MEDIUM：较长，如 May 10，2021。</li><li>LONG：更长，如 May 12，2021 或 11:15:32am。</li><li>FULL：是完全指定，如 Tuesday、May 10、2021 AD 或 11:15:42am CST。</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">DateFormat</span> dateInstance <span class="token operator">=</span> <span class="token class-name">DateFormat</span><span class="token punctuation">.</span><span class="token function">getDateInstance</span><span class="token punctuation">(</span><span class="token class-name">DateFormat</span><span class="token punctuation">.</span><span class="token constant">FULL</span><span class="token punctuation">,</span> <span class="token class-name">Locale</span><span class="token punctuation">.</span><span class="token constant">CHINA</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">DateFormat</span> timeInstance <span class="token operator">=</span> <span class="token class-name">DateFormat</span><span class="token punctuation">.</span><span class="token function">getTimeInstance</span><span class="token punctuation">(</span><span class="token class-name">DateFormat</span><span class="token punctuation">.</span><span class="token constant">FULL</span><span class="token punctuation">,</span> <span class="token class-name">Locale</span><span class="token punctuation">.</span><span class="token constant">CHINA</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">String</span> date <span class="token operator">=</span> dateInstance<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> time <span class="token operator">=</span> timeInstance<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 2021年10月12日 星期二</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 下午08时42分36秒 CST</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>SimpleDateFormat</strong>：</p><p>如果使用 DateFormat 类格式化日期/时间并不能满足要求，那么就需要使用 DateFormat 类的子类——SimpleDateFormat。</p><p>SimpleDateFormat 类主要有如下 3 种构造方法：</p><ul><li>SimpleDateFormat()：用默认的格式和默认的语言环境构造 SimpleDateFormat。</li><li>SimpleDateFormat(String pattern)：用指定的格式和默认的语言环境构造 SimpleDateF ormat。</li><li>SimpleDateFormat(String pattern, Locale locale)：用指定的格式和指定的语言环境构造 SimpleDateF ormat。</li></ul><p>SimpleDateFormat 自定义格式中常用的字母及含义：</p>`,52),d=n("thead",null,[n("tr",null,[n("th",null,"字母"),n("th",null,"含义"),n("th",null,"示例")])],-1),k=n("tr",null,[n("td",null,"y"),n("td",null,"年份。一般用 yy 表示两位年份，yyyy 表示 4 位年份"),n("td",null,"使用 yy 表示的年扮，如 11； 使用 yyyy 表示的年份，如 2021")],-1),r=n("td",null,"M",-1),m=n("td",null,"月份。一般用 MM 表示月份，如果使用 MMM，则会 根据语言环境显示不同语言的月份",-1),v={href:"http://Locale.US",target:"_blank",rel:"noopener noreferrer"},b=n("tr",null,[n("td",null,"d"),n("td",null,"月份中的天数。一般用 dd 表示天数"),n("td",null,"使用 dd 表示的天数，如 10")],-1),y=n("tr",null,[n("td",null,"D"),n("td",null,"年份中的天数。表示当天是当年的第几天， 用 D 表示"),n("td",null,"使用 D 表示的年份中的天数，如 295")],-1),h=n("td",null,"E",-1),g=n("td",null,"星期几。用 E 表示，会根据语言环境的不同， 显示不 同语言的星期几",-1),f={href:"http://Locale.US",target:"_blank",rel:"noopener noreferrer"},D=n("tr",null,[n("td",null,"H"),n("td",null,"一天中的小时数（0~23)。一般用 HH 表示小时数"),n("td",null,"使用 HH 表示的小时数，如 18")],-1),w=n("tr",null,[n("td",null,"h"),n("td",null,"一天中的小时数（1~12)。一般使用 hh 表示小时数"),n("td",null,"使用 hh 表示的小时数，如 10 (注意 10 有 可能是 10 点，也可能是 22 点）")],-1),_=n("tr",null,[n("td",null,"m"),n("td",null,"分钟数。一般使用 mm 表示分钟数"),n("td",null,"使用 mm 表示的分钟数，如 29")],-1),j=n("tr",null,[n("td",null,"s"),n("td",null,"秒数。一般使用 ss 表示秒数"),n("td",null,"使用 ss 表示的秒数，如 38")],-1),T=n("tr",null,[n("td",null,"S"),n("td",null,"毫秒数。一般使用 SSS 表示毫秒数"),n("td",null,"使用 SSS 表示的毫秒数，如 156")],-1),O=e(`<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// Date对象转换成时间字符串</span>
<span class="token class-name">SimpleDateFormat</span> sdf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">&quot;yyyy年MM月dd日 E HH:mm:ss&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sdf<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 2021年10月12日 星期二 20:36:58</span>

<span class="token comment">// 字符串转换成时间Date对象</span>
<span class="token class-name">SimpleDateFormat</span> simpleDateFormat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">&quot;yyyy-MM-dd&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Date</span> date <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token keyword">try</span> <span class="token punctuation">{</span>
    date <span class="token operator">=</span> simpleDateFormat<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">&quot;2021-10-1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ParseException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> 
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Wed Oct 13 00:00:00 CST 2021</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-calender" tabindex="-1"><a class="header-anchor" href="#_4-calender"><span>4. Calender</span></a></h3><p>Calendar 类是一个抽象类，因此创建 Calendar 对象不能使用 new 关键字，它提供了一个 getInstance() 方法来获得 Calendar类的对象。getInstance() 方法返回一个 Calendar 对象，其日历字段已由当前日期和时间初始化。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Calendar</span> c <span class="token operator">=</span> <span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>void add(int field, int amount)</td><td>根据日历的规则，为给定的日历字段 field 添加或减去指定的时间量 amount</td></tr><tr><td>boolean after(Object when)</td><td>判断此 Calendar 表示的时间是否在指定时间 when 之后，并返回判断结果</td></tr><tr><td>boolean before(Object when)</td><td>判断此 Calendar 表示的时间是否在指定时间 when 之前，并返回判断结果</td></tr><tr><td>void clear()</td><td>清空 Calendar 中的日期时间值</td></tr><tr><td>int compareTo(Calendar anotherCalendar)</td><td>比较两个 Calendar 对象表示的时间值（从格林威治时间 1970 年 01 月 01 日 00 时 00 分 00 秒至现在的毫秒偏移量），大则返回 1，小则返回 -1，相等返回 0</td></tr><tr><td>int get(int field)</td><td>返回指定日历字段的值</td></tr><tr><td>int getActualMaximum(int field)</td><td>返回指定日历字段可能拥有的最大值</td></tr><tr><td>int getActualMinimum(int field)</td><td>返回指定日历字段可能拥有的最小值</td></tr><tr><td>int getFirstDayOfWeek()</td><td>获取一星期的第一天。根据不同的国家地区，返回不同的值</td></tr><tr><td>static Calendar getInstance()</td><td>使用默认时区和语言坏境获得一个日历</td></tr><tr><td>static Calendar getInstance(TimeZone zone)</td><td>使用指定时区和默认语言环境获得一个日历</td></tr><tr><td>static Calendar getInstance(TimeZone zone, Locale aLocale)</td><td>使用指定时区和语言环境获得一个日历</td></tr><tr><td>Date getTime()</td><td>返回一个表示此 Calendar 时间值（从格林威治时间 1970 年 01 月 01 日 00 时 00 分 00 秒至现在的毫秒偏移量）的 Date 对象</td></tr><tr><td>long getTimeInMillis()</td><td>返回此 Calendar 的时间值，以毫秒为单位</td></tr><tr><td>void set(int field, int value)</td><td>为指定的日历字段设置给定值</td></tr><tr><td>void set(int year, int month, int date)</td><td>设置日历字段 YEAR、MONTH 和 DAY_OF_MONTH 的值</td></tr><tr><td>void set(int year, int month, int date, int hourOfDay, int minute, int second)</td><td>设置字段 YEAR、MONTH、DAY_OF_MONTH、HOUR、 MINUTE 和 SECOND 的值</td></tr><tr><td>void setFirstDayOfWeek(int value)</td><td>设置一星期的第一天是哪一天</td></tr><tr><td>void setTimeInMillis(long millis)</td><td>用给定的 long 值设置此 Calendar 的当前时间值</td></tr></tbody></table><p>Calendar 对象可以调用 set() 方法将日历翻到任何一个时间，当参数 year 取负数时表示公元前。Calendar 对象调用 get() 方法可以获取有关年、月、日等时间信息，参数 field 的有效值由 Calendar 静态常量指定。</p><p>Calendar 类中定义了许多常量，分别表示不同的意义。</p><ul><li>Calendar.YEAR：年份。</li><li>Calendar.MONTH：月份。</li><li>Calendar.DATE：日期。</li><li>Calendar.DAY_OF_MONTH：日期，和上面的字段意义完全相同。</li><li>Calendar.HOUR：12小时制的小时。</li><li>Calendar.HOUR_OF_DAY：24 小时制的小时。</li><li>Calendar.MINUTE：分钟。</li><li>Calendar.SECOND：秒。</li><li>Calendar.DAY_OF_WEEK：星期几。</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Calendar</span> calendar <span class="token operator">=</span> <span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 如果不设置时间，则默认为当前时间</span>
calendar<span class="token punctuation">.</span><span class="token function">setTime</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token comment">// 将系统当前时间赋值给 Calendar 对象</span>

calendar<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                           <span class="token comment">// 获取当前时间</span>
<span class="token keyword">int</span> year <span class="token operator">=</span> calendar<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token constant">YEAR</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// 获取当前年份</span>
<span class="token keyword">int</span> month <span class="token operator">=</span> calendar<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token constant">MONTH</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 获取当前月份（月份从 0 开始，所以加 1）</span>
<span class="token keyword">int</span> day <span class="token operator">=</span> calendar<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token constant">DATE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 获取日</span>

<span class="token keyword">int</span> week <span class="token operator">=</span> calendar<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token constant">DAY_OF_WEEK</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment">// 获取今天星期几（以星期日为第一天）</span>
<span class="token keyword">int</span> hour <span class="token operator">=</span> calendar<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token constant">HOUR_OF_DAY</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 获取当前小时数（24 小时制）</span>
<span class="token keyword">int</span> minute <span class="token operator">=</span> calendar<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token constant">MINUTE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">// 获取当前分钟</span>
<span class="token keyword">int</span> second <span class="token operator">=</span> calendar<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token constant">SECOND</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">// 获取当前秒数</span>
<span class="token keyword">int</span> millisecond <span class="token operator">=</span> calendar<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token constant">MILLISECOND</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取毫秒数</span>

<span class="token keyword">int</span> dayOfMonth <span class="token operator">=</span> calendar<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token constant">DAY_OF_MONTH</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token comment">// 获取今天是本月第几天</span>
<span class="token keyword">int</span> dayOfWeekInMonth <span class="token operator">=</span> calendar<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token constant">DAY_OF_WEEK_IN_MONTH</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 获取今天是本月第几周</span>
<span class="token keyword">int</span> many <span class="token operator">=</span> calendar<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token constant">DAY_OF_YEAR</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment">// 获取今天是今年第几天</span>

<span class="token class-name">Calendar</span> c <span class="token operator">=</span> <span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
c<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">2021</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                     <span class="token comment">// 设置年月日，时分秒将默认采用当前值</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-定时、周期任务" tabindex="-1"><a class="header-anchor" href="#_5-定时、周期任务"><span>5. 定时、周期任务</span></a></h3><p>Timer是jdk中提供的一个定时器工具，使用的时候会在主线程之外起一个单独的线程执行指定的计划任务，可以指定执行一次或者反复执行多次。Timer主要由TimerTask，TimerThread，TaskQueue组成</p><ul><li><p>TimerTask是一个实现了Runnable接口的抽象类，代表一个可以被Timer执行的任务。</p></li><li><p>TaskQueue就是用来保存TimerTask的队列，当有新的Task add进来时，会保存到改队列中。</p><p>需要注意的是，TaskQueue的内部实现使用的是最小堆，堆顶的Task是最近即将到时间的Task，所以在调度任务时，每次只需要取出堆顶元素，判断时间是否已到即可，效率非常高</p></li><li><p>TimerThread就是用来调度TaskQueue中的任务的线程。</p></li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 定时器Timer构造方法:</span>
<span class="token class-name">Timer</span> timer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Timer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//其中会调用this(&quot;Timer-&quot; + serialNumber());, 即它以Timer+序列号为该定时器的名字</span>
<span class="token class-name">Timer</span> timer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Timer</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// 以name作为该定时器的名字</span>
<span class="token class-name">Timer</span> timer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Timer</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> isDeamon<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 是否将此定时器作为守护线程执行</span>
<span class="token class-name">Timer</span> timer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Timer</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> isDeamon<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 定时器名字, 是否为守护线程</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>简单的定时任务示例：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TimerDemo</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 创建Timer对象</span>
        <span class="token keyword">final</span> <span class="token class-name">Timer</span> timer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Timer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token comment">// 任务执行时间</span>
            <span class="token keyword">final</span> <span class="token class-name">SimpleDateFormat</span> sdf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">Date</span> date <span class="token operator">=</span> sdf<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">&quot;2022-02-24 13:45:30&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// 创建定时任务</span>
            timer<span class="token punctuation">.</span><span class="token function">schedule</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Task</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> date<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ParseException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Task</span> <span class="token keyword">extends</span> <span class="token class-name">TimerTask</span><span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Boom!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 炸弹爆炸</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>调用方法</strong>：</p><div class="language-Java line-numbers-mode" data-ext="Java" data-title="Java"><pre class="language-Java"><code>schedule(TimerTask task, Date time) // 设定某个时间执行任务（只执行一次）
schedule(TimerTask task, long delay) // 安排在指定延迟后执行指定的任务(毫秒)

// 第一次在指定firstTime时间点执行任务，之后每隔period时间调用任务一次
schedule(TimerTask task,Date firstTime,long period) 

// delay时间后开始执行任务，并每隔period时间调用任务一次
schedule(TimerTask task,long delay,long period) 

scheduleAtFixedRate(TimerTask task,Date firstTime,long period) // 指定的时间开始进行重复的固定速率执行．

scheduleAtFixedRate(TimerTask task,long delay,long period)  // 指定的延迟后开始进行重复的固定速率执行．


public boolean cancel()    // 取消定时器
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>【注】schedule() 和 scheduleAtFixedRate()</p><ul><li>schedule()方法更注重保持间隔时间的稳定：保障每隔period时间可调用一次</li><li>scheduleAtFixedRate()方法更注重保持执行频率的稳定：保障多次调用的频率趋近于period时间，如果某一次调用时间大于period，下一次就会尽量小于period，以保障频率接近于period</li></ul><h2 id="四-robot类" tabindex="-1"><a class="header-anchor" href="#四-robot类"><span>四 Robot类</span></a></h2><p>Robot类用于为测试自动化、自运行演示程序和其他需要控制鼠标和键盘的应用程序生成本机系统输入事件。</p><p>Robot 的主要目的是便于 Java 平台实现自动测试。Java中使用Robot类时，需要导入java.awt包</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">cn<span class="token punctuation">.</span>itdrizzle<span class="token punctuation">.</span>util</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>event<span class="token punctuation">.</span></span><span class="token class-name">InputEvent</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>event<span class="token punctuation">.</span></span><span class="token class-name">KeyEvent</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DeletePPTMark</span> <span class="token punctuation">{</span>
    <span class="token class-name">Robot</span> robot<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">DeletePPTMark</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>robot <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Robot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">AWTException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 移动鼠标会受到屏幕缩放的影响，例如显示比例为 150时，需要除以 1.5
     * <span class="token keyword">@author</span> itdrizzle
     * <span class="token keyword">@date</span> 2022/3/5 20:44
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">mouseMove</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        x <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>x <span class="token operator">/</span> <span class="token number">1.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        y <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>y <span class="token operator">/</span> <span class="token number">1.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        robot<span class="token punctuation">.</span><span class="token function">mouseMove</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 模拟点击鼠标左键
     * <span class="token keyword">@author</span> itdrizzle
     * <span class="token keyword">@date</span> 2022/3/5 21:00
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        robot<span class="token punctuation">.</span><span class="token function">mousePress</span><span class="token punctuation">(</span><span class="token class-name">InputEvent</span><span class="token punctuation">.</span><span class="token constant">BUTTON1_DOWN_MASK</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        robot<span class="token punctuation">.</span><span class="token function">delay</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">600</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        robot<span class="token punctuation">.</span><span class="token function">mouseRelease</span><span class="token punctuation">(</span><span class="token class-name">InputEvent</span><span class="token punctuation">.</span><span class="token constant">BUTTON1_DOWN_MASK</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 模拟按下删除键
     * <span class="token keyword">@author</span> itdrizzle
     * <span class="token keyword">@date</span> 2022/3/5 21:01
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        robot<span class="token punctuation">.</span><span class="token function">keyPress</span><span class="token punctuation">(</span><span class="token class-name">KeyEvent</span><span class="token punctuation">.</span><span class="token constant">VK_DELETE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        robot<span class="token punctuation">.</span><span class="token function">delay</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">600</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        robot<span class="token punctuation">.</span><span class="token function">keyRelease</span><span class="token punctuation">(</span><span class="token class-name">KeyEvent</span><span class="token punctuation">.</span><span class="token constant">VK_DELETE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">44</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 处理第一个水印</span>
            <span class="token function">mouseMove</span><span class="token punctuation">(</span><span class="token number">2162</span><span class="token punctuation">,</span> <span class="token number">386</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">mouseMove</span><span class="token punctuation">(</span><span class="token number">2186</span><span class="token punctuation">,</span> <span class="token number">346</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// 处理第二个水印</span>
            <span class="token function">mouseMove</span><span class="token punctuation">(</span><span class="token number">1829</span><span class="token punctuation">,</span> <span class="token number">594</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">mouseMove</span><span class="token punctuation">(</span><span class="token number">1844</span><span class="token punctuation">,</span> <span class="token number">522</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// 处理第三个水印</span>
            <span class="token function">mouseMove</span><span class="token punctuation">(</span><span class="token number">1529</span><span class="token punctuation">,</span> <span class="token number">800</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">mouseMove</span><span class="token punctuation">(</span><span class="token number">1588</span><span class="token punctuation">,</span> <span class="token number">795</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// 处理第四个水印</span>
            <span class="token function">mouseMove</span><span class="token punctuation">(</span><span class="token number">1100</span><span class="token punctuation">,</span> <span class="token number">918</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">mouseMove</span><span class="token punctuation">(</span><span class="token number">1177</span><span class="token punctuation">,</span> <span class="token number">898</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// 处理第五个水印</span>
            <span class="token function">mouseMove</span><span class="token punctuation">(</span><span class="token number">797</span><span class="token punctuation">,</span> <span class="token number">1164</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">mouseMove</span><span class="token punctuation">(</span><span class="token number">886</span><span class="token punctuation">,</span> <span class="token number">1138</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// 点击进入下一页</span>
            <span class="token function">mouseMove</span><span class="token punctuation">(</span><span class="token number">2546</span><span class="token punctuation">,</span> <span class="token number">1449</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token keyword">final</span> <span class="token class-name">DeletePPTMark</span> robot <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DeletePPTMark</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// robot.start();</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,23);function S(M,x){const a=c("ExternalLinkIcon");return o(),l("div",null,[u,n("table",null,[d,n("tbody",null,[k,n("tr",null,[r,m,n("td",null,[s("使用 MM 表示的月份，如 05； 使用 MMM 表示月份，在 Locale.CHINA 语言环境下，如“十月”；在 "),n("a",v,[s("Locale.US"),t(a)]),s(" 语言环境下，如 Oct")])]),b,y,n("tr",null,[h,g,n("td",null,[s("使用 E 表示星期几，在 Locale.CHINA 语 言环境下，如“星期四”；在 "),n("a",f,[s("Locale.US"),t(a)]),s(" 语 言环境下，如 Thu")])]),D,w,_,j,T])]),O])}const E=p(i,[["render",S],["__file","Java常用类库.html.vue"]]),N=JSON.parse('{"path":"/java/syntax/base/Java%E5%B8%B8%E7%94%A8%E7%B1%BB%E5%BA%93.html","title":"Java常用类库","lang":"en-US","frontmatter":{"order":30,"description":"Java常用类库 一 常用类库 1. Objects 在JDK7版本的时候，Java引入了java.util.Objects工具类，用于封装一些平时使用频度很高或容易出错的操作，这些操作形成了Objects的各个方法。 equals()：有别于Object.equals()，这个方法可以避免空指针异常。 deepEquals()：Object.equa...","head":[["meta",{"property":"og:url","content":"https://x.app/notebook/java/syntax/base/Java%E5%B8%B8%E7%94%A8%E7%B1%BB%E5%BA%93.html"}],["meta",{"property":"og:site_name","content":"Notebook"}],["meta",{"property":"og:title","content":"Java常用类库"}],["meta",{"property":"og:description","content":"Java常用类库 一 常用类库 1. Objects 在JDK7版本的时候，Java引入了java.util.Objects工具类，用于封装一些平时使用频度很高或容易出错的操作，这些操作形成了Objects的各个方法。 equals()：有别于Object.equals()，这个方法可以避免空指针异常。 deepEquals()：Object.equa..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-04-15T09:06:58.000Z"}],["meta",{"property":"article:author","content":"Mr.Topple"}],["meta",{"property":"article:modified_time","content":"2024-04-15T09:06:58.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java常用类库\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-04-15T09:06:58.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Topple\\",\\"url\\":\\"https://www.baidu.com\\"}]}"]]},"headers":[{"level":2,"title":"一 常用类库","slug":"一-常用类库","link":"#一-常用类库","children":[{"level":3,"title":"1. Objects","slug":"_1-objects","link":"#_1-objects","children":[]},{"level":3,"title":"2. Arrays","slug":"_2-arrays","link":"#_2-arrays","children":[]},{"level":3,"title":"3. System","slug":"_3-system","link":"#_3-system","children":[]}]},{"level":2,"title":"二 数学工具","slug":"二-数学工具","link":"#二-数学工具","children":[{"level":3,"title":"1. Math","slug":"_1-math","link":"#_1-math","children":[]},{"level":3,"title":"2. BigDecimal","slug":"_2-bigdecimal","link":"#_2-bigdecimal","children":[]}]},{"level":2,"title":"三 日期日历","slug":"三-日期日历","link":"#三-日期日历","children":[{"level":3,"title":"1. Date","slug":"_1-date","link":"#_1-date","children":[]},{"level":3,"title":"2. DateFormat","slug":"_2-dateformat","link":"#_2-dateformat","children":[]},{"level":3,"title":"4. Calender","slug":"_4-calender","link":"#_4-calender","children":[]},{"level":3,"title":"5. 定时、周期任务","slug":"_5-定时、周期任务","link":"#_5-定时、周期任务","children":[]}]},{"level":2,"title":"四 Robot类","slug":"四-robot类","link":"#四-robot类","children":[]}],"git":{"createdTime":1713172018000,"updatedTime":1713172018000,"contributors":[{"name":"Neil","email":"msdrizzle@outlook.com","commits":1}]},"readingTime":{"minutes":17.68,"words":5303},"filePathRelative":"java/syntax/base/Java常用类库.md","localizedDate":"April 15, 2024","autoDesc":true}');export{E as comp,N as data};
