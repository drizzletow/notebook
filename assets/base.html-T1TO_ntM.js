import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as i,c as l,a as n,b as s,d as e,e as t}from"./app-CavufwmA.js";const c={},d=n("h2",{id:"python快速入门",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#python快速入门"},[n("span",null,"Python快速入门")])],-1),u=n("h3",{id:"代码风格及注释",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#代码风格及注释"},[n("span",null,"代码风格及注释")])],-1),r=n("p",null,"在Python编程中，良好的代码风格和注释是非常重要的，因为它们可以提高代码的可读性和可维护性。以下是一些常见的Python代码风格和注释的指南：",-1),k=n("p",null,"代码风格：",-1),m=n("li",null,"使用4个空格作为缩进。不要使用制表符。",-1),v=n("li",null,"在逻辑块之间留出适当的空行，以提高代码的可读性。",-1),b=n("li",null,"使用恰当的命名规范，例如使用小写字母和下划线来分隔单词（snake_case）。",-1),y=n("li",null,"尽量保持每行代码的长度在80个字符以内，可以使用括号或反斜杠来换行。",-1),h={href:"https://peps.python.org/pep-0008/",target:"_blank",rel:"noopener noreferrer"},g=n("li",null,[n("p",null,"注释："),n("p",null,"在代码中添加适当的注释，注释应该清晰、简洁，并且易于理解，对于复杂的代码块或算法，提供详细的注释，以帮助他人理解代码的实现。")],-1),w=t(`<p>下面是一个示例代码，展示了良好的代码风格和注释的实例：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token comment"># 计算给定数字列表的平均值</span>
<span class="token keyword">def</span> <span class="token function">calculate_average</span><span class="token punctuation">(</span>numbers<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;
    计算给定数字列表的平均值。

    Args:
        numbers (list): 包含数字的列表。

    Returns:
        float: 平均值。

    Raises:
        ValueError: 如果列表为空。

    &quot;&quot;&quot;</span>
    <span class="token keyword">if</span> <span class="token keyword">not</span> numbers<span class="token punctuation">:</span>
        <span class="token keyword">raise</span> ValueError<span class="token punctuation">(</span><span class="token string">&quot;列表不能为空。&quot;</span><span class="token punctuation">)</span>

    total <span class="token operator">=</span> <span class="token builtin">sum</span><span class="token punctuation">(</span>numbers<span class="token punctuation">)</span>
    average <span class="token operator">=</span> total <span class="token operator">/</span> <span class="token builtin">len</span><span class="token punctuation">(</span>numbers<span class="token punctuation">)</span>
    <span class="token keyword">return</span> average

<span class="token comment"># 示例用法</span>
data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>
avg <span class="token operator">=</span> calculate_average<span class="token punctuation">(</span>data<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;平均值:&quot;</span><span class="token punctuation">,</span> avg<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述示例代码遵循了PEP 8代码风格指南，并在函数定义和关键步骤处添加了注释，注释使用了文档字符串（docstring）的形式，以描述函数的输入、输出和功能。</p><h3 id="变量和运算符" tabindex="-1"><a class="header-anchor" href="#变量和运算符"><span>变量和运算符</span></a></h3><p>在Python中，变量用于存储数据，并且可以通过赋值操作来给变量赋予新的值。Python支持各种不同类型的变量，包括整数、浮点数、字符串、布尔值等。以下是Python中常见的变量和运算符：</p><ol><li><p>变量：</p><ul><li>变量是用来存储数据的标识符。</li><li>在Python中，你不需要事先声明变量的类型，变量的类型是根据赋给它的值来确定的。</li><li>变量名可以包含字母、数字和下划线，但不能以数字开头。</li><li>变量名区分大小写，例如<code>count</code>和<code>Count</code>是不同的变量名。</li></ul><p>示例：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token comment"># 整数变量</span>
age <span class="token operator">=</span> <span class="token number">25</span>

<span class="token comment"># 浮点数变量</span>
temperature <span class="token operator">=</span> <span class="token number">37.5</span>

<span class="token comment"># 字符串变量</span>
name <span class="token operator">=</span> <span class="token string">&quot;John Doe&quot;</span>

<span class="token comment"># 布尔变量</span>
is_student <span class="token operator">=</span> <span class="token boolean">True</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>运算符：</p><ul><li><p>Python支持各种运算符，用于在表达式中执行算术、逻辑和比较操作。</p></li><li><p>算术运算符：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token operator">+</span>   <span class="token comment"># 加法</span>
<span class="token operator">-</span>   <span class="token comment"># 减法</span>
<span class="token operator">*</span>   <span class="token comment"># 乘法</span>
<span class="token operator">/</span>   <span class="token comment"># 除法</span>
<span class="token operator">%</span>   <span class="token comment"># 取模（求余）</span>
<span class="token operator">**</span>  <span class="token comment"># 幂运算</span>
<span class="token operator">//</span>  <span class="token comment"># 地板除法（向下取整除法）</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>赋值运算符：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token operator">=</span>   <span class="token comment"># 赋值</span>
<span class="token operator">+=</span>  <span class="token comment"># 加法赋值</span>
<span class="token operator">-=</span>  <span class="token comment"># 减法赋值</span>
<span class="token operator">*=</span>  <span class="token comment"># 乘法赋值</span>
<span class="token operator">/=</span>  <span class="token comment"># 除法赋值</span>
<span class="token operator">%=</span>  <span class="token comment"># 取模赋值</span>
<span class="token operator">**=</span> <span class="token comment"># 幂赋值</span>
<span class="token operator">//=</span> <span class="token comment"># 地板除法赋值</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>比较运算符：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token operator">==</span>  <span class="token comment"># 等于</span>
<span class="token operator">!=</span>  <span class="token comment"># 不等于</span>
<span class="token operator">&gt;</span>   <span class="token comment"># 大于</span>
<span class="token operator">&lt;</span>   <span class="token comment"># 小于</span>
<span class="token operator">&gt;=</span>  <span class="token comment"># 大于等于</span>
<span class="token operator">&lt;=</span>  <span class="token comment"># 小于等于</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>逻辑运算符：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">and</span>   <span class="token comment"># 与</span>
<span class="token keyword">or</span>    <span class="token comment"># 或</span>
<span class="token keyword">not</span>   <span class="token comment"># 非</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>其他运算符：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">in</span>     <span class="token comment"># 在序列中</span>
<span class="token keyword">not</span> <span class="token keyword">in</span> <span class="token comment"># 不在序列中</span>
<span class="token keyword">is</span>     <span class="token comment"># 是同一个对象</span>
<span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token comment"># 不是同一个对象</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><p>示例：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>x <span class="token operator">=</span> <span class="token number">10</span>
y <span class="token operator">=</span> <span class="token number">5</span>

<span class="token comment"># 算术运算</span>
<span class="token builtin">sum</span> <span class="token operator">=</span> x <span class="token operator">+</span> y
difference <span class="token operator">=</span> x <span class="token operator">-</span> y
product <span class="token operator">=</span> x <span class="token operator">*</span> y
quotient <span class="token operator">=</span> x <span class="token operator">/</span> y

<span class="token comment"># 赋值运算</span>
x <span class="token operator">+=</span> <span class="token number">1</span>  <span class="token comment"># 等同于 x = x + 1</span>

<span class="token comment"># 比较运算</span>
is_equal <span class="token operator">=</span> x <span class="token operator">==</span> y
is_greater <span class="token operator">=</span> x <span class="token operator">&gt;</span> y
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="基本输入和输出" tabindex="-1"><a class="header-anchor" href="#基本输入和输出"><span>基本输入和输出</span></a></h3><p>在Python中，输入和输出是常见的编程任务，用于与用户交互或从文件中读取数据。Python提供了多种方法来进行输入和输出操作。以下是Python中的输入输出及其在不同版本中的异同之处的概述：</p><ol><li><p>输入：</p><ul><li>Python 2.x：<code>raw_input()</code>函数用于从用户获取输入，并将其作为字符串返回。</li><li>Python 3.x：<code>input()</code>函数用于从用户获取输入，并将其作为字符串返回。</li></ul><p>示例：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token comment"># Python 2.x</span>
name <span class="token operator">=</span> <span class="token builtin">raw_input</span><span class="token punctuation">(</span><span class="token string">&quot;请输入您的姓名：&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;您的姓名是：&quot;</span> <span class="token operator">+</span> name<span class="token punctuation">)</span>

<span class="token comment"># Python 3.x</span>
name <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&quot;请输入您的姓名：&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;您的姓名是：&quot;</span> <span class="token operator">+</span> name<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>输出：</p><ul><li>Python 2.x：使用<code>print</code>语句进行输出。</li><li>Python 3.x：<code>print()</code>函数用于输出。</li></ul><p>示例：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token comment"># Python 2.x</span>
<span class="token keyword">print</span> <span class="token string">&quot;Hello, World!&quot;</span>

<span class="token comment"># Python 3.x</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Hello, World!&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>异同之处：</p><ul><li>在Python 2.x中，<code>print</code>是一个语句而不是函数，因此可以省略括号。在Python 3.x中，<code>print</code>是一个函数，必须使用括号。</li><li>在Python 2.x中，<code>raw_input()</code>函数将用户输入作为字符串返回。在Python 3.x中，<code>input()</code>函数也将用户输入作为字符串返回，但是去除了<code>raw_input()</code>函数，因此输入不再被隐式地评估为Python表达式。</li></ul><p>示例：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token comment"># Python 2.x</span>
number <span class="token operator">=</span> <span class="token builtin">raw_input</span><span class="token punctuation">(</span><span class="token string">&quot;请输入一个数字：&quot;</span><span class="token punctuation">)</span>  <span class="token comment"># 输入：5</span>
<span class="token keyword">print</span> <span class="token builtin">type</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span>  <span class="token comment"># 输出： &lt;type &#39;str&#39;&gt;</span>
<span class="token keyword">print</span> number <span class="token operator">+</span> <span class="token number">10</span>  <span class="token comment"># 输出：TypeError: cannot concatenate &#39;str&#39; and &#39;int&#39; objects</span>

<span class="token comment"># Python 3.x</span>
number <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&quot;请输入一个数字：&quot;</span><span class="token punctuation">)</span>  <span class="token comment"># 输入：5</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出： &lt;class &#39;str&#39;&gt;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>number <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">)</span>  <span class="token comment"># 输出：TypeError: can only concatenate str (not &quot;int&quot;) to str</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><p>需要注意的是，这些是一般情况下的输入输出方法，具体的使用方式可以根据具体的Python版本和需求进行调整。此外，还有其他更高级的输入输出方法，如文件读写、格式化输出等，可以根据具体需求进行学习和应用。</p><h2 id="python流程控制" tabindex="-1"><a class="header-anchor" href="#python流程控制"><span>Python流程控制</span></a></h2><h3 id="条件语句-if" tabindex="-1"><a class="header-anchor" href="#条件语句-if"><span>条件语句-if</span></a></h3><p>在Python的流程控制中，条件语句用于根据给定条件的真假来执行不同的代码块。Python提供了<code>if</code>语句来实现条件语句的控制流。条件语句让我们能够根据不同的条件选择性地执行特定的代码块。</p><p>条件语句的基本结构如下：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">if</span> condition<span class="token punctuation">:</span>
    <span class="token comment"># 条件为真时执行的代码块</span>
<span class="token keyword">else</span><span class="token punctuation">:</span>
    <span class="token comment"># 条件为假时执行的代码块</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中，<code>condition</code>是一个布尔表达式，它可以是一个变量、表达式或者比较运算符的结果。如果条件为真，将执行<code>if</code>语句后的代码块；如果条件为假，将执行<code>else</code>语句后的代码块（如果有的话）。</p><p>在条件语句中还可以使用<code>elif</code>（即&quot;else if&quot;的缩写）来添加更多的条件分支，使得我们可以根据多个条件进行选择。<code>elif</code>语句可以有多个，可以根据需要灵活使用。</p><p>下面是一个示例，演示了条件语句的使用：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>score <span class="token operator">=</span> <span class="token number">85</span>

<span class="token keyword">if</span> score <span class="token operator">&gt;=</span> <span class="token number">90</span><span class="token punctuation">:</span>
    grade <span class="token operator">=</span> <span class="token string">&#39;A&#39;</span>
<span class="token keyword">elif</span> score <span class="token operator">&gt;=</span> <span class="token number">80</span><span class="token punctuation">:</span>
    grade <span class="token operator">=</span> <span class="token string">&#39;B&#39;</span>
<span class="token keyword">elif</span> score <span class="token operator">&gt;=</span> <span class="token number">70</span><span class="token punctuation">:</span>
    grade <span class="token operator">=</span> <span class="token string">&#39;C&#39;</span>
<span class="token keyword">elif</span> score <span class="token operator">&gt;=</span> <span class="token number">60</span><span class="token punctuation">:</span>
    grade <span class="token operator">=</span> <span class="token string">&#39;D&#39;</span>
<span class="token keyword">else</span><span class="token punctuation">:</span>
    grade <span class="token operator">=</span> <span class="token string">&#39;F&#39;</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;分数:&quot;</span><span class="token punctuation">,</span> score<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;等级:&quot;</span><span class="token punctuation">,</span> grade<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container warning"><p class="hint-container-title">if语句的缩进</p><p>需要注意的是，在条件语句中，<code>if</code>、<code>elif</code>和<code>else</code>语句后面的代码块必须缩进，以表示它们属于条件语句的一部分。通常使用四个空格作为标准的缩进风格。</p></div><h3 id="python循环语句" tabindex="-1"><a class="header-anchor" href="#python循环语句"><span>Python循环语句</span></a></h3><p>在Python中，循环语句用于重复执行一段代码，直到满足特定条件或循环次数达到预定值。Python提供了两种类型的循环语句：<code>for</code>循环和<code>while</code>循环。</p><ol><li><p><code>for</code>循环：<br><code>for</code>循环用于遍历序列（如列表、元组、字符串等）或其他可迭代对象的元素，并执行特定的代码块。它的基本语法如下：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">for</span> element <span class="token keyword">in</span> iterable<span class="token punctuation">:</span>
    <span class="token comment"># 执行的代码块</span>
<span class="token keyword">else</span><span class="token punctuation">:</span>
    <span class="token comment"># 可选的，当循环正常结束时执行的代码块</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>element</code>是一个变量，用于迭代遍历<code>iterable</code>中的元素。在每次迭代时，<code>element</code>会被赋值为<code>iterable</code>中的一个元素，并执行相应的代码块。当循环遍历完所有元素后，会执行<code>else</code>语句后的代码块（如果有的话）。</p><p>示例：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>fruits <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;apple&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;banana&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;orange&#39;</span><span class="token punctuation">]</span>

<span class="token keyword">for</span> fruit <span class="token keyword">in</span> fruits<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>fruit<span class="token punctuation">)</span>

<span class="token comment"># 输出：</span>
<span class="token comment"># apple</span>
<span class="token comment"># banana</span>
<span class="token comment"># orange</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>while</code>循环：<br><code>while</code>循环用于在满足特定条件的情况下重复执行一段代码。它的基本语法如下：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">while</span> condition<span class="token punctuation">:</span>
    <span class="token comment"># 执行的代码块</span>
<span class="token keyword">else</span><span class="token punctuation">:</span>
    <span class="token comment"># 可选的，当循环正常结束时执行的代码块</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>condition</code>是一个布尔表达式，如果条件为真，则执行循环内的代码块，直到条件为假或遇到<code>break</code>语句为止。当循环结束时，会执行<code>else</code>语句后的代码块（如果有的话）。</p><p>示例：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code>count <span class="token operator">=</span> <span class="token number">0</span>

<span class="token keyword">while</span> count <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span>
    count <span class="token operator">+=</span> <span class="token number">1</span>

<span class="token comment"># 输出：</span>
<span class="token comment"># 0</span>
<span class="token comment"># 1</span>
<span class="token comment"># 2</span>
<span class="token comment"># 3</span>
<span class="token comment"># 4</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><p>循环语句在编程中非常有用，可以根据条件或迭代对象的元素重复执行特定的代码块。需要注意的是，在循环语句中，循环内的代码块必须缩进，以表示它们属于循环的一部分。同样地，<code>else</code>语句后的代码块也需要缩进，以表示它属于循环语句的一部分。</p><p>在循环中，还可以使用<code>break</code>语句提前结束循环，或者使用<code>continue</code>语句跳过当前迭代，直接进入下一次迭代。这些控制语句可以帮助我们更灵活地控制循环的执行流程。</p><h2 id="python异常和模块" tabindex="-1"><a class="header-anchor" href="#python异常和模块"><span>Python异常和模块</span></a></h2><h3 id="异常处理" tabindex="-1"><a class="header-anchor" href="#异常处理"><span>异常处理</span></a></h3><p>在 Python 中，异常（Exception）用于处理程序执行过程中的错误和异常情况。异常提供了一种机制，让我们能够优雅地处理错误，并采取适当的措施，以避免程序崩溃或产生不可预料的结果。</p><p>下面是对 Python 异常的详细介绍：</p><ol><li><p>异常的种类：</p><ul><li>在 Python 中，异常分为内置异常和自定义异常两种类型。</li><li>内置异常是 Python 提供的一组预定义的异常类型，如 <code>ZeroDivisionError</code>（除零错误）、<code>TypeError</code>（类型错误）等。这些异常可以直接使用，也可以通过继承它们来创建自定义异常。</li><li>自定义异常是根据特定需求定义的异常类型，可以通过继承内置异常类或其他自定义异常类来创建。</li></ul></li><li><p>异常处理：</p><ul><li>在 Python 中，使用 <code>try-except</code> 语句来捕获和处理异常。</li><li><code>try</code> 语句块用于包含可能引发异常的代码。</li><li><code>except</code> 语句块用于指定在捕获到特定异常时要执行的代码逻辑。</li><li><code>finally</code> 语句块用于指定无论是否发生异常，都要执行的清理代码逻辑。</li><li>可以使用多个 <code>except</code> 语句块来捕获不同类型的异常，并提供相应的处理逻辑。</li></ul></li><li><p>异常的抛出：</p><ul><li>在 Python 中，可以使用 <code>raise</code> 关键字手动引发异常。</li><li><code>raise</code> 后面可以跟一个异常类型或异常对象，用于指定要引发的异常。</li><li>引发异常后，程序会中断当前代码块的执行，并开始执行异常处理逻辑。</li></ul></li></ol>`,30),_={class:"hint-container info"},f=n("p",{class:"hint-container-title"},"官方文档",-1),x={href:"https://docs.python.org/3/tutorial/errors.html",target:"_blank",rel:"noopener noreferrer"},P=t(`<p>下面是一个异常处理的示例代码：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">divide</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        result <span class="token operator">=</span> a <span class="token operator">/</span> b
        <span class="token keyword">return</span> result
    <span class="token keyword">except</span> ZeroDivisionError<span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;除数不能为零！&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">except</span> TypeError<span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;类型错误！&quot;</span><span class="token punctuation">)</span>

<span class="token comment"># 调用函数并处理异常</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>divide<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># 输出: 5.0</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>divide<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># 输出: 除数不能为零！</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>divide<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">&quot;2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出: 类型错误！</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>需要注意的是：</p><ul><li>异常处理应该针对具体的异常类型，避免使用宽泛的异常捕获语句，如 <code>except Exception</code>，因为这可能会隐藏其他潜在的问题。异常处理的顺序很重要，应该从特定的异常类型到通用的异常类型进行捕获，以确保正确的处理逻辑被执行。</li><li>在处理异常时，应该根据具体情况选择适当的处理方式，可以是恢复程序正常执行、记录异常信息、向上层抛出异常或其他适当的操作。</li><li>异常处理是一种良好的编程实践，能够提高程序的健壮性和可读性。然而，过度使用异常处理可能会导致代码的复杂性增加，因此需要谨慎使用。</li></ul><h3 id="自定义异常" tabindex="-1"><a class="header-anchor" href="#自定义异常"><span>自定义异常</span></a></h3><p>在 Python 中，可以通过自定义异常来扩展内置的异常类型，以便更好地满足特定的需求。自定义异常可以帮助我们更好地组织和处理代码中的错误情况。</p><p>下面是对 Python 自定义异常的详细介绍：</p><ol><li><p>创建自定义异常类：</p><ul><li>在 Python 中，创建自定义异常类非常简单，只需要定义一个新的类并继承内置的异常类即可。</li><li>通常情况下，我们会继承 <code>Exception</code> 类或其子类来创建自定义异常。</li><li>可以在自定义异常类中添加额外的属性和方法，以满足特定的需求。</li></ul></li><li><p>触发自定义异常：</p><ul><li>当满足特定条件时，可以使用 <code>raise</code> 关键字手动触发自定义异常。</li><li>在触发异常时，可以传递一些必要的信息作为异常的参数，以便在异常处理中使用。</li></ul></li></ol>`,8),q={class:"hint-container info"},E=n("p",{class:"hint-container-title"},"官方文档地址",-1),T={href:"https://docs.python.org/3/tutorial/errors.html#user-defined-exceptions",target:"_blank",rel:"noopener noreferrer"},C=t(`<p>下面是一个自定义异常的示例代码：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">MyCustomException</span><span class="token punctuation">(</span>Exception<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>message <span class="token operator">=</span> message
    
    <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>message

<span class="token keyword">def</span> <span class="token function">divide</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> b <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
        <span class="token keyword">raise</span> MyCustomException<span class="token punctuation">(</span><span class="token string">&quot;除数不能为零！&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> a <span class="token operator">/</span> b

<span class="token keyword">try</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>divide<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># 输出: 5.0</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>divide<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># 触发自定义异常，并输出异常信息</span>
<span class="token keyword">except</span> MyCustomException <span class="token keyword">as</span> e<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>                <span class="token comment"># 输出: 除数不能为零！</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>需要注意的是：</p><ul><li>在自定义异常类中，通常会重写 <code>__init__</code> 方法来初始化异常的属性，并可能还会重写 <code>__str__</code> 方法以提供异常的字符串表示。</li><li>自定义异常可以按照需要添加任意数量的属性和方法，以满足特定的需求。</li><li>在触发自定义异常时，可以传递适当的信息作为参数，以便在异常处理中使用。</li><li>自定义异常应该是可识别和有意义的，以便在程序中进行区分和处理。</li></ul><h3 id="模块及其使用" tabindex="-1"><a class="header-anchor" href="#模块及其使用"><span>模块及其使用</span></a></h3><p>在 Python 中，模块是一种组织和重用代码的方式。模块可以包含变量、函数和类等，使得代码可以被分离和组织为逻辑上的单元。Python 提供了丰富的标准库模块，同时也支持自定义模块的创建和使用。</p><p>下面是对 Python 模块的详细介绍：</p><ol><li><p>导入模块：</p><ul><li>在使用模块之前，需要使用 <code>import</code> 关键字将模块导入到当前的 Python 环境中。</li><li>可以使用 <code>import</code> 语句导入整个模块，或者使用 <code>from module import name</code> 导入模块中的特定部分。</li></ul></li><li><p>使用模块：</p><ul><li>导入模块后，可以使用模块中定义的变量、函数和类等。</li><li>可以使用模块名加点操作符来访问模块中的成员。</li></ul></li></ol>`,8),R={class:"hint-container info"},D=n("p",{class:"hint-container-title"},"官方文档地址",-1),M={href:"https://docs.python.org/3/tutorial/modules.html",target:"_blank",rel:"noopener noreferrer"},N=t(`<p>下面是一个使用模块的示例代码：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token comment"># 导入整个模块</span>
<span class="token keyword">import</span> math

<span class="token comment"># 使用模块中的函数和变量</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>math<span class="token punctuation">.</span>pi<span class="token punctuation">)</span>                  <span class="token comment"># 输出圆周率的值</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>math<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token comment"># 输出 16 的平方根</span>

<span class="token comment"># 导入模块中的特定部分</span>
<span class="token keyword">from</span> random <span class="token keyword">import</span> randint

<span class="token comment"># 使用导入的函数</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>           <span class="token comment"># 输出 1 到 10 之间的随机整数</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>需要注意的是：</p><ul><li>导入模块后，可以通过模块名访问模块中的成员，例如 <code>module_name.member_name</code>。</li><li>可以使用 <code>as</code> 关键字给模块或成员起一个别名，以便在代码中更方便地使用。</li><li>可以通过 <code>from module import *</code> 的方式导入模块中的所有成员，但不推荐使用这种方式，因为可能会引入命名冲突的问题。</li></ul><h3 id="自定义模块" tabindex="-1"><a class="header-anchor" href="#自定义模块"><span>自定义模块</span></a></h3><p>在 Python 中，自定义模块是将相关的代码组织到一个文件中，以便在其他 Python 脚本中进行导入和使用。通过自定义模块，可以将代码按照功能或逻辑组织成模块，提高代码的可维护性和复用性。</p><p>下面是对 Python 自定义模块的详细介绍：</p><ol><li><p>创建自定义模块：</p><ul><li>创建一个新的 Python 文件，文件名即为模块名，文件扩展名通常为 <code>.py</code>。</li><li>在该文件中，可以定义变量、函数、类等，以实现所需的功能。</li><li>可以将相关的代码块组织到不同的函数和类中，以便更好地组织和重用代码。</li></ul></li><li><p>导入自定义模块：</p><ul><li>在其他 Python 脚本中使用自定义模块之前，需要使用 <code>import</code> 关键字将模块导入到当前的 Python 环境中。</li><li>可以使用 <code>import module_name</code> 导入整个模块，或者使用 <code>from module_name import name</code> 导入模块中的特定部分。</li></ul></li><li><p>使用自定义模块：</p><ul><li>导入模块后，可以使用模块中定义的变量、函数和类等。</li><li>可以使用模块名加点操作符来访问模块中的成员。</li></ul></li></ol><p>下面是一个自定义模块的示例代码：</p><p><strong>my_module.py</strong></p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token comment"># 自定义模块示例</span>

<span class="token comment"># 定义变量</span>
PI <span class="token operator">=</span> <span class="token number">3.14159</span>

<span class="token comment"># 定义函数</span>
<span class="token keyword">def</span> <span class="token function">square</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> n <span class="token operator">*</span> n

<span class="token comment"># 定义类</span>
<span class="token keyword">class</span> <span class="token class-name">MyClass</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name

    <span class="token keyword">def</span> <span class="token function">greet</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;Hello, </span><span class="token interpolation"><span class="token punctuation">{</span>self<span class="token punctuation">.</span>name<span class="token punctuation">}</span></span><span class="token string">!&quot;</span></span><span class="token punctuation">)</span>

<span class="token comment"># 执行一些操作</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;This is my_module.py&quot;</span><span class="token punctuation">)</span>

<span class="token comment"># 当该模块被直接执行时，__name__ 的值为 &quot;__main__&quot;</span>
<span class="token comment"># 可以在这里编写一些测试代码</span>
<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&quot;__main__&quot;</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Running my_module.py as a standalone script&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>square<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    obj <span class="token operator">=</span> MyClass<span class="token punctuation">(</span><span class="token string">&quot;John&quot;</span><span class="token punctuation">)</span>
    obj<span class="token punctuation">.</span>greet<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,11),S={href:"http://main.py",target:"_blank",rel:"noopener noreferrer"},I=t(`<div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token comment"># 导入自定义模块</span>
<span class="token keyword">import</span> my_module

<span class="token comment"># 使用模块中的变量、函数和类</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>my_module<span class="token punctuation">.</span>PI<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>my_module<span class="token punctuation">.</span>square<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
obj <span class="token operator">=</span> my_module<span class="token punctuation">.</span>MyClass<span class="token punctuation">(</span><span class="token string">&quot;Alice&quot;</span><span class="token punctuation">)</span>
obj<span class="token punctuation">.</span>greet<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>需要注意的是：</p><ul><li>自定义模块的文件名即为模块名，可以与其他模块名相同，但建议使用具有描述性的模块名，避免与标准库模块或第三方模块冲突。</li><li>在自定义模块中，可以在 <code>if __name__ == &quot;__main__&quot;:</code> 条件下编写一些测试代码，这些代码只有在直接执行该模块时才会运行，而在被导入时不会执行。</li><li>在导入模块时，Python 解释器会在指定的路径中查找模块文件。可以使用 <code>sys.path</code> 查看模块搜索路径。如果自定义模块与当前脚本不在同一目录下，可以使用相对或绝对路径导入模块。</li><li>自定义模块的组织和命名应遵循一致的命名规范，以提高代码的可读性和可维护性。</li></ul><h2 id="常用功能代码示例" tabindex="-1"><a class="header-anchor" href="#常用功能代码示例"><span>常用功能代码示例</span></a></h2><h3 id="生成随机数" tabindex="-1"><a class="header-anchor" href="#生成随机数"><span>生成随机数</span></a></h3><p>在Python中，生成随机数有多种方法，可以根据需求选择合适的方法。下面是几种常见的方法及其详细说明和示例代码：</p><ol><li><p><strong>random模块：</strong><br> 使用Python内置的random模块可以生成随机数。它提供了许多用于生成随机数的函数，如<code>random()</code>、<code>randint()</code>、<code>uniform()</code>等。</p><p>示例代码：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">import</span> random

<span class="token comment"># 生成一个[0, 1)之间的随机浮点数</span>
random_number <span class="token operator">=</span> random<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>random_number<span class="token punctuation">)</span>

<span class="token comment"># 生成一个指定范围内的随机整数 [a, b]</span>
random_integer <span class="token operator">=</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>random_integer<span class="token punctuation">)</span>

<span class="token comment"># 生成一个指定范围内的随机浮点数 [a, b)</span>
random_float <span class="token operator">=</span> random<span class="token punctuation">.</span>uniform<span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">2.5</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>random_float<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>numpy库：</strong><br> 使用第三方库numpy可以生成更多类型的随机数，如正态分布、均匀分布、整数随机数等。</p><p>示例代码：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np

<span class="token comment"># 生成一个[0, 1)之间的随机浮点数</span>
random_number <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>random_number<span class="token punctuation">)</span>

<span class="token comment"># 生成一个指定范围内的随机整数[a, b)</span>
random_integer <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>random_integer<span class="token punctuation">)</span>

<span class="token comment"># 生成一个正态分布的随机数</span>
random_normal <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>normal<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>random_normal<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>secrets模块：</strong> （python3.6以后的版本引入）<br> 如果需要生成安全性更高的随机数，可以使用secrets模块。它提供了一些用于生成安全随机数的函数，如<code>secrets.randbelow()</code>、<code>secrets.choice()</code>等。</p><p>示例代码：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">import</span> secrets

<span class="token comment"># 生成一个[0, 10)之间的随机整数</span>
random_integer <span class="token operator">=</span> secrets<span class="token punctuation">.</span>randbelow<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>random_integer<span class="token punctuation">)</span>

<span class="token comment"># 从给定的序列中随机选择一个元素</span>
fruits <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;apple&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;banana&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;orange&#39;</span><span class="token punctuation">]</span>
random_fruit <span class="token operator">=</span> secrets<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>fruits<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>random_fruit<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><p>以上是几种常见的生成随机数的方法。根据具体需求选择适合的方法，并根据方法的参数设置生成随机数的范围和分布。</p><h3 id="程序暂停执行" tabindex="-1"><a class="header-anchor" href="#程序暂停执行"><span>程序暂停执行</span></a></h3><p>在Python中，有几种方式可以暂停程序的执行，包括：</p><ol><li><strong>time.sleep()：</strong> 使用<code>time</code>模块的<code>sleep()</code>函数可以使程序休眠指定的时间（以秒为单位）。</li></ol><p>示例代码：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">import</span> time

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;开始&quot;</span><span class="token punctuation">)</span>
time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>  <span class="token comment"># 程序暂停执行2秒</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;继续执行&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li><strong>signal.pause()：</strong> 使用<code>signal</code>模块的<code>pause()</code>函数可以使程序进入休眠状态，直到接收到一个信号。</li></ol><p>示例代码：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">import</span> signal

<span class="token keyword">def</span> <span class="token function">handler</span><span class="token punctuation">(</span>signum<span class="token punctuation">,</span> frame<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;接收到信号&#39;</span><span class="token punctuation">)</span>

signal<span class="token punctuation">.</span>signal<span class="token punctuation">(</span>signal<span class="token punctuation">.</span>SIGINT<span class="token punctuation">,</span> handler<span class="token punctuation">)</span>  <span class="token comment"># 设置信号处理函数</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;开始&quot;</span><span class="token punctuation">)</span>
signal<span class="token punctuation">.</span>pause<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 程序暂停执行，直到接收到一个信号</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;继续执行&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li><strong>threading.Event()：</strong> 使用<code>threading</code>模块的<code>Event()</code>类可以创建一个事件对象，可以使用<code>wait()</code>方法暂停程序的执行，直到事件被设置。</li></ol><p>示例代码：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">import</span> threading

event <span class="token operator">=</span> threading<span class="token punctuation">.</span>Event<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">worker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;等待事件触发&#39;</span><span class="token punctuation">)</span>
    event<span class="token punctuation">.</span>wait<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 等待事件被设置</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;事件触发，继续执行&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;开始&quot;</span><span class="token punctuation">)</span>
thread <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>worker<span class="token punctuation">)</span>
thread<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>

time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>  <span class="token comment"># 等待2秒钟</span>
event<span class="token punctuation">.</span><span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 设置事件</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li><strong>input()：</strong> 使用<code>input()</code>函数可以暂停程序的执行，并等待用户输入。</li></ol><p>示例代码：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;开始&quot;</span><span class="token punctuation">)</span>
<span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&quot;按下回车键继续执行&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;继续执行&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这些方式都可以用于暂停程序的执行，具体使用哪种方式取决于你的需求和场景。例如，如果需要暂停指定时间，可以使用<code>time.sleep()</code>；如果需要等待信号或事件触发，可以使用<code>signal.pause()</code>或<code>threading.Event()</code>；如果需要等待用户输入，可以使用<code>input()</code>。</p><p>根据需要选择适当的方式，并结合其他代码进行使用。</p><h3 id="关于with语句" tabindex="-1"><a class="header-anchor" href="#关于with语句"><span>关于with语句</span></a></h3><p><code>with</code>语句是Python中的一种语法结构，用于在对资源进行操作后，自动清理或释放资源。它提供了一种简洁、优雅且安全的方式来管理资源，以解决资源的正确释放问题。<code>with</code>语句在Python 2.5 版本中引入。</p><p><code>with</code>语句的一般语法形式如下：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">with</span> context_expression <span class="token punctuation">[</span><span class="token keyword">as</span> target<span class="token punctuation">]</span><span class="token punctuation">:</span>
    with_body
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>context_expression</code>是一个返回上下文管理器对象的表达式。上下文管理器对象必须实现<code>__enter__()</code>和<code>__exit__()</code>方法。<code>__enter__()</code>方法在进入<code>with</code>代码块之前被调用，而<code>__exit__()</code>方法在退出<code>with</code>代码块之后被调用。</p><p><code>target</code>是一个可选的目标变量，用于将<code>context_expression</code>的返回值绑定到该变量。</p><p><code>with_body</code>是在进入<code>with</code>代码块后要执行的语句块。</p><p>使用<code>with</code>语句可以确保在使用完资源后，无论是正常执行还是发生异常，都会自动执行资源的清理或释放操作。它减少了代码中显式调用资源清理的需求，并提高了代码的可读性和可维护性。</p><p>下面是几个使用<code>with</code>语句的常见场景和示例代码：</p><ol><li><p><strong>文件操作：</strong><br><code>with</code>语句可以自动关闭打开的文件，无需手动调用<code>file.close()</code>。</p><p>示例代码：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;file.txt&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;r&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">file</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> line <span class="token keyword">in</span> <span class="token builtin">file</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>数据库连接：</strong><br><code>with</code>语句可以自动关闭数据库连接，避免资源泄漏。</p><p>示例代码（使用<code>sqlite3</code>模块）：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">import</span> sqlite3

<span class="token keyword">with</span> sqlite3<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token string">&#39;database.db&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> conn<span class="token punctuation">:</span>
    cursor <span class="token operator">=</span> conn<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>
    cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">&#39;SELECT * FROM table&#39;</span><span class="token punctuation">)</span>
    rows <span class="token operator">=</span> cursor<span class="token punctuation">.</span>fetchall<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> row <span class="token keyword">in</span> rows<span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>row<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>线程锁（Thread Lock）：</strong><br><code>with</code>语句可以自动释放线程锁，确保线程安全。</p><p>示例代码（使用<code>threading</code>模块）：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">import</span> threading

lock <span class="token operator">=</span> threading<span class="token punctuation">.</span>Lock<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">with</span> lock<span class="token punctuation">:</span>
    <span class="token comment"># 执行需要线程锁保护的代码</span>
    <span class="token comment"># ...</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>网络连接：</strong><br><code>with</code>语句可以自动关闭网络连接，防止资源耗尽。</p><p>示例代码（使用<code>socket</code>模块）：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">import</span> socket

<span class="token keyword">with</span> socket<span class="token punctuation">.</span>create_connection<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">&#39;127.0.0.1&#39;</span><span class="token punctuation">,</span> <span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">as</span> conn<span class="token punctuation">:</span>
    conn<span class="token punctuation">.</span>sendall<span class="token punctuation">(</span><span class="token string">b&#39;Hello, Server&#39;</span><span class="token punctuation">)</span>
    data <span class="token operator">=</span> conn<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><p>通过使用<code>with</code>语句，可以确保在离开代码块时自动执行清理操作，无需手动释放资源。这提供了一种优雅而可靠的方式来管理资源，提高了代码的可靠性和可读性。</p><h3 id="常量和枚举类" tabindex="-1"><a class="header-anchor" href="#常量和枚举类"><span>常量和枚举类</span></a></h3><p>在Python中，常量和枚举可以用于提高代码的可读性和可维护性。虽然Python没有内置的常量和枚举类型，但可以使用一些约定和第三方库来实现它们。</p><p><strong>常量：</strong></p><p>在Python中，约定常量的命名为全大写字母，使用下划线分隔单词。虽然在语法上不能强制将变量标记为常量，但约定上认为以全大写命名的变量为常量，表示其值不应该被修改。</p><p>示例代码：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token comment"># 定义常量</span>
PI <span class="token operator">=</span> <span class="token number">3.14159</span>
GRAVITY <span class="token operator">=</span> <span class="token number">9.8</span>

<span class="token comment"># 使用常量</span>
radius <span class="token operator">=</span> <span class="token number">2.5</span>
area <span class="token operator">=</span> PI <span class="token operator">*</span> radius<span class="token operator">**</span><span class="token number">2</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>area<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>需要注意的是，约定上将全大写命名的变量视为常量，并且不应该在程序中对其进行修改。然而，Python并不会阻止对常量进行重新赋值，所以需要在编程中遵守约定。</p><p><strong>枚举：</strong></p><p>Python中的枚举可以通过<code>enum</code>模块实现，它提供了一个枚举类（<code>Enum</code>）来定义枚举类型。枚举类中的成员是预定义的常量，每个成员都有一个名称和一个关联的值。</p><p>示例代码：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">from</span> enum <span class="token keyword">import</span> Enum

<span class="token comment"># 定义枚举类</span>
<span class="token keyword">class</span> <span class="token class-name">Color</span><span class="token punctuation">(</span>Enum<span class="token punctuation">)</span><span class="token punctuation">:</span>
    RED <span class="token operator">=</span> <span class="token number">1</span>
    GREEN <span class="token operator">=</span> <span class="token number">2</span>
    BLUE <span class="token operator">=</span> <span class="token number">3</span>

<span class="token comment"># 使用枚举成员</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>RED<span class="token punctuation">)</span>  <span class="token comment"># 输出 Color.RED</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>RED<span class="token punctuation">.</span>value<span class="token punctuation">)</span>  <span class="token comment"># 输出 1</span>

<span class="token keyword">if</span> Color<span class="token punctuation">.</span>GREEN <span class="token operator">==</span> Color<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;颜色匹配&quot;</span><span class="token punctuation">)</span>

<span class="token comment"># 迭代枚举成员</span>
<span class="token keyword">for</span> color <span class="token keyword">in</span> Color<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>color<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>枚举类的成员可以通过名称或值进行访问。枚举成员的值可以是任何类型（整数、字符串等）。枚举成员之间的比较是基于它们的标识相等性。</p><p>注意事项：</p><ul><li>常量是通过约定来定义的，并没有严格的语法支持，所以需要在编程中遵守约定。</li><li>枚举类提供了一种更结构化和可读性更强的方式来表示一组预定义的常量。</li><li>在使用枚举时，应注意不要将其与常量混淆。枚举用于表示具有特定意义和关联值的一组预定义选项，而常量用于表示不可更改的变量。</li><li>Python 3.4及更早版本不支持<code>enum</code>模块，可以使用第三方库（如<code>enum34</code>）来实现枚举功能。</li><li>在选择是否使用常量或枚举时，需要根据代码的需求和可读性考虑。常量适用于表示单一的不可更改的值，而枚举适用于表示一组相关的预定义选项。</li></ul>`,49);function B(V,j){const a=o("ExternalLinkIcon");return i(),l("div",null,[d,u,r,n("ol",null,[n("li",null,[k,n("ul",null,[m,v,b,y,n("li",null,[s("遵循PEP 8风格指南："),n("a",h,[s("https://peps.python.org/pep-0008/"),e(a)])])])]),g]),w,n("div",_,[f,n("ul",null,[n("li",null,[s("Python 3 的官方文档中关于异常处理的章节："),n("a",x,[s("https://docs.python.org/3/tutorial/errors.html"),e(a)])])])]),P,n("div",q,[E,n("ul",null,[n("li",null,[s("Python3的官方文档中关于自定义异常的章节："),n("a",T,[s("https://docs.python.org/3/tutorial/errors.html#user-defined-exceptions"),e(a)])])])]),C,n("div",R,[D,n("ul",null,[n("li",null,[s("Python3的官方文档中关于模块的章节："),n("a",M,[s("https://docs.python.org/3/tutorial/modules.html"),e(a)])])])]),N,n("p",null,[n("strong",null,[n("a",S,[s("main.py"),e(a)])])]),I])}const Z=p(c,[["render",B],["__file","base.html.vue"]]),z=JSON.parse('{"path":"/python/BasicSyntax/base.html","title":"Python入门语法","lang":"en-US","frontmatter":{"order":2,"title":"Python入门语法","icon":"code","description":"Python快速入门 代码风格及注释 在Python编程中，良好的代码风格和注释是非常重要的，因为它们可以提高代码的可读性和可维护性。以下是一些常见的Python代码风格和注释的指南： 代码风格： 使用4个空格作为缩进。不要使用制表符。 在逻辑块之间留出适当的空行，以提高代码的可读性。 使用恰当的命名规范，例如使用小写字母和下划线来分隔单词（snake...","head":[["meta",{"property":"og:url","content":"https://x.app/notebook/python/BasicSyntax/base.html"}],["meta",{"property":"og:site_name","content":"Notebook"}],["meta",{"property":"og:title","content":"Python入门语法"}],["meta",{"property":"og:description","content":"Python快速入门 代码风格及注释 在Python编程中，良好的代码风格和注释是非常重要的，因为它们可以提高代码的可读性和可维护性。以下是一些常见的Python代码风格和注释的指南： 代码风格： 使用4个空格作为缩进。不要使用制表符。 在逻辑块之间留出适当的空行，以提高代码的可读性。 使用恰当的命名规范，例如使用小写字母和下划线来分隔单词（snake..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-04-03T10:40:35.000Z"}],["meta",{"property":"article:author","content":"Mr.Topple"}],["meta",{"property":"article:modified_time","content":"2024-04-03T10:40:35.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Python入门语法\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-04-03T10:40:35.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Topple\\",\\"url\\":\\"https://www.baidu.com\\"}]}"]]},"headers":[{"level":2,"title":"Python快速入门","slug":"python快速入门","link":"#python快速入门","children":[{"level":3,"title":"代码风格及注释","slug":"代码风格及注释","link":"#代码风格及注释","children":[]},{"level":3,"title":"变量和运算符","slug":"变量和运算符","link":"#变量和运算符","children":[]},{"level":3,"title":"基本输入和输出","slug":"基本输入和输出","link":"#基本输入和输出","children":[]}]},{"level":2,"title":"Python流程控制","slug":"python流程控制","link":"#python流程控制","children":[{"level":3,"title":"条件语句-if","slug":"条件语句-if","link":"#条件语句-if","children":[]},{"level":3,"title":"Python循环语句","slug":"python循环语句","link":"#python循环语句","children":[]}]},{"level":2,"title":"Python异常和模块","slug":"python异常和模块","link":"#python异常和模块","children":[{"level":3,"title":"异常处理","slug":"异常处理","link":"#异常处理","children":[]},{"level":3,"title":"自定义异常","slug":"自定义异常","link":"#自定义异常","children":[]},{"level":3,"title":"模块及其使用","slug":"模块及其使用","link":"#模块及其使用","children":[]},{"level":3,"title":"自定义模块","slug":"自定义模块","link":"#自定义模块","children":[]}]},{"level":2,"title":"常用功能代码示例","slug":"常用功能代码示例","link":"#常用功能代码示例","children":[{"level":3,"title":"生成随机数","slug":"生成随机数","link":"#生成随机数","children":[]},{"level":3,"title":"程序暂停执行","slug":"程序暂停执行","link":"#程序暂停执行","children":[]},{"level":3,"title":"关于with语句","slug":"关于with语句","link":"#关于with语句","children":[]},{"level":3,"title":"常量和枚举类","slug":"常量和枚举类","link":"#常量和枚举类","children":[]}]}],"git":{"createdTime":1712140835000,"updatedTime":1712140835000,"contributors":[{"name":"Neil","email":"msdrizzle@outlook.com","commits":1}]},"readingTime":{"minutes":22.07,"words":6622},"filePathRelative":"python/BasicSyntax/base.md","localizedDate":"April 3, 2024","autoDesc":true}');export{Z as comp,z as data};
