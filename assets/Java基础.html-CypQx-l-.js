import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as p,o as c,c as i,a as n,b as s,d as a,w as d,e}from"./app-CavufwmA.js";const r="/notebook/assets/image-20210923092957494-CEG21qMG.png",u="/notebook/assets/image-20210923102945380-xZK3Qw96.png",k="/notebook/assets/image-20210923105921460-CbsJvLOq.png",v="/notebook/assets/image-20211001100736886-w5Hw3Ng0.png",m="/notebook/assets/image-20211009001020786-B8cxJKLU.png",b={},g=e('<h1 id="java基础" tabindex="-1"><a class="header-anchor" href="#java基础"><span>JAVA基础</span></a></h1><h2 id="一-数制和码制" tabindex="-1"><a class="header-anchor" href="#一-数制和码制"><span>一 数制和码制</span></a></h2><h3 id="_1-基本单位" tabindex="-1"><a class="header-anchor" href="#_1-基本单位"><span>1. 基本单位</span></a></h3><table><thead><tr><th style="text-align:center;">单位/名词</th><th style="text-align:center;">简称</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:center;">位 (bit)</td><td style="text-align:center;">b (比特)</td><td style="text-align:left;">一个二进制位只可以表示0和1两种状态，两个位可以表示00, 01, 10, 11，4=2<sup>2</sup>种状态， 三个位可以表示8=2<sup>3</sup>种状态……以此类推</td></tr><tr><td style="text-align:center;">字节(Byte)</td><td style="text-align:center;">B</td><td style="text-align:left;">8个位就是一个字节, 一个字节单位的数据可以有2<sup>8</sup>=256种组合方式（状态）。一个字节的二进制数，最小为00000000，最大为11111111。1B（byte，字节）= 8 bit；1KB（Kibibyte，千字节）=1024B= 2<sup>10</sup> B；1MB（Mebibyte，兆字节，百万字节，简称“兆”）=1024KB= 2<sup>20</sup> B ……</td></tr><tr><td style="text-align:center;">字</td><td style="text-align:center;">/</td><td style="text-align:left;">字节是字的基本单位，所以说一个字可以包含一个字节的正整数倍。具体情况根据不同的机器而定，如果是一台16位机，那么，它的1个字就由2个字节构成。也就是说，字是用来一次性处理事务的一个固定长度的位（bit）组。</td></tr><tr><td style="text-align:center;">字长</td><td style="text-align:center;">/</td><td style="text-align:left;">顾名思义，字长就是字的长度，不过不是用字来表示，而是用位来表示。字长是用来表示字的位数的。例如一台8位机，它的1个字就等于1个字节，字长为8位。如果是一台16位机，它的1个字就由2个字节构成，字长为16位。字长被定义为CPU在单位时间内(同一时间)能一次处理的二进制数(字)的位数。</td></tr></tbody></table><h3 id="_2-数制" tabindex="-1"><a class="header-anchor" href="#_2-数制"><span>2. 数制</span></a></h3><p><strong>R进制�</strong> 逢R进一</p><img src="'+r+'" alt="image-20210923092957494" style="zoom:50%;"><h3 id="_3-进制转换" tabindex="-1"><a class="header-anchor" href="#_3-进制转换"><span>3. 进制转换</span></a></h3><ol><li><p>R进制转换为十进制（位权相加法）</p><table><thead><tr><th style="text-align:center;">R进制数值</th><th style="text-align:center;">转换过程</th><th style="text-align:center;">十进制数</th></tr></thead><tbody><tr><td style="text-align:center;">(10101.01)<sub>2</sub></td><td style="text-align:center;">(1x2<sup>4</sup>+1x2<sup>2</sup>+1x2<sup>0</sup>+1x2<sup>-2</sup>)<sub>10</sub></td><td style="text-align:center;">(21.25)<sub>10</sub></td></tr><tr><td style="text-align:center;">(37.6)<sub>8</sub></td><td style="text-align:center;">(3x8<sup>1</sup>+7x8<sup>0</sup>+6x8<sup>-1</sup>)<sub>10</sub></td><td style="text-align:center;">(31.75)<sub>10</sub></td></tr><tr><td style="text-align:center;">(3A.C)<sub>16</sub></td><td style="text-align:center;">(3x16<sup>1</sup>+10x16<sup>0</sup>+12x16<sup>-1</sup>)<sub>10</sub></td><td style="text-align:center;">(58.75)<sub>10</sub></td></tr></tbody></table></li><li><p>十进制转换为R进制（除基取余-倒序法、乘基取整-顺序法）</p></li></ol><img src="'+u+'" alt="image-20210923102945380" style="zoom:67%;"><ol start="3"><li>二进制、八进制、十六进制相互转换（位段转换法）</li></ol><table><thead><tr><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th><th>8</th><th>9</th><th>A</th><th>B</th><th>C</th><th>D</th><th>E</th><th>F</th></tr></thead><tbody><tr><td>001</td><td>010</td><td>011</td><td>100</td><td>101</td><td>110</td><td>111</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>0001</td><td>0010</td><td>0011</td><td>0100</td><td>0101</td><td>0110</td><td>0111</td><td>1000</td><td>1001</td><td>1010</td><td>1011</td><td>1100</td><td>1101</td><td>1110</td><td>1111</td></tr></tbody></table><figure><img src="'+k+'" alt="image-20210923105921460" tabindex="0" loading="lazy"><figcaption>image-20210923105921460</figcaption></figure><h3 id="_4-补码" tabindex="-1"><a class="header-anchor" href="#_4-补码"><span>4. 补码</span></a></h3><p>在学习原码, 反码和补码之前, 需要先了解<strong>机器数</strong>和<strong>真值</strong>的概念：</p><ul><li>机器数：一个数在计算机中的二进制表示形式, 叫做这个数的机器数。如：若字长为8位，3的机器数为：0000 0011</li><li>真 值：因为第一位是符号位，所以机器数的形式值不等于真正的数值，为区别起见，将带符号位的机器数对应的真正数值称为机器数的真值。例：0000 0001的真值 = +000 0001 = +1，1000 0001的真值 = –000 0001 = –1</li></ul><p><strong>原码, 反码, 补码的基础概念和计算方法</strong></p><ol><li><p>原码就是符号位加上真值的绝对值, 即用第一位表示符号, 其余位表示值，如:</p><p>[+1]<sub>原</sub> = 0000 0001 ，[-1]<sub>原</sub> = 1000 0001</p></li><li><p>正数的反码是其本身、负数的反码是在其原码的基础上, 符号位不变，其余各个位取反</p><p>[+1] = [00000001]<sub>原</sub> = [00000001]<sub>反</sub></p><p>[-1] = [10000001]<sub>原</sub> = [11111110]<sub>反</sub></p></li><li><p>正数的补码就是其本身、负数的补码是在其原码的基础上, 符号位不变, 其余各位取反, 最后+1 (即在反码的基础上+1)</p><p>[+1] = [00000001]<sub>原</sub> = [00000001]<sub>反</sub> = [00000001]<sub>补</sub></p><p>[-1] = [10000001]<sub>原</sub> = [11111110]<sub>反</sub> = [11111111]<sub>补</sub></p></li></ol>',18),h=n("li",null,[n("p",null,"正数的原码，补码，反码相同")],-1),y=n("p",null,[s("负数的原码和补码转换规则如下："),n("br"),s(" 原码转换为补码：符号位不变，数值位按位取反,末位再加1。"),n("br"),s(" 补码转换为原码：符号位不变，数值位按位取反,末位再加1，即补码的补码等于原码。")],-1),x=e(`<h2 id="二-变量和标识符" tabindex="-1"><a class="header-anchor" href="#二-变量和标识符"><span>二 变量和标识符</span></a></h2><h3 id="_1-变量" tabindex="-1"><a class="header-anchor" href="#_1-变量"><span>1. 变量</span></a></h3><p>​ The Java programming language uses both &quot;fields&quot; and &quot;variables&quot; as part of its terminology</p><p>​ 变量就是系统为程序分配的一块内存单元，用来存储各种类型的数据。由于该存储单元中的数据可以发生改变，因此得名为&quot;变量&quot;</p><ul><li>按所属的数据类型划分为：基本数据类型变量、引用数据类型变量</li><li>按被声明的位置划分： <ul><li>局部变量：方法或语句块内部定义的变量</li><li>成员变量：方法外部、类的内部定义的变量</li></ul></li></ul><h3 id="_2-标识符" tabindex="-1"><a class="header-anchor" href="#_2-标识符"><span>2. 标识符</span></a></h3><p>Java 对包、类、方法、参数和变量等要素命名时使用的字符序列称为标识符。</p><p>规则如下:</p><ul><li><p>由字母、数字、下划线（_）和美元符号（$）组成。</p></li><li><p>不能以数字开头、区分大小、长度无限制。</p></li><li><p>不能是 Java 中的保留关键字。</p></li></ul><p>命名规范： （建议）</p><ul><li><p>变量名规范：全部小写</p></li><li><p>类名规范：首字母大写，后面每个单词首字母大写（大驼峰式）</p></li><li><p>方法名规范： 首字母小写，后面每个单词首字母大写（小驼峰式）</p></li></ul><h3 id="_3-java关键字" tabindex="-1"><a class="header-anchor" href="#_3-java关键字"><span>3. Java关键字</span></a></h3><table><thead><tr><th></th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>abstract</td><td>assert</td><td>boolean</td><td>break</td><td>byte</td></tr><tr><td>case</td><td>catch</td><td>char</td><td>class</td><td>const</td></tr><tr><td>continue</td><td>default</td><td>do</td><td>double</td><td>else</td></tr><tr><td>enum</td><td>extends</td><td>final</td><td>finally</td><td>float</td></tr><tr><td>for</td><td>goto</td><td>if</td><td>implements</td><td>import</td></tr><tr><td>instanceof</td><td>int</td><td>interface</td><td>long</td><td>native</td></tr><tr><td>new</td><td>package</td><td>private</td><td>protected</td><td>public</td></tr><tr><td>return</td><td>strictfp</td><td>short</td><td>static</td><td>super</td></tr><tr><td>switch</td><td>synchronized</td><td>this</td><td>throw</td><td>throws</td></tr><tr><td>transient</td><td>try</td><td>void</td><td>volatile</td><td>while</td></tr></tbody></table><h2 id="三-基本输入输出" tabindex="-1"><a class="header-anchor" href="#三-基本输入输出"><span>三 基本输入输出</span></a></h2><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">//java键盘输入</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span></span><span class="token punctuation">;</span> 

<span class="token class-name">Scanner</span> sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> name <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                      <span class="token comment">// 输入字符串</span>
<span class="token keyword">int</span> age <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                       <span class="token comment">// 输入整数</span>
<span class="token keyword">double</span> score <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment">// 输入浮点数</span>


<span class="token comment">//输出到控制台</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">1111</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//换行打印</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token number">1111</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment">//不换行打印</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token number">2222</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment">//字节输出</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%+8.3f\\n&quot;</span><span class="token punctuation">,</span> <span class="token number">3.14</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//按格式输出</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-输入类型判断" tabindex="-1"><a class="header-anchor" href="#_1-输入类型判断"><span>1. 输入类型判断</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">//使用 hasNextInt() 判断输入类型</span>
<span class="token keyword">long</span> <span class="token class-name">Long</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> string<span class="token punctuation">;</span>
<span class="token keyword">double</span> <span class="token class-name">Double</span><span class="token punctuation">;</span>
<span class="token class-name">Scanner</span> sc <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;输入一个数&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>sc<span class="token punctuation">.</span><span class="token function">hasNextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">Long</span> <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextLong</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;您输入的是一个整数:&quot;</span><span class="token operator">+</span><span class="token class-name">Long</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>sc<span class="token punctuation">.</span><span class="token function">hasNextDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">Double</span> <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;您输入的是一个小数:&quot;</span><span class="token operator">+</span><span class="token class-name">Double</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>sc<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    string <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;您输入的是一个字符串:&quot;</span><span class="token operator">+</span>string<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-转义字符" tabindex="-1"><a class="header-anchor" href="#_2-转义字符"><span>2. 转义字符</span></a></h3><table><thead><tr><th style="text-align:center;">转义字符</th><th style="text-align:center;">作用</th><th style="text-align:center;">ASCII码</th></tr></thead><tbody><tr><td style="text-align:center;">\\n</td><td style="text-align:center;">换行，将当前位置移到下一行开头</td><td style="text-align:center;">010</td></tr><tr><td style="text-align:center;">\\r</td><td style="text-align:center;">回车 ，将当前位置移到本行开头</td><td style="text-align:center;">013</td></tr><tr><td style="text-align:center;">\\t</td><td style="text-align:center;">水平制表(HT) （跳到下一个TAB位置）</td><td style="text-align:center;">009</td></tr><tr><td style="text-align:center;"><code>\\\\</code></td><td style="text-align:center;">代表一个反斜线字符</td><td style="text-align:center;">092</td></tr><tr><td style="text-align:center;"><code>\\&#39;</code></td><td style="text-align:center;">代表一个单引号（撇号）字符</td><td style="text-align:center;">039</td></tr><tr><td style="text-align:center;"><code>\\&#39;&#39;</code></td><td style="text-align:center;">代表一个双引号字符</td><td style="text-align:center;">034</td></tr></tbody></table><h2 id="四-基本数据类型" tabindex="-1"><a class="header-anchor" href="#四-基本数据类型"><span>四 基本数据类型</span></a></h2><figure><img src="`+v+'" alt="image-20211001100736886" tabindex="0" loading="lazy"><figcaption>image-20211001100736886</figcaption></figure>',21),f=n("li",null,[n("p",null,"char类型的字面量值需要用单引号括起来：如：'A' , '3' …..")],-1),w={href:"http://docs.oracle.com/javase/tutorial/java/nutsandbolts/datatypes.html",target:"_blank",rel:"noopener noreferrer"},_=n("p",null,`boolean: The boolean data type has only two possible values: true and false. Use this data type for simple flags that track true/false conditions. This data type represents one bit of information, but its "size" isn't something that's precisely defined.`,-1),j=n("p",null,"结论是取决于具体的java虚拟机，《Java虚拟机规范》一书中给出了 4个字节（boolean数组1个字节）的定义",-1),q=n("li",null,[n("p",null,"默认值指的是动态初始化数组时的情形，其余情况下，栈上的局部变量是没有默认值的，声明局部变量后必须显式的初始化，否则无法使用")],-1),T=e(`<h3 id="_1-前缀和后缀" tabindex="-1"><a class="header-anchor" href="#_1-前缀和后缀"><span>1. 前缀和后缀</span></a></h3><ul><li><p><strong>各数制的前缀：</strong></p><table><thead><tr><th style="text-align:center;">二进制</th><th style="text-align:center;">八进制</th><th style="text-align:center;">十六进制</th></tr></thead><tbody><tr><td style="text-align:center;">0b(0B)</td><td style="text-align:center;">0</td><td style="text-align:center;">0x(0X)</td></tr></tbody></table><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">0b01001001</span><span class="token punctuation">;</span>  <span class="token comment">// 二进制数：0100 1001   (十进制的 73)</span>
<span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">02316</span><span class="token punctuation">;</span>       <span class="token comment">// 八进制数：2316        (十进制的 1230)</span>
<span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token number">0x54b3</span><span class="token punctuation">;</span>      <span class="token comment">// 十六进制：54b3        (十进制的 21683)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>数字的后缀：</strong></p><ul><li>长整型有一个后缀 L(推荐大写字母)</li><li>float类型的数值有一个后缀 F(f)</li><li>没有后缀F的浮点数值（如3.14）默认为double类型。 当然，也可以在浮点数值后面添加后缀D或d（例如，3.14D）</li></ul></li></ul><h3 id="_2-数据类型转换" tabindex="-1"><a class="header-anchor" href="#_2-数据类型转换"><span>2. 数据类型转换</span></a></h3><ol><li>数值类型之间的隐式转换：</li></ol><ul><li><p>如果两个操作数中有一个是double类型，另一个操作数就会转换为double类型</p></li><li><p>否则，如果其中一个操作数是float类型，另一个操作数将会转换为float类型</p></li><li><p>否则，如果其中一个操作数是long类型，另一个操作数将会转换为long类型</p></li><li><p>否则，两个操作数都将被转换为int类型</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">byte</span> a1 <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span>
<span class="token keyword">byte</span> a2 <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span>
<span class="token keyword">byte</span> r1 <span class="token operator">=</span> a1 <span class="token operator">+</span> a2<span class="token punctuation">;</span> <span class="token comment">// 报错！ a1 和 a2 进行运算会导致类型提升，结果为int</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 需要注意的是两个字面值常量或final常量相加并不会出现上述情况 （编译器优化）</span>
<span class="token keyword">byte</span> b <span class="token operator">=</span> <span class="token number">12</span> <span class="token operator">+</span> <span class="token number">12</span><span class="token punctuation">;</span>  <span class="token comment">// √</span>

<span class="token keyword">final</span> <span class="token keyword">byte</span> b1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">final</span> <span class="token keyword">byte</span> b2 <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token keyword">byte</span> result <span class="token operator">=</span> b1 <span class="token operator">+</span> b2<span class="token punctuation">;</span>  <span class="token comment">// √</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><ol start="2"><li><p>强制类型转换：（有可能造成精度降低或数据溢出，使用时要小心）</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">double</span> num <span class="token operator">=</span> <span class="token number">6.36</span><span class="token punctuation">;</span>

<span class="token comment">//强制转换: 在圆括号中给出想要转换的目标类型，后面紧跟待转换的变量名</span>
<span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>num<span class="token punctuation">;</span>      <span class="token comment">//i=6 （数据丢失了小数部分）</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h2 id="五-常用运算符" tabindex="-1"><a class="header-anchor" href="#五-常用运算符"><span>五 常用运算符</span></a></h2><h3 id="_1-算术运算符" tabindex="-1"><a class="header-anchor" href="#_1-算术运算符"><span>1. 算术运算符</span></a></h3><table><thead><tr><th style="text-align:center;">运算符</th><th style="text-align:center;">运算</th><th>示例（<code>a=1, b=2</code>）</th></tr></thead><tbody><tr><td style="text-align:center;">+</td><td style="text-align:center;">加</td><td><code>a + b --&gt; 3</code></td></tr><tr><td style="text-align:center;">-</td><td style="text-align:center;">减</td><td><code>a - b --&gt; -1</code></td></tr><tr><td style="text-align:center;">*</td><td style="text-align:center;">乘</td><td><code>a * b --&gt; 2</code></td></tr><tr><td style="text-align:center;">/</td><td style="text-align:center;">整除</td><td><code>a / b --&gt; 0</code></td></tr><tr><td style="text-align:center;">%</td><td style="text-align:center;">取模/求余</td><td><code>a % b --&gt; 1</code> （ 运算结果的符号与第一个操作数相同 ）</td></tr><tr><td style="text-align:center;">++</td><td style="text-align:center;">自增</td><td><code>a++ 或 ++a --&gt; a=2</code></td></tr><tr><td style="text-align:center;">--</td><td style="text-align:center;">自减</td><td><code>b-- 或 --b --&gt; b=1</code></td></tr></tbody></table><h3 id="_2-赋值运算符" tabindex="-1"><a class="header-anchor" href="#_2-赋值运算符"><span>2. 赋值运算符</span></a></h3><table><thead><tr><th style="text-align:center;">运算符</th><th style="text-align:center;">描述</th><th>示例（<code>a=1, b=2</code>）</th></tr></thead><tbody><tr><td style="text-align:center;">=</td><td style="text-align:center;">赋值</td><td><code>a = b , a = 2 </code></td></tr><tr><td style="text-align:center;">+=</td><td style="text-align:center;">加等于</td><td><code>a += b &lt;--&gt; a = a + b</code></td></tr><tr><td style="text-align:center;">-=</td><td style="text-align:center;">减等于</td><td><code>a -= b &lt;--&gt; a = a - b</code></td></tr><tr><td style="text-align:center;">*=</td><td style="text-align:center;">乘等于</td><td><code>a *= b &lt;--&gt; a = a * b</code></td></tr><tr><td style="text-align:center;">/=</td><td style="text-align:center;">除等于</td><td><code>a /= b &lt;--&gt; a = a / b</code></td></tr><tr><td style="text-align:center;">%=</td><td style="text-align:center;">模等于</td><td><code>a %= b &lt;--&gt; a = a % b</code></td></tr></tbody></table><h3 id="_3-关系运算符" tabindex="-1"><a class="header-anchor" href="#_3-关系运算符"><span>3. 关系运算符</span></a></h3><table><thead><tr><th style="text-align:center;">运算符</th><th style="text-align:center;">运算</th><th>示例（<code>a=1, b=2</code>）</th></tr></thead><tbody><tr><td style="text-align:center;">&gt;</td><td style="text-align:center;">大于</td><td><code>a &gt; b --&gt; false</code></td></tr><tr><td style="text-align:center;">&lt;</td><td style="text-align:center;">小于</td><td><code>a &lt; b --&gt; true</code></td></tr><tr><td style="text-align:center;">&gt;=</td><td style="text-align:center;">大于等于</td><td><code>a &gt;= b --&gt; false</code></td></tr><tr><td style="text-align:center;">&lt;=</td><td style="text-align:center;">小于等于</td><td><code>a &lt;= b --&gt; true</code></td></tr><tr><td style="text-align:center;">==</td><td style="text-align:center;">等于</td><td><code>a == b --&gt; false</code> （基本数据类型比较值是否相等，引用类型则比较对象的地址是否相等）</td></tr><tr><td style="text-align:center;">!=</td><td style="text-align:center;">不等于</td><td><code>a != b --&gt; true</code></td></tr></tbody></table><h3 id="_4-布尔逻辑运算符" tabindex="-1"><a class="header-anchor" href="#_4-布尔逻辑运算符"><span>4. 布尔逻辑运算符</span></a></h3><table><thead><tr><th style="text-align:center;">运算符</th><th style="text-align:center;">运算</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;">&amp;</td><td style="text-align:center;">与</td><td>a<code>&amp;</code>b，a和b都是true，结果为true，否则为false</td></tr><tr><td style="text-align:center;">|</td><td style="text-align:center;">或</td><td>a | b，a和b都是false，结果为false，否则为true</td></tr><tr><td style="text-align:center;">^</td><td style="text-align:center;">异或</td><td>a<code>^</code>b，a和b结果不同为true，相同为false</td></tr><tr><td style="text-align:center;">!</td><td style="text-align:center;">非</td><td><code>!</code>a，结果和a的结果正好相反</td></tr><tr><td style="text-align:center;">&amp;&amp;</td><td style="text-align:center;">短路与</td><td>作用和<code>&amp;</code>相同，但是有短路效果(短路：即只要其中一个可以确定表达式，其余不执行)</td></tr><tr><td style="text-align:center;">||</td><td style="text-align:center;">短路或</td><td>作用和 | 相同，但是有短路效果(短路：即只要其中一个可以确定表达式，其余不执行)</td></tr></tbody></table><h3 id="_5-位运算符" tabindex="-1"><a class="header-anchor" href="#_5-位运算符"><span>5. 位运算符</span></a></h3><table><thead><tr><th style="text-align:center;">运算符</th><th style="text-align:center;">运算</th><th>示例说明</th></tr></thead><tbody><tr><td style="text-align:center;">&lt;&lt;</td><td style="text-align:center;">左移</td><td><code>a &lt;&lt; 1</code> ：将a向左移动1位（在低位补0） 相当于 a*2<sup>1</sup></td></tr><tr><td style="text-align:center;">&gt;&gt;</td><td style="text-align:center;">右移</td><td><code>a &gt;&gt; 2</code> ：将a向右移动2位（值为正，高位补0，值为负，高位补1） 相当于 a/2<sup>2</sup></td></tr><tr><td style="text-align:center;">&gt;&gt;&gt;</td><td style="text-align:center;">&quot;无符号&quot;右移</td><td><code>a &gt;&gt;&gt; 3</code> ：将a向右移动3位（无论正负，都在高位补0） 相当于 a*2<sup>3</sup></td></tr><tr><td style="text-align:center;">&amp;</td><td style="text-align:center;">与</td><td>只有 1 &amp; 1 = 1， 1 &amp; 0 = 0 ， 0 &amp; 0 = 0</td></tr><tr><td style="text-align:center;">|</td><td style="text-align:center;">或</td><td>只有 0 | 0 = 0， 1 | 0 = 1 ， 1 | 1 = 1</td></tr><tr><td style="text-align:center;"><code>^</code></td><td style="text-align:center;">异或</td><td>只有 0 <code>^</code> 1 = 1， 1 <code>^</code> 1 = 0 ， 0 <code>^</code> 0 = 0</td></tr><tr><td style="text-align:center;"><code>~</code></td><td style="text-align:center;">按位取反</td><td>只是简单的把二进制补码取反（不论符号位是正是负）</td></tr></tbody></table><p><strong>异或运算的四个性质</strong>：</p><p><strong>1）交换律</strong>：可任意交换运算因子的位置，结果不变。 即a ^ b = b ^ a</p><p><strong>2）结合律</strong>：（a ^ b）^ c = a ^ (b ^ c)</p><p><strong>3）<strong>对于任何数x，都有x ^ x = 0， x ^ 0 = x， 即</strong>同自己求异或为0，同0求异或为自己。</strong></p><p><strong>4）自反性</strong> ：连续和同一个因子做异或运算，最终结果为自己：A ^ B ^ B = A ^ 0 = A</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 交换两个整数的值</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;交换前：a = &quot;</span> <span class="token operator">+</span> a <span class="token operator">+</span> <span class="token string">&quot; , b = &quot;</span> <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> 

        <span class="token comment">//方法一：借助第三个变量交换</span>
<span class="token comment">//        int temp = a;</span>
<span class="token comment">//        a = b;</span>
<span class="token comment">//        b = temp;</span>

        <span class="token comment">//方法二 (数据较大时可能会出现精度损失)</span>
<span class="token comment">//        a = a + b;</span>
<span class="token comment">//        b = a - b;</span>
<span class="token comment">//        a = a - b;</span>

        <span class="token comment">/*方法三：使用位运算符
         *（异或 ^ ） : 1 ^ 0 = 1, 1 ^ 1 = 0, 0 ^ 0 = 0  ==&gt; 
         *  1. 两个相同的数异或结果为0
         *  2. 任意整数与0异或，结果还是其本身
         *  3. 一个数连续和同一个数做异或运算，最终结果为自己
         */</span>
        a <span class="token operator">=</span> a <span class="token operator">^</span> b<span class="token punctuation">;</span>  
        b <span class="token operator">=</span> a <span class="token operator">^</span> b<span class="token punctuation">;</span>   <span class="token comment">// 3^5^5</span>
        a <span class="token operator">=</span> a <span class="token operator">^</span> b<span class="token punctuation">;</span>   <span class="token comment">// 3^5^3</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;交换后：a = &quot;</span> <span class="token operator">+</span> a <span class="token operator">+</span> <span class="token string">&quot; , b = &quot;</span> <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-三目运算符" tabindex="-1"><a class="header-anchor" href="#_6-三目运算符"><span>6. 三目运算符</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token doc-comment comment">/** X ? Y : Z  (X 为 boolean 类型表达式)
*  先计算 x 的值，若为 true，整个三目运算的结果为 表达式 y 的值，否则整个运算结果为 表达式 z 的值
*/</span>

<span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span> a <span class="token operator">:</span> <span class="token operator">-</span>a   <span class="token comment">//求绝对值</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-字符串连接运算符" tabindex="-1"><a class="header-anchor" href="#_7-字符串连接运算符"><span>7. 字符串连接运算符</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">String</span> str1 <span class="token operator">=</span> <span class="token string">&quot;He&quot;</span> <span class="token operator">+</span> <span class="token string">&quot;llo&quot;</span><span class="token punctuation">;</span>  <span class="token comment">//结果&quot;Hello&quot;</span>
<span class="token class-name">String</span> str2 <span class="token operator">=</span> <span class="token string">&quot;X&quot;</span> <span class="token operator">+</span> <span class="token number">123</span>；    <span class="token comment">//结果&quot;X123&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_8-运算符优先级" tabindex="-1"><a class="header-anchor" href="#_8-运算符优先级"><span>8. 运算符优先级</span></a></h3>`,28),S={href:"https://docs.oracle.com/javase/tutorial/java/nutsandbolts/operators.html",target:"_blank",rel:"noopener noreferrer"},A=e(`<table><thead><tr><th style="text-align:center;">Operators</th><th style="text-align:left;">Precedence</th></tr></thead><tbody><tr><td style="text-align:center;">postfix</td><td style="text-align:left;">expr++ expr--</td></tr><tr><td style="text-align:center;">unary</td><td style="text-align:left;">++expr --expr +expr -expr ~ !</td></tr><tr><td style="text-align:center;">multiplicative</td><td style="text-align:left;">* / %</td></tr><tr><td style="text-align:center;">additive</td><td style="text-align:left;">+ -</td></tr><tr><td style="text-align:center;">shift</td><td style="text-align:left;">&lt;&lt; &gt;&gt; &gt;&gt;&gt;</td></tr><tr><td style="text-align:center;">relational</td><td style="text-align:left;">&lt; &gt; &lt;= &gt;= instanceof</td></tr><tr><td style="text-align:center;">equality</td><td style="text-align:left;">== !=</td></tr><tr><td style="text-align:center;">bitwise AND</td><td style="text-align:left;">&amp;</td></tr><tr><td style="text-align:center;">bitwise exclusive OR</td><td style="text-align:left;">^</td></tr><tr><td style="text-align:center;">bitwise inclusive OR</td><td style="text-align:left;">|</td></tr><tr><td style="text-align:center;">logical AND</td><td style="text-align:left;">&amp;&amp;</td></tr><tr><td style="text-align:center;">logical OR</td><td style="text-align:left;">||</td></tr><tr><td style="text-align:center;">ternary</td><td style="text-align:left;">? :</td></tr><tr><td style="text-align:center;">assignment</td><td style="text-align:left;">= += -= *= /= %= &amp;= ^= |= &lt;&lt;= &gt;&gt;= &gt;&gt;&gt;=</td></tr></tbody></table><h2 id="六-流程控制" tabindex="-1"><a class="header-anchor" href="#六-流程控制"><span>六 流程控制</span></a></h2><p>1996 年，计算机科学家 Bohm 和 Jacopini 证明了：任何简单或复杂的算法都可以由<strong>顺序结构、分支结构和循环结构</strong>这三种基本 结构组合而成。它们的共同点是都包含一个入口和一个出口，它们的每个代码都有机会被执行，不会出现死循环。</p><ul><li>顺序结构： 顺序结构是一种基本的控制结构，它按照语句出现的顺序执行操作</li><li>分支结构 ：分支结构又被称为选择结构，根据条件成立与否来执行操作</li><li>循环结构： 循环结构是一种重复结构，如果条件成立，它会重复执行某一循环体，直到出现不满足的条件为止</li></ul><h3 id="_1-if-条件语句" tabindex="-1"><a class="header-anchor" href="#_1-if-条件语句"><span>1. if 条件语句</span></a></h3><p>The <code>if-then</code> statement is the most basic of all the control flow statements.</p><p>It tells your program to execute a certain section of code <em>only if</em> a particular test evaluates to <code>true</code>.</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">int</span> testscore <span class="token operator">=</span> <span class="token number">76</span><span class="token punctuation">;</span>
<span class="token keyword">char</span> grade<span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span>testscore <span class="token operator">&gt;=</span> <span class="token number">90</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    grade <span class="token operator">=</span> <span class="token char">&#39;A&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>testscore <span class="token operator">&gt;=</span> <span class="token number">80</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    grade <span class="token operator">=</span> <span class="token char">&#39;B&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>testscore <span class="token operator">&gt;=</span> <span class="token number">70</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    grade <span class="token operator">=</span> <span class="token char">&#39;C&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>testscore <span class="token operator">&gt;=</span> <span class="token number">60</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    grade <span class="token operator">=</span> <span class="token char">&#39;D&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    grade <span class="token operator">=</span> <span class="token char">&#39;F&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-switch-语句" tabindex="-1"><a class="header-anchor" href="#_2-switch-语句"><span>2. switch 语句</span></a></h3><p>the <code>switch</code> statement can have a number of possible execution paths.</p><p>A <code>switch</code> works with the <code>byte</code>, <code>short</code>, <code>char</code>, and <code>int</code> primitive data types.</p>`,11),J=n("em",null,"enumerated types",-1),B={href:"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html",target:"_blank",rel:"noopener noreferrer"},E=n("code",null,"String",-1),O={href:"https://docs.oracle.com/javase/8/docs/api/java/lang/Byte.html",target:"_blank",rel:"noopener noreferrer"},R=n("code",null,"Byte",-1),D={href:"https://docs.oracle.com/javase/8/docs/api/java/lang/Short.html",target:"_blank",rel:"noopener noreferrer"},F=n("code",null,"Short",-1),N={href:"https://docs.oracle.com/javase/8/docs/api/java/lang/Character.html",target:"_blank",rel:"noopener noreferrer"},V=n("code",null,"Character",-1),z={href:"https://docs.oracle.com/javase/8/docs/api/java/lang/Integer.html",target:"_blank",rel:"noopener noreferrer"},C=n("code",null,"Integer",-1),I=e(`<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">int</span> month <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> season<span class="token punctuation">;</span>
<span class="token keyword">switch</span> <span class="token punctuation">(</span>month<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token number">12</span><span class="token operator">:</span> <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span> <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>  
        season <span class="token operator">=</span> <span class="token string">&quot;Winter&quot;</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span> <span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span> <span class="token keyword">case</span> <span class="token number">5</span><span class="token operator">:</span>  
        season <span class="token operator">=</span> <span class="token string">&quot;Spring&quot;</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token number">6</span><span class="token operator">:</span> <span class="token keyword">case</span> <span class="token number">7</span><span class="token operator">:</span> <span class="token keyword">case</span> <span class="token number">8</span><span class="token operator">:</span>  
        season <span class="token operator">=</span> <span class="token string">&quot;Summer&quot;</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token number">9</span><span class="token operator">:</span> <span class="token keyword">case</span> <span class="token number">10</span><span class="token operator">:</span> <span class="token keyword">case</span> <span class="token number">11</span><span class="token operator">:</span>  
        season <span class="token operator">=</span> <span class="token string">&quot;Autumn&quot;</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">default</span><span class="token operator">:</span> 
        season <span class="token operator">=</span> <span class="token string">&quot;Invalid month&quot;</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>month <span class="token operator">+</span> <span class="token string">&quot;月：&quot;</span> <span class="token operator">+</span> season<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-while-循环" tabindex="-1"><a class="header-anchor" href="#_3-while-循环"><span>3. while 循环</span></a></h3><p>The <code>while</code> statement continually executes a block of statements while a particular condition is <code>true</code>.</p><p>Its syntax can be expressed as:</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">while</span> <span class="token punctuation">(</span>expression<span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token function">statement</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-do-while-循环" tabindex="-1"><a class="header-anchor" href="#_4-do-while-循环"><span>4. do-while 循环</span></a></h3><p><code>do-while</code> evaluates its expression at the bottom of the loop instead of the top.</p><p>Therefore, the statements within the <code>do</code> block are always executed at least once</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">do</span> <span class="token punctuation">{</span>
     <span class="token function">statement</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>
<span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>expression<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-for-循环" tabindex="-1"><a class="header-anchor" href="#_5-for-循环"><span>5. for 循环</span></a></h3><p>The <code>for</code> statement provides a compact way to <code>iterate over</code>(遍历) a range of values. Programmers often refer to it as the &quot;for loop&quot; because of the way in which it repeatedly loops until a particular condition is satisfied</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">for</span> <span class="token punctuation">(</span>initialization<span class="token punctuation">;</span> termination<span class="token punctuation">;</span> increment<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">statement</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>The <em>initialization</em> expression initializes the loop; it&#39;s executed once, as the loop begins.</li><li>When the <em>termination</em> expression evaluates to <code>false</code>, the loop terminates.</li><li>The <em>increment</em> expression is invoked after each iteration through the loop; it is perfectly acceptable for this expression to increment <em>or</em> decrement a value.</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">11</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Count is: &quot;</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-break和continue" tabindex="-1"><a class="header-anchor" href="#_6-break和continue"><span>6. break和continue</span></a></h3><ul><li>break的作用是跳出当前循环块（for、while、do while）或程序块（switch）</li><li>continue用于结束循环体中其后语句的执行，并跳回循环程序块的开头执行下一次循环</li><li>break和continue可以配合语句标签使用</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>label<span class="token operator">:</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">==</span> <span class="token number">9</span><span class="token punctuation">)</span> <span class="token keyword">break</span> label<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="七-方法-函数" tabindex="-1"><a class="header-anchor" href="#七-方法-函数"><span>七 方法（函数）</span></a></h2><p>方法用于封装一段特定的逻辑功能。方法的主要要素有：权限修饰符 方法名、参数列表和返回值</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">//格式：</span>
权限修饰符 返回值类型声明 方法名称<span class="token punctuation">(</span>参数列表<span class="token punctuation">)</span><span class="token punctuation">{</span>
    方法中封装的逻辑功能<span class="token punctuation">;</span>
    <span class="token keyword">return</span> 返回值<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>权限修饰符</li></ol><table><thead><tr><th style="text-align:center;">修饰符</th><th style="text-align:center;">同类</th><th style="text-align:center;">同包</th><th style="text-align:center;">子类（不同包）</th><th style="text-align:center;">非子类（不同包）</th></tr></thead><tbody><tr><td style="text-align:center;">private</td><td style="text-align:center;">√</td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;">default</td><td style="text-align:center;">√</td><td style="text-align:center;">√</td><td style="text-align:center;"></td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;">protected</td><td style="text-align:center;">√</td><td style="text-align:center;">√</td><td style="text-align:center;">√</td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;">public</td><td style="text-align:center;">√</td><td style="text-align:center;">√</td><td style="text-align:center;">√</td><td style="text-align:center;">√</td></tr></tbody></table><ol start="2"><li><p>返回值：方法调用结束后可以返回一个数据，称之为返回值</p><ul><li>方法在声明时必须指定返回值的类型</li><li>通过 return 语句返回，return 语句的作用在于结束方法且将数据返回</li><li>如果方法没有返回值（即方法不需要返回数据），需将返回值类型声明为 void</li></ul></li><li><p>参数列表</p><ul><li><p>在调用时传递给方法，需要被方法处理的数据</p></li><li><p>在方法定义时，需要声明该方法所需要的参数变量</p></li><li><p>在方法调用时，会将实际参数值传递给方法的参数变量</p></li><li><p>必须保证传递参数的类型和个数符合方法的声明</p></li></ul></li><li><p>形式参数和实际参数</p><ul><li>形式参数：是在定义函数名和函数体的时候使用的参数,目的是用来接收调用该函数时传入的参数</li><li>实际参数：在调用有参函数时，主调函数和被调函数之间有数据传递关系。在主调函数中调用一个函数时，函数名后面括号中的参数称为“实际参数”。</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;Tom&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//实参</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">// 此处name为形参</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="_1-可变参数" tabindex="-1"><a class="header-anchor" href="#_1-可变参数"><span>1. 可变参数</span></a></h3><p>Java1.5提供了一个叫varargs的新功能，就是可变长度的参数。&quot;Varargs&quot;是&quot;variable number of arguments&quot;的意思。有时候也被简单的称为&quot;variable arguments&quot;。</p><p>定义实参个数可变的方法：只要在一个形参的&quot;类型&quot;与&quot;参数名&quot;之间加上三个连续的&quot;.&quot;（即&quot;...&quot;，英文里的句中省略号），就可以让它和不确定个实参相匹配。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>
    <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">sumVarargs</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> arr<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            sum <span class="token operator">+=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span> args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token function">sumVarargs</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;和为: &quot;</span> <span class="token operator">+</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 82</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>每个方法只能有一个这样可变形参，且这个形参必须是形参列表的最后一个。</p></li><li><p>上面所说的不确定也包括0，所以不给可变参数传递实参也是可以的，注意这时传递的是一个空数组（int[]{}）而不是null。</p></li></ul><h3 id="_2-参数传递" tabindex="-1"><a class="header-anchor" href="#_2-参数传递"><span>2. 参数传递</span></a></h3><p>**为什么说Java中只有值传递？**首先要明确<code>值传递</code>和<code>引用传递</code>的概念，一些常见的错误理解：</p><ul><li>错误理解一：值传递和引用传递，区分的条件是传递的内容，如果是个值，就是值传递。如果是个引用，就是引用传递。</li><li>错误理解二：Java是引用传递。</li><li>错误理解三：传递的参数如果是普通类型，那就是值传递，如果是对象，那就是引用传递。</li></ul><p><strong>值传递（pass by value）</strong>：</p><p>是指在调用函数时将实际参数复制一份传递到函数中，这样在函数中如果对参数进行修改，将不会影响到实际参数。</p><p><strong>引用传递（pass by reference）</strong>：</p><p>是指在调用函数时将实际参数的地址直接传递到函数中，那么在函数中对参数所进行的修改，将影响到实际参数。</p><p>=&gt; 判断值传递和引用传递的依据就是函数中的修改是否影响到了<strong>实际参数</strong>；</p><p>下面先看看java中基本数据类型的传递：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">tripleValue</span><span class="token punctuation">(</span><span class="token keyword">double</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>
    x <span class="token operator">=</span> x<span class="token operator">*</span><span class="token number">3</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> 
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span> 
    <span class="token keyword">double</span> percent <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> 
    <span class="token function">tripleValue</span><span class="token punctuation">(</span>percent<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">// 调用函数后x为percent的拷贝</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>percent<span class="token punctuation">)</span> <span class="token punctuation">;</span>   <span class="token comment">// 结果x=30, 不出所料，原来的percent未改变</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>基本数据类型的值传递没有什么争议，关键在于对象的传递：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token class-name">Employee</span> a<span class="token punctuation">,</span> <span class="token class-name">Employee</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>
     <span class="token class-name">Employee</span> temp <span class="token operator">=</span> a<span class="token punctuation">;</span>
     a <span class="token operator">=</span> b<span class="token punctuation">;</span>
     b <span class="token operator">=</span> temp<span class="token punctuation">;</span>
 <span class="token punctuation">}</span>
 <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>
     <span class="token class-name">Employee</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token string">&quot;harry&quot;</span><span class="token punctuation">,</span> <span class="token number">5000</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token class-name">Employee</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token string">&quot;tony&quot;</span><span class="token punctuation">,</span> <span class="token number">5600</span><span class="token punctuation">,</span> <span class="token number">36</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 创建两个Employee对象</span>

    <span class="token function">swap</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 见下图：</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+m+`" alt="image-20211009001020786" tabindex="0" loading="lazy"><figcaption>image-20211009001020786</figcaption></figure><p>上述的例子中，关键点在于参数传递过程中a, b所代表的的是对象的地址，在交换过程中，只是将其地址拷贝一份后再交换，根本影响不到a, b的地址值。如果在有些函数中有修改对象的属性，从而会导致所传递的参数变化了，但要明白其本质：是其指向的对象变化，传递的地址值根本没变过！</p><p>还有一种说法叫做 <strong>按共享传递</strong> (call by sharing) ：</p><p>按共享传递，是指在调用函数时，传递给函数的是实参的地址的拷贝（如果实参在栈中，则直接拷贝该值），这正是Java中的参数传递方式。在函数内部对参数进行操作时，需要先拷贝的地址寻找到具体的值，再进行操作。如果该值在栈中，那么因为是直接拷贝的值，所以函数内部对参数进行操作不会对外部变量产生影响。如果原来拷贝的是原值在堆中的地址，那么需要先根据该地址找到堆中对应的位置，再进行操作。因为传递的是地址的拷贝所以函数内对值的操作对外部变量是可见的。</p><p>【总结】Java中的传递，是值传递，而这个值，实际上是对象的引用。<strong>而按共享传递其实只是按值传递的一个特例</strong>，所以我们可以说Java的传递是按共享传递，或者说Java中的传递是值传递。</p><h3 id="_3-递归-recursion" tabindex="-1"><a class="header-anchor" href="#_3-递归-recursion"><span>3. 递归(recursion)</span></a></h3><p>递归，在数学与计算机科学中，是指在方法的定义中使用方法自身。也就是说，递归算法是一种直接或者间接调用自身方<br> 法的算法。<strong>递归中的“递”就是入栈，“归”就是出栈</strong>。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token doc-comment comment">/**斐波那契数列（Fibonacci sequence），又称黄金分割数列，
 * 因数学家莱昂纳多·斐波那契（Leonardo Fibonacci）以兔子繁殖为例子而引入，故又称为“兔子数列”，
 * 指的是这样一个数列：0、1、1、2、3、5、8、13、21、34、……
 * 在数学上，斐波那契数列以如下被以递推的方法定义：F(0)=0，F(1)=1, F(n)=F(n - 1)+F(n - 2)（n ≥ 2，n ∈ N*）
 * */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Fibonacci</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//System.out.println(fibonacciByRecursion(64));</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">fibonacci</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">fibonacciByRecursion</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> n<span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token function">fibonacciByRecursion</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">fibonacciByRecursion</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> n<span class="token punctuation">;</span>

        <span class="token keyword">int</span> previousTwo <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> previous <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> temp <span class="token operator">=</span> previous <span class="token operator">+</span> previousTwo<span class="token punctuation">;</span>
            previousTwo <span class="token operator">=</span> previous<span class="token punctuation">;</span>
            previous <span class="token operator">=</span> temp<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> previous<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该例中，递归方式的时间复杂度是最高的 O(2<sup>n</sup>)，普通计算机最多只能求解到60左右就显得无能为力了。</p><p>递归的使用也要小心，尽量不使用时间复杂度高的，下列是一些常见的递归算法的时间复杂度：</p><table><thead><tr><th>递归关系</th><th>时间复杂度</th><th>举例</th></tr></thead><tbody><tr><td>T(n) = T(n/2) + O(1)</td><td>T(n) = O(logn)</td><td>二分查找、欧几里得GCD</td></tr><tr><td>T(n) = T(n-1) + O(1)</td><td>T(n) = O(n)</td><td>线性查找</td></tr><tr><td>T(n) = 2T(n/2) + O(1)</td><td>T(n) = O(n)</td><td></td></tr><tr><td>T(n) = 2T(n/2) + O(n)</td><td>T(n) = O(nlogn)</td><td>归并、快排</td></tr><tr><td>T(n) = 2T(n/2) + O(nlogn)</td><td>T(n) = O(nlog<sup>2</sup>n)</td><td></td></tr><tr><td>T(n) = T(n-1) + O(n)</td><td>T(n) = O(n<sup>2</sup>)</td><td>选择排序、插入排序</td></tr><tr><td>T(n) = 2T(n-1) + O(1)</td><td>T(n) = O(2<sup>n</sup>)</td><td>汉诺塔</td></tr><tr><td>T(n) = T(n-1) + T(n-2) + O(1)</td><td>T(n) = O(2<sup>n</sup>)</td><td>递归的斐波那契</td></tr></tbody></table>`,51);function L(M,K){const l=p("RouteLink"),t=p("ExternalLinkIcon");return c(),i("div",null,[g,n("ul",null,[h,n("li",null,[y,n("p",null,[s("更多关于原码, 反码, 补码的介绍："),a(l,{to:"/java/syntax/base/detail/%E5%8E%9F%E7%A0%81%E5%8F%8D%E7%A0%81%E5%92%8C%E8%A1%A5%E7%A0%81.html"},{default:d(()=>[s("深入原码反码补码")]),_:1})])])]),x,n("ul",null,[f,n("li",null,[n("p",null,[s("Java中的布尔类型占用多少个字节？ "),n("a",w,[s("Oracle文档的描述"),a(t)]),s(" ：")]),_,j]),q]),T,n("p",null,[n("a",S,[s("Oracle给出的优先级"),a(t)]),s(" operators in the following table are listed according to precedence order")]),A,n("p",null,[s("It also works with "),J,s(" , the "),n("a",B,[E,a(t)]),s(" class, and a few special classes that wrap certain primitive types:")]),n("p",null,[n("a",O,[R,a(t)]),s(", "),n("a",D,[F,a(t)]),s(", "),n("a",N,[V,a(t)]),s(" and "),n("a",z,[C,a(t)])]),I])}const X=o(b,[["render",L],["__file","Java基础.html.vue"]]),Z=JSON.parse('{"path":"/java/syntax/base/Java%E5%9F%BA%E7%A1%80.html","title":"JAVA基础","lang":"en-US","frontmatter":{"order":15,"description":"JAVA基础 一 数制和码制 1. 基本单位 2. 数制 R进制� 逢R进一 image-20210923092957494 3. 进制转换 R进制转换为十进制（位权相加法） 十进制转换为R进制（除基取余-倒序法、乘基取整-顺序法） image-20210923102945380 二进制、八进制、十六进制相互转换（位段转换法） image-202109...","head":[["meta",{"property":"og:url","content":"https://x.app/notebook/java/syntax/base/Java%E5%9F%BA%E7%A1%80.html"}],["meta",{"property":"og:site_name","content":"Notebook"}],["meta",{"property":"og:title","content":"JAVA基础"}],["meta",{"property":"og:description","content":"JAVA基础 一 数制和码制 1. 基本单位 2. 数制 R进制� 逢R进一 image-20210923092957494 3. 进制转换 R进制转换为十进制（位权相加法） 十进制转换为R进制（除基取余-倒序法、乘基取整-顺序法） image-20210923102945380 二进制、八进制、十六进制相互转换（位段转换法） image-202109..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-04-15T09:06:58.000Z"}],["meta",{"property":"article:author","content":"Mr.Topple"}],["meta",{"property":"article:modified_time","content":"2024-04-15T09:06:58.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"JAVA基础\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-04-15T09:06:58.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Topple\\",\\"url\\":\\"https://www.baidu.com\\"}]}"]]},"headers":[{"level":2,"title":"一 数制和码制","slug":"一-数制和码制","link":"#一-数制和码制","children":[{"level":3,"title":"1. 基本单位","slug":"_1-基本单位","link":"#_1-基本单位","children":[]},{"level":3,"title":"2. 数制","slug":"_2-数制","link":"#_2-数制","children":[]},{"level":3,"title":"3. 进制转换","slug":"_3-进制转换","link":"#_3-进制转换","children":[]},{"level":3,"title":"4. 补码","slug":"_4-补码","link":"#_4-补码","children":[]}]},{"level":2,"title":"二 变量和标识符","slug":"二-变量和标识符","link":"#二-变量和标识符","children":[{"level":3,"title":"1. 变量","slug":"_1-变量","link":"#_1-变量","children":[]},{"level":3,"title":"2. 标识符","slug":"_2-标识符","link":"#_2-标识符","children":[]},{"level":3,"title":"3. Java关键字","slug":"_3-java关键字","link":"#_3-java关键字","children":[]}]},{"level":2,"title":"三 基本输入输出","slug":"三-基本输入输出","link":"#三-基本输入输出","children":[{"level":3,"title":"1. 输入类型判断","slug":"_1-输入类型判断","link":"#_1-输入类型判断","children":[]},{"level":3,"title":"2. 转义字符","slug":"_2-转义字符","link":"#_2-转义字符","children":[]}]},{"level":2,"title":"四 基本数据类型","slug":"四-基本数据类型","link":"#四-基本数据类型","children":[{"level":3,"title":"1. 前缀和后缀","slug":"_1-前缀和后缀","link":"#_1-前缀和后缀","children":[]},{"level":3,"title":"2. 数据类型转换","slug":"_2-数据类型转换","link":"#_2-数据类型转换","children":[]}]},{"level":2,"title":"五 常用运算符","slug":"五-常用运算符","link":"#五-常用运算符","children":[{"level":3,"title":"1. 算术运算符","slug":"_1-算术运算符","link":"#_1-算术运算符","children":[]},{"level":3,"title":"2. 赋值运算符","slug":"_2-赋值运算符","link":"#_2-赋值运算符","children":[]},{"level":3,"title":"3. 关系运算符","slug":"_3-关系运算符","link":"#_3-关系运算符","children":[]},{"level":3,"title":"4. 布尔逻辑运算符","slug":"_4-布尔逻辑运算符","link":"#_4-布尔逻辑运算符","children":[]},{"level":3,"title":"5. 位运算符","slug":"_5-位运算符","link":"#_5-位运算符","children":[]},{"level":3,"title":"6. 三目运算符","slug":"_6-三目运算符","link":"#_6-三目运算符","children":[]},{"level":3,"title":"7. 字符串连接运算符","slug":"_7-字符串连接运算符","link":"#_7-字符串连接运算符","children":[]},{"level":3,"title":"8. 运算符优先级","slug":"_8-运算符优先级","link":"#_8-运算符优先级","children":[]}]},{"level":2,"title":"六 流程控制","slug":"六-流程控制","link":"#六-流程控制","children":[{"level":3,"title":"1. if 条件语句","slug":"_1-if-条件语句","link":"#_1-if-条件语句","children":[]},{"level":3,"title":"2. switch 语句","slug":"_2-switch-语句","link":"#_2-switch-语句","children":[]},{"level":3,"title":"3. while 循环","slug":"_3-while-循环","link":"#_3-while-循环","children":[]},{"level":3,"title":"4. do-while 循环","slug":"_4-do-while-循环","link":"#_4-do-while-循环","children":[]},{"level":3,"title":"5. for 循环","slug":"_5-for-循环","link":"#_5-for-循环","children":[]},{"level":3,"title":"6. break和continue","slug":"_6-break和continue","link":"#_6-break和continue","children":[]}]},{"level":2,"title":"七 方法（函数）","slug":"七-方法-函数","link":"#七-方法-函数","children":[{"level":3,"title":"1. 可变参数","slug":"_1-可变参数","link":"#_1-可变参数","children":[]},{"level":3,"title":"2. 参数传递","slug":"_2-参数传递","link":"#_2-参数传递","children":[]},{"level":3,"title":"3. 递归(recursion)","slug":"_3-递归-recursion","link":"#_3-递归-recursion","children":[]}]}],"git":{"createdTime":1713172018000,"updatedTime":1713172018000,"contributors":[{"name":"Neil","email":"msdrizzle@outlook.com","commits":1}]},"readingTime":{"minutes":19.75,"words":5925},"filePathRelative":"java/syntax/base/Java基础.md","localizedDate":"April 15, 2024","autoDesc":true}');export{X as comp,Z as data};
