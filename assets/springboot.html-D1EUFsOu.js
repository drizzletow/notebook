import{_ as c}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as l,c as u,b as n,d as s,a,w as i,e as t}from"./app-B05z7mYU.js";const r="/notebook/assets/image-20220504204948865-B1gVb44F.png",d="/notebook/assets/image-20220504145658244-DstoR7rf.png",k={},v=n("h2",{id:"一-springboot-introduction",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#一-springboot-introduction"},[n("span",null,"一 SpringBoot Introduction")])],-1),m={href:"https://spring.io/projects/spring-boot",target:"_blank",rel:"noopener noreferrer"},b={href:"https://github.com/spring-projects/spring-boot",target:"_blank",rel:"noopener noreferrer"},g=t(`<h3 id="_1-初识约定大于配置" tabindex="-1"><a class="header-anchor" href="#_1-初识约定大于配置"><span>1. 初识约定大于配置</span></a></h3><p>约定优于配置（Convention over Configuration），又称按约定编程，是一种软件设计范式。</p><p>本质上是说：系统、类库或框架应该假定合理的默认值，而非要求提供不必要的配置。</p><p>比如说model中有一个名为User的类，那么数据库中对应的表就会默认命名为user。</p><p>只有在偏离这一个约定的时候，例如想要将该表命名为person，才需要写有关这个名字的配置。</p><p>比如平时架构师搭建项目就是限制软件开发随便写代码，制定出一套规范，让开发人员按统一的要求进行开发编码测试之类的，这样就加强了开发效率与审查代码效率。所以说写代码的时候就需要按要求命名，这样统一规范的代码就有良好的可读性与维护性了<br> 约定优于配置简单来理解，就是遵循约定</p><br><div class="language-properties line-numbers-mode" data-ext="properties" data-title="properties"><pre class="language-properties"><code>
spring优缺点分析
优点：
<span class="token key attr-name">spring是Java企业版(Java</span> <span class="token value attr-value">Enterprise Edition，JEE，也称J2EE)的轻量级代替品。</span>
<span class="token key attr-name">无需开发重量级的Enterprise</span> <span class="token value attr-value">JavaBean(EJB)，Spring为企业级Java开发提供了一种相对简单的方法，通过依赖注入和面</span>
<span class="token key attr-name">向切面编程，用简单</span> <span class="token value attr-value">的Java对象(Plain Old Java Object，POJO)实现了EJB的功能</span>

缺点：
虽然Spring的组件代码是轻量级的，但它的配置却是重量级的。一开始，Spring用XML配置，而且是很多XML配置。
<span class="token key attr-name">Spring</span> <span class="token value attr-value">2.5引入了基于注解的组件扫描，这消除了大量针对应用程序自身组件的显式XML配置。</span>
<span class="token key attr-name">Spring</span> <span class="token value attr-value">3.0引入了基于Java的配置，这是一种类型安全的可重构配置方式，可以代替XML。</span>

所有这些配置都代表了开发时的损耗。因为在思考Spring特性配置和解决业务问题之间需要进行思维切换，所以编写配置挤占了编写应用程序逻辑的时间。和所有框架一样，Spring实用，但与此同时它要求的回报也不少。除此之外，项目的依赖管理也是一件耗时耗力的事情。在环境搭建时，需要分析要导入哪些库的坐标，而且还需要分析导入与之有依赖关系的其他库的坐标，一旦选错了依赖的版本，随之而来的不兼容问题就会严重阻碍项目的开发进度

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>SpringBoot对上述Spring的缺点进行的改善和优化，基于约定优于配置的思想，可以让开发人员不必在配置与逻辑 业务之间进行思维的切换，全身心的投入到逻辑业务的代码编写中，从而大大提高了开发的效率，一定程度上缩短 了项目周期</p><p>起步依赖<br> 起步依赖本质上是一个Maven项目对象模型(Project Object Model，POM)，定义了对其他库的传递依赖，这些东西加在一起即支持某项功能。简单的说，起步依赖就是将具备某种功能的坐标打包到一起，并提供一些默认的功能。</p><p>自动配置<br> springboot的自动配置，指的是springboot，会自动将一些配置类的bean注册进ioc容器，我们可以需要的地方使用@autowired或者@resource等注解来使用它。“自动”的表现形式就是我们只需要引我们想用功能的包，相关的配置我们完全不用管, springboot会自动注入这些配置bean，我们直接使用这些bean即可</p><p>springboot: 简单、快速、方便地搭建项目；对主流开发框架的无配置集成；极大提高了开发、部署效率</p><br><h3 id="_2-create-project" tabindex="-1"><a class="header-anchor" href="#_2-create-project"><span>2. Create Project</span></a></h3><h4 id="spring-initializr" tabindex="-1"><a class="header-anchor" href="#spring-initializr"><span>Spring Initializr</span></a></h4>`,15),y={href:"https://start.spring.io/",target:"_blank",rel:"noopener noreferrer"},h=t('<p>在官网上直接选择配置，搭建SpringBoot应用 → 下载zip压缩包 → 解压之后就是SpringBoot</p><br><h4 id="createby-idea" tabindex="-1"><a class="header-anchor" href="#createby-idea"><span>CreateBy IDEA</span></a></h4><figure><img src="'+r+`" alt="image-20220504204948865" tabindex="0" loading="lazy"><figcaption>image-20220504204948865</figcaption></figure><br><h3 id="_3-springboot版本号" tabindex="-1"><a class="header-anchor" href="#_3-springboot版本号"><span>3. SpringBoot版本号</span></a></h3><p>第一个数字：主版本，有可能进行大的架构调整，各大版本之间并不一定兼容</p><p>第二个数字：次版本，在主版本架构不变的前提下，增加了一些新的特性或变化</p><p>第三个数字：增量版本，bug修复，细节的完善</p><p>M： 里程碑版本，测试版本，发布版本的前兆</p><p>RC： 候选发布版本，稳定版本，并不一定会发布</p><p>RELEASE： 发布版本，稳定版本，在项目中真正可用的版本</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>
那版本号后面的英文代表什么含义呢？部分具体标签含义，如下所示：

Alpha：内测版

Beta：公开测试版

SNAPSHOT：快照版本，可以稳定使用，且该版本会一直进行小量的优化和改进

PRE：预览版，主要是用来内部开发人员和测试人员测试使用，因此不建议使用
M1（Mn）：M是milestone的缩写，也就是里程碑版本；
         milestone版本主要修复一些BUG和调整UI。一个GA后，一般有多个里程碑，例如 M1 M2 M3

RC：Release，该版本已经相当成熟了，基本上不存在导致错误的BUG，与即将发行的正式版相差无几。
RC1（RCn）：RC是release candidates的缩写，也就是发布预览版；
Release：正式版，也可能没有任何后缀也表示正式版

GA：General Availability,正式发布的版本，官方推荐使用该版本

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h3 id="_4-单元测试与热部署" tabindex="-1"><a class="header-anchor" href="#_4-单元测试与热部署"><span>4. 单元测试与热部署</span></a></h3><p>Spring Boot对项目的单元测试提供了很好的支持，在使用时，需要提前在项目的pom.xml文件中添加spring-boot-starter-test测试依赖启动器，可以通过相关注解实现单元测试</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：使用Spring Initializr方式搭建的Spring Boot项目，会自动加入spring-boot-starter-test测试依赖启动器，无需再手动添加</p><br><p>单元测试类和测试方法：<br> 使用Spring Initializr方式搭建的Spring Boot项目，会在src.test.java测试目录下自动创建与项目主程序启动类对应的单元测试类</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>
<span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span><span class="token class-name">SpringRunner</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token comment">// 测试启动器，并加载Spring Boot测试注解</span>
<span class="token annotation punctuation">@SpringBootTest</span>  <span class="token comment">// 标记为Spring Boot单元测试类，并加载项目的ApplicationContext上下文环境</span>
<span class="token keyword">class</span> <span class="token class-name">SpringbootDemoApplicationTests</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">DemoController</span> demoController<span class="token punctuation">;</span>
    
    <span class="token comment">// 自动创建的单元测试方法实例</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">void</span> <span class="token function">contextLoads</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> demo <span class="token operator">=</span> demoController<span class="token punctuation">.</span><span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>demo<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><p><strong>热部署</strong>：在开发过程中，通常会对一段业务代码不断地修改测试，在修改之后往往需要重启服务，有些服务需要加载很久才能启动成功，这种不必要的重复操作极大的降低了程序开发效率。为此，SpringBoot框架专门提供了进行热部署的依赖启动器，用于进行项目热部署，而无需手动重启项目</p><p>在Spring Boot项目进行热部署测试之前，需要先在项目的pom.xml文件中添加spring-boot-devtools热部署依赖启动器:</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>
<span class="token comment">&lt;!-- 引入热部署依赖 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>添加热部署依赖后可能没有任何效果，还需要针对IDEA开发工具进行热部署相关的功能设置：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>
<span class="token number">1</span>. 选择IDEA工具界面的【File】-<span class="token operator">&gt;</span>【Settings】选项，打开Compiler面板设置页面

    选择Build下的Compiler选项，在右侧勾选 <span class="token variable"><span class="token variable">\`</span>Build project automatically<span class="token variable">\`</span></span> 选项将项目设置为自动编译，

    单击【Apply】→【OK】按钮保存设置
    
<span class="token number">2</span>. 在项目任意页面中使用组合快捷键 <span class="token variable"><span class="token variable">\`</span>Ctrl+Shift+Alt+/<span class="token variable">\`</span></span>, 打开Maintenance选项框，选中并打开Registry页面

   列表中找到<span class="token variable"><span class="token variable">\`</span>compiler.automake.allow.when.app.running<span class="token variable">\`</span></span>，将该选项后的Value值勾选，用于指定IDEA工具
   
   在程序运行过程中自动编译，最后单击【Close】按钮完成设置
   
   
<span class="token number">3</span>. 某些版本的idea没有这个选项，设置好其他选项之后，按 ctrl+f9 也可以迅速编译，
   
   在IDEA右上角的启动项目配置选项中，设置下列两个选项即可

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+d+'" alt="image-20220504145658244" tabindex="0" loading="lazy"><figcaption>image-20220504145658244</figcaption></figure><br><h2 id="二-springboot配置文件" tabindex="-1"><a class="header-anchor" href="#二-springboot配置文件"><span>二 SpringBoot配置文件</span></a></h2>',30),f=n("strong",null,"默认会加载classpath路径下的application.properties",-1),w=t(`<h3 id="_1-springmvc配置" tabindex="-1"><a class="header-anchor" href="#_1-springmvc配置"><span>1. SpringMVC配置</span></a></h3><p>引入依赖 <code>spring-boot-starter-web</code> , 直接开发@Controller就可以了</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>
之前引入配置类:

- @ComponentScan<span class="token punctuation">(</span>controller层<span class="token punctuation">)</span>
- @EnableWebMvc
- implements WebMvcConfigurer


SpringBoot应用中

- @EnableWebMvc 或 @Configuration
	- @EnableWebMvc ：意味着全面接管SpringMVC的配置
	- @Configuration：意味着是配置的补充
- implements WebMvcConfigurer

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h4 id="静态资源映射配置" tabindex="-1"><a class="header-anchor" href="#静态资源映射配置"><span>静态资源映射配置</span></a></h4><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>
<span class="token comment">## 静态资源映射</span>

SpringBoot会帮我们做默认的静态资源映射:

默认的静态资源映射路径 <span class="token variable"><span class="token variable">\`</span>/**<span class="token variable">\`</span></span>, 默认的静态资源的位置 <span class="token variable"><span class="token variable">\`</span>classpath:/static/<span class="token variable">\`</span></span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><div class="language-properties line-numbers-mode" data-ext="properties" data-title="properties"><pre class="language-properties"><code>
<span class="token comment"># ResourceHandler的mapping</span>
<span class="token key attr-name">spring.mvc.static-path-pattern</span><span class="token punctuation">=</span><span class="token value attr-value">/pic/**</span>

<span class="token comment"># ResourceHandler的location → spring.resources → spring.web.resources</span>
<span class="token key attr-name">spring.resources.static-locations</span><span class="token punctuation">=</span><span class="token value attr-value">file:d:/tmp/</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><p>yaml格式的配置文件：</p><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code>
<span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">mvc</span><span class="token punctuation">:</span>
    <span class="token key atrule">static-path-pattern</span><span class="token punctuation">:</span> /<span class="token important">**</span>
  <span class="token key atrule">web</span><span class="token punctuation">:</span>
    <span class="token key atrule">resources</span><span class="token punctuation">:</span>
      <span class="token key atrule">static-locations</span><span class="token punctuation">:</span> file<span class="token punctuation">:</span>d<span class="token punctuation">:</span>/tmp/

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h4 id="tomcat相关的配置" tabindex="-1"><a class="header-anchor" href="#tomcat相关的配置"><span>tomcat相关的配置</span></a></h4><div class="language-properties line-numbers-mode" data-ext="properties" data-title="properties"><pre class="language-properties"><code>
<span class="token comment">## tomcat的相关的配置</span>

<span class="token comment"># 服务器的端口号：默认值8080 → server.port</span>

<span class="token comment"># 应用名 → server.servlet.context-path  (contextPath → context-path)</span>

<span class="token key attr-name">server.port</span><span class="token punctuation">=</span><span class="token value attr-value">8090</span>

<span class="token key attr-name">server.servlet.context-path</span><span class="token punctuation">=</span><span class="token value attr-value">/demo</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h4 id="日期转换相关配置" tabindex="-1"><a class="header-anchor" href="#日期转换相关配置"><span>日期转换相关配置</span></a></h4><p>在接收参数时，根据 Content-Type 的不同，字符串转换为日期需要分别进行处理</p><div class="language-properties line-numbers-mode" data-ext="properties" data-title="properties"><pre class="language-properties"><code>
<span class="token comment"># 一 当Content-Type 为 application/json 时</span>
<span class="token comment">#    dispatcherServlet会使用jackson的MessageConvert，里面解析json的convert为jackson的配置</span>

<span class="token key attr-name">1.</span> <span class="token value attr-value">spring.jackson.date-format</span>

<span class="token key attr-name">2.</span> <span class="token value attr-value">使用 \`@JsonFormat\` 注解   (优先级高)</span>



<span class="token comment"># 二 当Content-Type 为 application/x-www-form-urlencoded（普通表单上传），</span>
<span class="token comment">#    使用的是ModelAttributeMethodProcessor ，使用的是mvc自己的配置</span>

<span class="token key attr-name">1.</span> <span class="token value attr-value">spring.mvc.date-format   (优先级高)</span>

<span class="token key attr-name">2.</span> <span class="token value attr-value">使用 @DatetimeFormat 注解</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>yaml配置文件：</p><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code>
<span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">mvc</span><span class="token punctuation">:</span>
    <span class="token key atrule">date-format</span><span class="token punctuation">:</span> yyyy<span class="token punctuation">-</span>MM<span class="token punctuation">-</span>dd HH<span class="token punctuation">:</span>mm<span class="token punctuation">:</span>ss
  <span class="token key atrule">jackson</span><span class="token punctuation">:</span>
    <span class="token key atrule">date-format</span><span class="token punctuation">:</span> yyyy<span class="token punctuation">-</span>MM<span class="token punctuation">-</span>dd HH<span class="token punctuation">:</span>mm<span class="token punctuation">:</span>ss
    <span class="token key atrule">time-zone</span><span class="token punctuation">:</span> GMT+8

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>需要注意的是 spring.jackson.date-format这种全局化配置对于java8中localDate和LocalDateTime是无效的，</p><p>但对于localDate和LocalDateTime，可以在类属性上通过注解设置转换规则</p><br><h4 id="自定义类型转换器" tabindex="-1"><a class="header-anchor" href="#自定义类型转换器"><span>自定义类型转换器</span></a></h4><p><strong>Converter</strong>：自定义的类型转换器，只需要将Converter注册为容器中的组件就生效，如下：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">String2DateConverter</span> <span class="token keyword">implements</span> <span class="token class-name">Converter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Date</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Date</span> <span class="token function">convert</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">&quot;yyyy-MM-dd&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ParseException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h4 id="characterencodingfilter" tabindex="-1"><a class="header-anchor" href="#characterencodingfilter"><span>CharacterEncodingFilter</span></a></h4><p>SpringMVC中有这样一个Filter专门处理编码问题的，它是<code>CharacterEncodingFilter</code>。</p><p>比如默认给response返回设定编码格式为：UTF-8，则可以通过配置CharacterEncodingFilter实现</p><p>SpringBoot对<code>CharacterEncodingFilter</code>也有支持，只需如下配置：</p><div class="language-properties line-numbers-mode" data-ext="properties" data-title="properties"><pre class="language-properties"><code>
<span class="token comment"># 设置的编码，默认为：UTF-8</span>
<span class="token key attr-name">spring.http.encoding.charset</span><span class="token punctuation">=</span><span class="token value attr-value">UTF-8</span>
 
<span class="token comment"># 是否启用CharacterEncodingFilter，如果不配置也代表true</span>
<span class="token key attr-name">spring.http.encoding.enabled</span><span class="token punctuation">=</span><span class="token value attr-value">true</span>
 
<span class="token comment"># 是否强制设置请求和响应的编码格式为设置的编码格式</span>
<span class="token key attr-name">spring.http.encoding.force</span><span class="token punctuation">=</span>
 
<span class="token comment"># 是否强制设置请求的编码格式为设置的编码格式</span>
<span class="token key attr-name">spring.http.encoding.force-request</span><span class="token punctuation">=</span>
 
<span class="token comment"># 是否强制设置响应的编码格式为设置的编码格式</span>
<span class="token key attr-name">spring.http.encoding.force-response</span><span class="token punctuation">=</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>SpringBoot会自动配置CharacterEncodingFilter，默认字符集就是 UTF-8 ，一般情况下无需配置</p><br><h3 id="_2-mybatis相关配置" tabindex="-1"><a class="header-anchor" href="#_2-mybatis相关配置"><span>2. MyBatis相关配置</span></a></h3><ul><li><p>引入依赖 <code>mybatis-spring-boot-starter</code></p></li><li><p>在配置文件中提供datasource， 配置 <code>spring.datasource.xxx</code></p></li><li><p>提供Mapper接口包目录的值，启动类添加： <code>@MapperScanner</code> 注解</p></li></ul><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.mybatis.spring.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mybatis-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.2.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>5.1.47<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h4 id="数据源和扫描包配置" tabindex="-1"><a class="header-anchor" href="#数据源和扫描包配置"><span>数据源和扫描包配置</span></a></h4><p>配置 datasource 相关信息：</p><div class="language-properties line-numbers-mode" data-ext="properties" data-title="properties"><pre class="language-properties"><code>
<span class="token key attr-name">spring.datasource.driver-class-name</span><span class="token punctuation">=</span><span class="token value attr-value">com.mysql.jdbc.Driver</span>
<span class="token key attr-name">spring.datasource.url</span><span class="token punctuation">=</span><span class="token value attr-value">jdbc:mysql://localhost:3306/spring?useUnicode=true&amp;characterEncoding=utf-8</span>
<span class="token key attr-name">spring.datasource.username</span><span class="token punctuation">=</span><span class="token value attr-value">root</span>
<span class="token key attr-name">spring.datasource.password</span><span class="token punctuation">=</span><span class="token value attr-value">123456</span>

<span class="token key attr-name">mybatis.type-aliases-package</span><span class="token punctuation">=</span><span class="token value attr-value">com.xxx.bean</span>
<span class="token comment">#mybatis.configuration.lazy-loading-enabled=true</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><p>扫描包(这里特指mybatis的<code>mapper</code>)目录配置：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>
<span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token annotation punctuation">@MapperScan</span><span class="token punctuation">(</span><span class="token string">&quot;com.xxx.mapper&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Application</span> <span class="token punctuation">{</span>

    <span class="token comment">//SpringBoot应用程序的入口</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//第一个参数：当前的类</span>
        <span class="token comment">//第二个参数：当前main方法传入的参数</span>
        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">Application</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h4 id="类型转换typehandler" tabindex="-1"><a class="header-anchor" href="#类型转换typehandler"><span>类型转换TypeHandler</span></a></h4><p>TypeHandler 接口提供的方法，可以完成类型的转换</p><p>自定义实现TypeHandler的接口 的类（指定TypeHandler处理的转换类型）：</p><p>例：String 和 Integer[] 之间的转换：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>
<span class="token annotation punctuation">@MappedTypes</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@MappedJdbcTypes</span><span class="token punctuation">(</span><span class="token class-name">JdbcType</span><span class="token punctuation">.</span><span class="token constant">VARCHAR</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IntegerArrayTypeHandler</span> <span class="token keyword">implements</span> <span class="token class-name">TypeHandler</span><span class="token operator">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>

    <span class="token class-name">ObjectMapper</span> objectMapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token doc-comment comment">/**
     * <span class="token keyword">@param</span> <span class="token parameter">preparedStatement</span>  jdbc的对象
     * <span class="token keyword">@param</span> <span class="token parameter">index</span> 预编译sql语句的占位符的序号 → ？的序号
     * <span class="token keyword">@param</span> <span class="token parameter">integers</span> 输入映射传入的值 → #<span class="token punctuation">{</span><span class="token punctuation">}</span>写法提供的值
     * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">SQLException</span></span>
     */</span>
    <span class="token annotation punctuation">@SneakyThrows</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setParameter</span><span class="token punctuation">(</span><span class="token class-name">PreparedStatement</span> preparedStatement<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> integers<span class="token punctuation">,</span> <span class="token class-name">JdbcType</span> jdbcType<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>
        <span class="token comment">// Integer[] → String</span>
        <span class="token comment">//→ 将Integer[]转换成json字符串</span>
        <span class="token class-name">String</span> value <span class="token operator">=</span> objectMapper<span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>integers<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//序号为几，提供的值是什么</span>
        preparedStatement<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//先获得结果集中的查询结果</span>
    <span class="token comment">//再将查询结果转换为指定类型</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getResult</span><span class="token punctuation">(</span><span class="token class-name">ResultSet</span> resultSet<span class="token punctuation">,</span> <span class="token class-name">String</span> columnName<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> result <span class="token operator">=</span> resultSet<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span>columnName<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token function">transfer</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getResult</span><span class="token punctuation">(</span><span class="token class-name">ResultSet</span> resultSet<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> result <span class="token operator">=</span> resultSet<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token function">transfer</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getResult</span><span class="token punctuation">(</span><span class="token class-name">CallableStatement</span> callableStatement<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> result <span class="token operator">=</span> callableStatement<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token function">transfer</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//使用jackson提供的方法完成字符串转换为Integer数组</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">transfer</span><span class="token punctuation">(</span><span class="token class-name">String</span> result<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> integers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            integers <span class="token operator">=</span> objectMapper<span class="token punctuation">.</span><span class="token function">readValue</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">JsonProcessingException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> integers<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h3 id="_3-springboot常见问题" tabindex="-1"><a class="header-anchor" href="#_3-springboot常见问题"><span>3. SpringBoot常见问题</span></a></h3><h4 id="扫描包目录配置" tabindex="-1"><a class="header-anchor" href="#扫描包目录配置"><span>扫描包目录配置</span></a></h4><p>SpringBoot帮我们提供了<span style="color:red;font-size:文字大小;font-family:字体;"><strong>组件扫描包目录的配置 → 启动类所在的包目录</strong></span> .</p>`,54),S={href:"http://xn--com-xx2erqt1di6ipwt9fg21k7i9bnbbx95b.xn--xxxSpringBootcom-wl0ze83dw03bd8j32ds8v7qh9lpyh5gsnh4zck050a.xxx",target:"_blank",rel:"noopener noreferrer"},x=t(`<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>
<span class="token comment">// SpringBoot 默认省略了包扫描注解 </span>
<span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span><span class="token string">&quot;cn.itdrizzle&quot;</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h4 id="引入starter依赖" tabindex="-1"><a class="header-anchor" href="#引入starter依赖"><span>引入starter依赖</span></a></h4><p>SpringBoot应用通常整合一个框架，通常是需要引入其starter依赖</p><ul><li><p>名称上</p><ul><li><p>如果是SpringBoot官方提供的依赖 → spring-boot-starter-</p><p>如：<code>spring-boot-starter</code>、<code>spring-boot-starter-web</code> .</p></li><li><p>如果是第三方提供的依赖 → xxx-spring-boot-starter</p><p>如：<code>mybatis-spring-boot-starter</code> .</p></li></ul></li><li><p>功能上</p><ul><li>会帮我们引入这个框架所必须的一些依赖</li></ul></li></ul><br><h3 id="_4-yml格式的配置文件" tabindex="-1"><a class="header-anchor" href="#_4-yml格式的配置文件"><span>4. yml格式的配置文件</span></a></h3><p>yml或yaml是一种新的配置文件的格式 → properties配置文件的平替，yml表达的也是 <code>key=value</code> 格式</p><p>yml配置文件的语法：</p><ul><li><p>多级key的时候，properties会使用到点 <code>.</code> → yaml使用： <code>冒号、换行、（空格）缩进 </code></p><p>（缩进几格都行，但是要保证同一级对齐）</p></li><li><p>properties的等于符号 = → yml中替换为 <code>冒号、一个空格</code></p></li><li><p>如果有相同的前缀，可以省略，同一级的key要对齐</p></li></ul><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code>
<span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">mvc</span><span class="token punctuation">:</span>
    <span class="token key atrule">static-path-pattern</span><span class="token punctuation">:</span> /pic/<span class="token important">**</span>
  <span class="token key atrule">resources</span><span class="token punctuation">:</span>
    <span class="token key atrule">static-locations</span><span class="token punctuation">:</span> file<span class="token punctuation">:</span>d<span class="token punctuation">:</span>/tmp/
  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>
    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.jdbc.Driver
    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3306/spring<span class="token punctuation">?</span>useUnicode=true<span class="token important">&amp;characterEncoding=utf-</span><span class="token number">8</span>
    <span class="token key atrule">username</span><span class="token punctuation">:</span> root
    <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">123456</span>

<span class="token key atrule">server</span><span class="token punctuation">:</span>
  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8090</span>
  <span class="token key atrule">servlet</span><span class="token punctuation">:</span>
    <span class="token key atrule">context-path</span><span class="token punctuation">:</span> /demo

<span class="token key atrule">mybatis</span><span class="token punctuation">:</span>
  <span class="token key atrule">type-aliases-package</span><span class="token punctuation">:</span> com.xxx.bean

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h3 id="_5-多个配置文件" tabindex="-1"><a class="header-anchor" href="#_5-多个配置文件"><span>5. 多个配置文件</span></a></h3><p>application主配置文件，SpringBoot应用启动的时候加载的application.properties或application.yml文件</p><p>application-xxx分配置文件，由application.properties或application.yml决定是否加载，加载哪一些</p><p>解耦 → 把不同功能的配置项放在不同的配置文件里</p><p>分流 → 区分不同环境下的相同配置</p><p>如何加载不同的application-xxx配置文件?</p><p>配置文件的名称：application-web → web、application-mybatis → mybatis</p><p>application主配置文件中通过分配置文件的名称来指定激活配置文件</p><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code>
<span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">profiles</span><span class="token punctuation">:</span>
	<span class="token comment"># 需要的值的类型是List（数组或list提供值的方式是相同的）</span>
    <span class="token key atrule">active</span><span class="token punctuation">:</span> web<span class="token punctuation">,</span> mybatis
    
<span class="token comment"># 换行、缩进 、减号、缩进    </span>
<span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">profiles</span><span class="token punctuation">:</span>
    <span class="token key atrule">active</span><span class="token punctuation">:</span> 
      <span class="token punctuation">-</span> web
      <span class="token punctuation">-</span> mybatis    
      
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h3 id="_6-配置文件中的提示" tabindex="-1"><a class="header-anchor" href="#_6-配置文件中的提示"><span>6. 配置文件中的提示</span></a></h3><ul><li>引入依赖</li><li>re-run重新运行</li></ul><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-configuration-processor<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>SpringBoot应用会做一件事情 → <span style="color:yellow;background:red;font-size:文字大小;font-family:字体;"><strong>classpath路径下新增一个/META-INF/spring-configuration-metadata.json</strong></span></p><p>我们使用server.port 等key有提示，是因为autoconfigure依赖中的/META-INF/提供了<span style="color:yellow;background:red;font-size:文字大小;font-family:字体;"><strong>spring-configuration-metadata.json</strong></span></p><p>如果你做好配置之后，重新运行了SpringBoot应用，还没有提示 → 在resources目录下新增一个文件夹/META-INF/</p><br><p><strong>参数组件中的默认值配置</strong>：</p><p>spring-configuration-metadata.json文件提供的仅仅是提示，就相当于是一个说明书</p><p>示例：json文件里面写了下面的值</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code>
<span class="token punctuation">{</span>
  <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;xxx.datasource.username&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;java.lang.String&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;sourceType&quot;</span><span class="token operator">:</span> <span class="token string">&quot;com.xxx.config.DatasourceProperties&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;description&quot;</span><span class="token operator">:</span> <span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;defaultValue&quot;</span><span class="token operator">:</span> <span class="token string">&quot;zhangsan&quot;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意并不会配置上默认值、那么如何配置参数类中的默认值呢？</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>
<span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">&quot;xxx.datasource&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DatasourceProperties</span> <span class="token punctuation">{</span>
    <span class="token comment">//xxx.datasource.driver-class-name</span>
    <span class="token class-name">String</span> driverClassName<span class="token punctuation">;</span> <span class="token comment">// = &quot;com.mysql.jdbc.Driver&quot;;</span>
    <span class="token class-name">String</span> url<span class="token punctuation">;</span> 
    <span class="token class-name">String</span> username <span class="token operator">=</span> <span class="token string">&quot;zhangsan&quot;</span><span class="token punctuation">;</span>  <span class="token comment">// = &quot;root&quot;; 配置参数类中的默认值:直接赋值</span>
    <span class="token class-name">String</span> password<span class="token punctuation">;</span>              <span class="token comment">// = &quot;123456&quot;;</span>

    <span class="token class-name">String</span> maxPool<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h2 id="三-springboot自动装配原理" tabindex="-1"><a class="header-anchor" href="#三-springboot自动装配原理"><span>三 SpringBoot自动装配原理</span></a></h2><h3 id="_1-获得配置文件中的值" tabindex="-1"><a class="header-anchor" href="#_1-获得配置文件中的值"><span>1. 获得配置文件中的值</span></a></h3><h4 id="使用-value注解" tabindex="-1"><a class="header-anchor" href="#使用-value注解"><span>使用@Value注解</span></a></h4><p>现有如下的yml配置文件：</p><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code>
<span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>
    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.jdbc.Driver
    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3306/spring<span class="token punctuation">?</span>useUnicode=true<span class="token important">&amp;characterEncoding=utf-</span><span class="token number">8</span>
    <span class="token key atrule">username</span><span class="token punctuation">:</span> root
    <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">123456</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><p>下面使用配置文件中的属性，注册一个DataSource到容器中：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>
<span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DataSourceConfiguration</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${spring.datasource.driver-class-name}&quot;</span><span class="token punctuation">)</span>
    <span class="token class-name">String</span> driverClass<span class="token punctuation">;</span> <span class="token comment">// = &quot;com.mysql.jdbc.Driver&quot;;</span>
    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${spring.datasource.url}&quot;</span><span class="token punctuation">)</span>
    <span class="token class-name">String</span> jdbcUrl<span class="token punctuation">;</span> 
    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${spring.datasource.username}&quot;</span><span class="token punctuation">)</span>
    <span class="token class-name">String</span> username<span class="token punctuation">;</span> <span class="token comment">// = &quot;root&quot;;</span>
    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${spring.datasource.password}&quot;</span><span class="token punctuation">)</span>
    <span class="token class-name">String</span> password<span class="token punctuation">;</span> <span class="token comment">// = &quot;123456&quot;;</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">DataSource</span> <span class="token function">dataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">DruidDataSource</span> dataSource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DruidDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        dataSource<span class="token punctuation">.</span><span class="token function">setDriverClassName</span><span class="token punctuation">(</span>driverClass<span class="token punctuation">)</span><span class="token punctuation">;</span>
        dataSource<span class="token punctuation">.</span><span class="token function">setUrl</span><span class="token punctuation">(</span>jdbcUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>
        dataSource<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>
        dataSource<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> dataSource<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但是这种方式给容器中组件的成员变量赋值的时候，key写的比较长，并且要给每一个成员变量都赋值，比较繁琐</p><br><h4 id="configurationproperties" tabindex="-1"><a class="header-anchor" href="#configurationproperties"><span>ConfigurationProperties</span></a></h4><p>改进方案：通过@ConfigurationProperties注解提供一个前缀，利用成员变量名（set）提供key的另外一部分，让其和SpringBoot配置文件中的key对应起来</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>
<span class="token doc-comment comment">/**
 * @ConfigurationProperties注解的prefix属性值 + 成员变量名(set方法) = 配置文件中的key
 */</span>
<span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@Configuration</span>
<span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">&quot;spring.datasource&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DataSourceConfiguration</span> <span class="token punctuation">{</span>

    <span class="token comment">//spring.datasource.driver-class-name</span>
    <span class="token class-name">String</span> driverClassName<span class="token punctuation">;</span> <span class="token comment">// = &quot;com.mysql.jdbc.Driver&quot;;</span>
    <span class="token class-name">String</span> url<span class="token punctuation">;</span>
    <span class="token class-name">String</span> username<span class="token punctuation">;</span> <span class="token comment">// = &quot;root&quot;;</span>
    <span class="token class-name">String</span> password<span class="token punctuation">;</span> <span class="token comment">// = &quot;123456&quot;;</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">DataSource</span> <span class="token function">dataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">DruidDataSource</span> dataSource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DruidDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        dataSource<span class="token punctuation">.</span><span class="token function">setDriverClassName</span><span class="token punctuation">(</span>driverClassName<span class="token punctuation">)</span><span class="token punctuation">;</span>
        dataSource<span class="token punctuation">.</span><span class="token function">setUrl</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>
        dataSource<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>
        dataSource<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> dataSource<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h4 id="enableconfigurationproperties" tabindex="-1"><a class="header-anchor" href="#enableconfigurationproperties"><span>EnableConfigurationProperties</span></a></h4><p>@EnableConfigurationProperties要和@ConfigurationProperties注解搭配起来使用</p><p>@EnableConfigurationProperties注解的value属性值要写包含@ConfigurationProperties注解对应的类</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>
<span class="token doc-comment comment">/**
 * 把来自于配置文件中的值全部都提取到单独的类中 → 由当前类的成员变量来获得对应的值
 * 参数类 → 类名 → xxxProperties
 */</span>
<span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">&quot;spring.datasource&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DatasourceProperties</span> <span class="token punctuation">{</span>
    <span class="token comment">//spring.datasource.driver-class-name</span>
    <span class="token class-name">String</span> driverClassName<span class="token punctuation">;</span>   <span class="token comment">// = &quot;com.mysql.jdbc.Driver&quot;;</span>
    <span class="token class-name">String</span> url<span class="token punctuation">;</span> 
    <span class="token class-name">String</span> username<span class="token punctuation">;</span>          <span class="token comment">// = &quot;root&quot;;</span>
    <span class="token class-name">String</span> password<span class="token punctuation">;</span>          <span class="token comment">// = &quot;123456&quot;;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>
<span class="token doc-comment comment">/**
 * @ConfigurationProperties注解的prefix属性值 + 成员变量名(set方法) = 配置文件中的key
 */</span>
<span class="token annotation punctuation">@Configuration</span>
<span class="token annotation punctuation">@EnableConfigurationProperties</span><span class="token punctuation">(</span><span class="token class-name">DatasourceProperties</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DataSourceConfiguration</span> <span class="token punctuation">{</span>

    <span class="token comment">/*@Autowired
    DatasourceProperties properties;*/</span>

    <span class="token class-name">DatasourceProperties</span> properties<span class="token punctuation">;</span>

    <span class="token comment">// 如果容器中的组件只包含一个有参构造方法，组件的实例化方式就会采用该有参构造方法</span>
    <span class="token comment">// 形参 默认按照类型从容器中中取出组件</span>
    <span class="token keyword">public</span> <span class="token class-name">DataSourceConfiguration</span><span class="token punctuation">(</span><span class="token class-name">DatasourceProperties</span> properties<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>properties <span class="token operator">=</span> properties<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">DataSource</span> <span class="token function">dataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">DruidDataSource</span> dataSource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DruidDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        dataSource<span class="token punctuation">.</span><span class="token function">setDriverClassName</span><span class="token punctuation">(</span>properties<span class="token punctuation">.</span><span class="token function">getDriverClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        dataSource<span class="token punctuation">.</span><span class="token function">setUrl</span><span class="token punctuation">(</span>properties<span class="token punctuation">.</span><span class="token function">getUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        dataSource<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span>properties<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        dataSource<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span>properties<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> dataSource<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h3 id="_2-约定大于配置的原理" tabindex="-1"><a class="header-anchor" href="#_2-约定大于配置的原理"><span>2. 约定大于配置的原理</span></a></h3><p>自动配置的原理</p><p>引入了starter依赖 → autoconfigure依赖 → 给我们提供大量的自动配置类</p><p>@SpringBootApplication → @EnableAutoConfiguration → 找到SpringBoot提供的自动配置类，并且让其生效</p><p>通过加载一个配置文件，获得所有的自动配置类的信息</p>`,62),C=n("strong",null,"spring-boot-autoconfigure 依赖 /META-INF/spring.factories",-1),j=t(`<div class="language-properties line-numbers-mode" data-ext="properties" data-title="properties"><pre class="language-properties"><code>
<span class="token key attr-name">org.springframework.boot.autoconfigure.EnableAutoConfiguration</span><span class="token punctuation">=</span><span class="token value attr-value">\\
org.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration,\\
org.springframework.boot.autoconfigure.aop.AopAutoConfiguration,\\
org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration,\\
org.springframework.boot.autoconfigure.batch.BatchAutoConfiguration,</span>
<span class="token comment"># ......</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h4 id="两类重要的注解★★" tabindex="-1"><a class="header-anchor" href="#两类重要的注解★★"><span>两类重要的注解★★</span></a></h4><p>@ConditionalOnXXX → 满足XXX条件的时候其他的注解生效</p><p>@ConditionalOnClass → 当应用程序中包含了对应的类的时候生效</p><br><p>@ConditionalOnMissingXXX → 不满足XXX条件的时候其他的注解生效</p><p><span style="color:yellow;background:red;font-size:文字大小;font-family:字体;"><strong>@ConditionalOnMissingBean</strong></span> → 当容器中没有对应的组件的时候生效</p><p><span style="color:red;font-size:文字大小;font-family:字体;"><strong>自动配置类和自动配置里的配置生效是有条件</strong></span> .</p><br><h3 id="_3-分析几个自动配置类" tabindex="-1"><a class="header-anchor" href="#_3-分析几个自动配置类"><span>3. 分析几个自动配置类</span></a></h3><p>DataSourceTransactionManagerAutoConfiguration</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>
<span class="token annotation punctuation">@Configuration</span>
<span class="token comment">// 应用程序中包含对应的类的时候生效 → 引入依赖</span>
<span class="token annotation punctuation">@ConditionalOnClass</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">JdbcTemplate</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">PlatformTransactionManager</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">// 自动配置的顺序</span>
<span class="token annotation punctuation">@AutoConfigureOrder</span><span class="token punctuation">(</span><span class="token number">2147483647</span><span class="token punctuation">)</span>
<span class="token comment">// 向容器中注册value属性对应的类的组件</span>
<span class="token annotation punctuation">@EnableConfigurationProperties</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">DataSourceProperties</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DataSourceTransactionManagerAutoConfiguration</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">DataSourceTransactionManagerAutoConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Configuration</span>
    <span class="token comment">//容器中这个类型的组件只有一个的时候生效</span>
    <span class="token annotation punctuation">@ConditionalOnSingleCandidate</span><span class="token punctuation">(</span><span class="token class-name">DataSource</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">DataSourceTransactionManagerConfiguration</span> <span class="token punctuation">{</span>
        <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">DataSource</span> dataSource<span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">TransactionManagerCustomizers</span> transactionManagerCustomizers<span class="token punctuation">;</span>

        <span class="token comment">//只提供了有参构造方法 → 形参从容器中按照类型取出组件</span>
        <span class="token class-name">DataSourceTransactionManagerConfiguration</span><span class="token punctuation">(</span><span class="token class-name">DataSource</span> dataSource<span class="token punctuation">,</span> <span class="token class-name">ObjectProvider</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TransactionManagerCustomizers</span><span class="token punctuation">&gt;</span></span> transactionManagerCustomizers<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>dataSource <span class="token operator">=</span> dataSource<span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>transactionManagerCustomizers <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">TransactionManagerCustomizers</span><span class="token punctuation">)</span>transactionManagerCustomizers<span class="token punctuation">.</span><span class="token function">getIfAvailable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token annotation punctuation">@Bean</span>
        <span class="token comment">// 容器中没有这个类型的组件的时候生效 → 组件约定大于配置</span>
        <span class="token comment">//如果容器中没有PlatformTransactionManager组件，该@Bean注解则生效 → 容器中注册一个DataSourceTransactionManager组件（默认的组件）</span>
        <span class="token comment">//如果容器中有PlatformTransactionManager组件，@Bean注解不会生效，就不会注册默认组件</span>
        <span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">PlatformTransactionManager</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token keyword">public</span> <span class="token class-name">DataSourceTransactionManager</span> <span class="token function">transactionManager</span><span class="token punctuation">(</span><span class="token class-name">DataSourceProperties</span> properties<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">DataSourceTransactionManager</span> transactionManager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataSourceTransactionManager</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>dataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>transactionManagerCustomizers <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>transactionManagerCustomizers<span class="token punctuation">.</span><span class="token function">customize</span><span class="token punctuation">(</span>transactionManager<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token keyword">return</span> transactionManager<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>
    prefix <span class="token operator">=</span> <span class="token string">&quot;spring.datasource&quot;</span>
<span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DataSourceProperties</span> <span class="token keyword">implements</span> <span class="token class-name">BeanClassLoaderAware</span><span class="token punctuation">,</span> <span class="token class-name">InitializingBean</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">ClassLoader</span> classLoader<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">boolean</span> generateUniqueName<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">DataSource</span><span class="token punctuation">&gt;</span></span> type<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> driverClassName<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> url<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><p>MyBatis的自动配置类</p><p>autoconfigure/META-INF/spring.factories</p><div class="language-properties line-numbers-mode" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="token comment"># Auto Configure</span>
<span class="token key attr-name">org.springframework.boot.autoconfigure.EnableAutoConfiguration</span><span class="token punctuation">=</span><span class="token value attr-value">\\
org.mybatis.spring.boot.autoconfigure.MybatisLanguageDriverAutoConfiguration,\\
org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token annotation punctuation">@ConditionalOnClass</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">SqlSessionFactory</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">SqlSessionFactoryBean</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@ConditionalOnSingleCandidate</span><span class="token punctuation">(</span><span class="token class-name">DataSource</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@EnableConfigurationProperties</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">MybatisProperties</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@AutoConfigureAfter</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">DataSourceAutoConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">MybatisLanguageDriverAutoConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MybatisAutoConfiguration</span> <span class="token keyword">implements</span> <span class="token class-name">InitializingBean</span> <span class="token punctuation">{</span>
	<span class="token annotation punctuation">@Bean</span>
    <span class="token annotation punctuation">@ConditionalOnMissingBean</span>
    <span class="token keyword">public</span> <span class="token class-name">SqlSessionFactory</span> <span class="token function">sqlSessionFactory</span><span class="token punctuation">(</span><span class="token class-name">DataSource</span> dataSource<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token class-name">SqlSessionFactoryBean</span> factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        factory<span class="token punctuation">.</span><span class="token function">setDataSource</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> factory<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><p>解释一下为什么Converter只需要注册到容器中就会生效</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addFormatters</span><span class="token punctuation">(</span><span class="token class-name">FormatterRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    
    <span class="token comment">// 从容器中取出所有的实现了Converter接口的组件</span>
    <span class="token class-name">Iterator</span> var2 <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getBeansOfType</span><span class="token punctuation">(</span><span class="token class-name">Converter</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 逐个注册类型转换器 （所以Converter只需要注册到容器中就会生效）</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>var2<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Converter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span> <span class="token operator">?</span><span class="token punctuation">&gt;</span></span> converter <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Converter</span><span class="token punctuation">)</span>var2<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        registry<span class="token punctuation">.</span><span class="token function">addConverter</span><span class="token punctuation">(</span>converter<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    var2 <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getBeansOfType</span><span class="token punctuation">(</span><span class="token class-name">GenericConverter</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">while</span><span class="token punctuation">(</span>var2<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">GenericConverter</span> converter <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">GenericConverter</span><span class="token punctuation">)</span>var2<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        registry<span class="token punctuation">.</span><span class="token function">addConverter</span><span class="token punctuation">(</span>converter<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    var2 <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getBeansOfType</span><span class="token punctuation">(</span><span class="token class-name">Formatter</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">while</span><span class="token punctuation">(</span>var2<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Formatter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> formatter <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Formatter</span><span class="token punctuation">)</span>var2<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        registry<span class="token punctuation">.</span><span class="token function">addFormatter</span><span class="token punctuation">(</span>formatter<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>
beanFactory<span class="token punctuation">.</span><span class="token function">getBeansOfType</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span>

<span class="token comment">// 按照类型从容器中取出所有的组件  Map&lt;String,T&gt;</span>
<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">getBeansOfType</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> var1<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h2 id="四-springboot应用实践" tabindex="-1"><a class="header-anchor" href="#四-springboot应用实践"><span>四 SpringBoot应用实践</span></a></h2><h3 id="_1-hibernate-validator" tabindex="-1"><a class="header-anchor" href="#_1-hibernate-validator"><span>1. Hibernate Validator</span></a></h3>`,26),q={href:"https://docs.jboss.org/hibernate/stable/validator/reference/en-US/html_single/",target:"_blank",rel:"noopener noreferrer"},_=t(`<p>Hibernate Validator 的作用：</p><ul><li>验证逻辑与业务逻辑之间进行了分离，降低了程序耦合度；</li><li>统一且规范的验证方式，无需你再次编写重复的验证代码；</li></ul><p>引入依赖：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.hibernate.validator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>hibernate-validator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>7.0.4.Final<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：</p><p><strong>某些版本的<code>spring-boot-starter-web</code>包里面有<code>hibernate-validator</code>包，不需要再次引用hibernate validator依赖</strong>.</p><br><h4 id="请求参数校验配置" tabindex="-1"><a class="header-anchor" href="#请求参数校验配置"><span>请求参数校验配置</span></a></h4><p>通常情况下，验证请求参数时，在 <code>@RequestBody DemoModel demo</code> 之间加注解 <code>@Valid</code>，然后后面加BindindResult即可；</p><p>多个参数的，可以加多个@Valid和BindingResult，如：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>
<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/demo2&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">demo2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token annotation punctuation">@Valid</span> <span class="token class-name">DemoModel</span> demo<span class="token punctuation">,</span> <span class="token class-name">BindingResult</span> result<span class="token punctuation">,</span>
                    <span class="token annotation punctuation">@RequestBody</span> <span class="token annotation punctuation">@Valid</span> <span class="token class-name">DemoModel</span> demo2<span class="token punctuation">,</span> <span class="token class-name">BindingResult</span> result2<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>result1<span class="token punctuation">.</span><span class="token function">hasErrors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">ObjectError</span> error <span class="token operator">:</span> result<span class="token punctuation">.</span><span class="token function">getAllErrors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span><span class="token function">getDefaultMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><p>GET参数校验(@RequestParam参数校验)：</p><p>使用校验bean的方式，没有办法校验RequestParam的内容，处理Get请求(或参数比较少)的时候，例如下面的代码：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>
<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;/demo3&quot;</span><span class="token punctuation">,</span> method <span class="token operator">=</span> <span class="token class-name">RequestMethod</span><span class="token punctuation">.</span><span class="token constant">GET</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">demo3</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;grade&quot;</span><span class="token punctuation">,</span> required <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token keyword">int</span> grade<span class="token punctuation">,</span>
                  <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;classroom&quot;</span><span class="token punctuation">,</span> required <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token keyword">int</span> classroom<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>grade <span class="token operator">+</span> <span class="token string">&quot;,&quot;</span> <span class="token operator">+</span> classroom<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时使用@Valid注解，对RequestParam对应的参数进行注解，是无效的，</p><p>需要使用@Validated注解来使得验证生效。如下所示：</p><br><h4 id="快速失败返回模式" tabindex="-1"><a class="header-anchor" href="#快速失败返回模式"><span>快速失败返回模式</span></a></h4><p>Hibernate Validator有以下两种验证模式：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>
<span class="token number">1</span>、普通模式（默认是这个模式）：会校验完所有的属性，然后返回所有的验证失败信息

<span class="token number">2</span>、快速失败返回模式 <span class="token builtin class-name">:</span> 只要有一个验证失败，则返回
　　
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>true 快速失败返回模式 false 普通模式</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>
<span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ValidatorConfiguration</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">Validator</span> <span class="token function">validator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">ValidatorFactory</span> validatorFactory <span class="token operator">=</span> <span class="token class-name">Validation</span><span class="token punctuation">.</span><span class="token function">byProvider</span><span class="token punctuation">(</span> <span class="token class-name">HibernateValidator</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">configure</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">addProperty</span><span class="token punctuation">(</span> <span class="token string">&quot;hibernate.validator.fail_fast&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;true&quot;</span> <span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">buildValidatorFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Validator</span> validator <span class="token operator">=</span> validatorFactory<span class="token punctuation">.</span><span class="token function">getValidator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> validator<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>两种验证模式配置方式参考官方文档：</p>`,24),B={href:"https://docs.jboss.org/hibernate/stable/validator/reference/en-US/html_single/#section-provider-specific-settings",target:"_blank",rel:"noopener noreferrer"},M=t(`<br><h4 id="注解使用示例" tabindex="-1"><a class="header-anchor" href="#注解使用示例"><span>注解使用示例</span></a></h4><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Data</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>hibernate<span class="token punctuation">.</span>validator<span class="token punctuation">.</span>constraints<span class="token punctuation">.</span></span><span class="token class-name">Range</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>validation<span class="token punctuation">.</span>constraints<span class="token punctuation">.</span></span><span class="token class-name">NotBlank</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>validation<span class="token punctuation">.</span>constraints<span class="token punctuation">.</span></span><span class="token class-name">Pattern</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RegisterDTO</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@NotBlank</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">&quot;用户名不能为空&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> userName<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@NotBlank</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">&quot;密码不能为空&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@NotBlank</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">&quot;真实姓名不能为空&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> realName<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Range</span><span class="token punctuation">(</span>min <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> max <span class="token operator">=</span> <span class="token number">99</span><span class="token punctuation">,</span> message <span class="token operator">=</span> <span class="token string">&quot;年龄应该在0到99之间&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Pattern</span><span class="token punctuation">(</span>regexp <span class="token operator">=</span> <span class="token string">&quot;男|女&quot;</span><span class="token punctuation">,</span> message <span class="token operator">=</span> <span class="token string">&quot;必须是男或女&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> sex<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Pattern</span><span class="token punctuation">(</span>regexp <span class="token operator">=</span> <span class="token string">&quot;\\\\d{3}-\\\\d{8}|\\\\d{4}-\\\\d{7}|\\\\d{11}&quot;</span><span class="token punctuation">,</span> message <span class="token operator">=</span> <span class="token string">&quot;号码不正确&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> telephone<span class="token punctuation">;</span>

<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="配合统一异常处理" tabindex="-1"><a class="header-anchor" href="#配合统一异常处理"><span>配合统一异常处理</span></a></h4>`,4);function D(T,I){const e=o("ExternalLinkIcon"),p=o("font");return l(),u("div",null,[v,n("p",null,[s("SpringBoot："),n("a",m,[s("https://spring.io/projects/spring-boot"),a(e)])]),n("p",null,[s("Github："),n("a",b,[s("https://github.com/spring-projects/spring-boot"),a(e)])]),g,n("p",null,[n("a",y,[s("https://start.spring.io/"),a(e)])]),h,n("p",null,[s("SpringBoot应用程序"),a(p,{color:"red"},{default:i(()=>[f]),_:1}),s(" .")]),w,n("p",null,[n("a",S,[s("启动类所在的包目录是com.xxx那么SpringBoot应用的扫描包目录就是com.xxx"),a(e)])]),x,n("p",null,[s("→ "),a(p,{color:"red"},{default:i(()=>[C]),_:1}),s(" .")]),j,n("p",null,[s("官方文档："),n("a",q,[s("https://docs.jboss.org/hibernate/stable/validator/reference/en-US/html_single/"),a(e)])]),_,n("p",null,[n("a",B,[s("https://docs.jboss.org/hibernate/stable/validator/reference/en-US/html_single/#section-provider-specific-settings"),a(e)])]),M])}const A=c(k,[["render",D],["__file","springboot.html.vue"]]),R=JSON.parse('{"path":"/java/spring/springboot/springboot.html","title":"SpringBoot","lang":"en-US","frontmatter":{"order":20,"title":"SpringBoot","shortTitle":"SpringBoot","description":"一 SpringBoot Introduction SpringBoot：https://spring.io/projects/spring-boot Github：https://github.com/spring-projects/spring-boot 1. 初识约定大于配置 约定优于配置（Convention over Configuratio...","head":[["meta",{"property":"og:url","content":"https://x.app/notebook/java/spring/springboot/springboot.html"}],["meta",{"property":"og:site_name","content":"Notebook"}],["meta",{"property":"og:title","content":"SpringBoot"}],["meta",{"property":"og:description","content":"一 SpringBoot Introduction SpringBoot：https://spring.io/projects/spring-boot Github：https://github.com/spring-projects/spring-boot 1. 初识约定大于配置 约定优于配置（Convention over Configuratio..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-04-15T09:06:58.000Z"}],["meta",{"property":"article:author","content":"Mr.Topple"}],["meta",{"property":"article:modified_time","content":"2024-04-15T09:06:58.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"SpringBoot\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-04-15T09:06:58.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Topple\\",\\"url\\":\\"https://www.baidu.com\\"}]}"]]},"headers":[{"level":2,"title":"一 SpringBoot Introduction","slug":"一-springboot-introduction","link":"#一-springboot-introduction","children":[{"level":3,"title":"1. 初识约定大于配置","slug":"_1-初识约定大于配置","link":"#_1-初识约定大于配置","children":[]},{"level":3,"title":"2. Create Project","slug":"_2-create-project","link":"#_2-create-project","children":[]},{"level":3,"title":"3. SpringBoot版本号","slug":"_3-springboot版本号","link":"#_3-springboot版本号","children":[]},{"level":3,"title":"4. 单元测试与热部署","slug":"_4-单元测试与热部署","link":"#_4-单元测试与热部署","children":[]}]},{"level":2,"title":"二 SpringBoot配置文件","slug":"二-springboot配置文件","link":"#二-springboot配置文件","children":[{"level":3,"title":"1. SpringMVC配置","slug":"_1-springmvc配置","link":"#_1-springmvc配置","children":[]},{"level":3,"title":"2. MyBatis相关配置","slug":"_2-mybatis相关配置","link":"#_2-mybatis相关配置","children":[]},{"level":3,"title":"3. SpringBoot常见问题","slug":"_3-springboot常见问题","link":"#_3-springboot常见问题","children":[]},{"level":3,"title":"4. yml格式的配置文件","slug":"_4-yml格式的配置文件","link":"#_4-yml格式的配置文件","children":[]},{"level":3,"title":"5. 多个配置文件","slug":"_5-多个配置文件","link":"#_5-多个配置文件","children":[]},{"level":3,"title":"6. 配置文件中的提示","slug":"_6-配置文件中的提示","link":"#_6-配置文件中的提示","children":[]}]},{"level":2,"title":"三 SpringBoot自动装配原理","slug":"三-springboot自动装配原理","link":"#三-springboot自动装配原理","children":[{"level":3,"title":"1. 获得配置文件中的值","slug":"_1-获得配置文件中的值","link":"#_1-获得配置文件中的值","children":[]},{"level":3,"title":"2. 约定大于配置的原理","slug":"_2-约定大于配置的原理","link":"#_2-约定大于配置的原理","children":[]},{"level":3,"title":"3. 分析几个自动配置类","slug":"_3-分析几个自动配置类","link":"#_3-分析几个自动配置类","children":[]}]},{"level":2,"title":"四 SpringBoot应用实践","slug":"四-springboot应用实践","link":"#四-springboot应用实践","children":[{"level":3,"title":"1. Hibernate Validator","slug":"_1-hibernate-validator","link":"#_1-hibernate-validator","children":[]}]}],"git":{"createdTime":1713172018000,"updatedTime":1713172018000,"contributors":[{"name":"Neil","email":"msdrizzle@outlook.com","commits":1}]},"readingTime":{"minutes":19.5,"words":5850},"filePathRelative":"java/spring/springboot/springboot.md","localizedDate":"April 15, 2024","autoDesc":true}');export{A as comp,R as data};
