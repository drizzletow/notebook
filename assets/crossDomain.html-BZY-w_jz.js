import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as e,o,c as p,a as n,b as s,d as i,e as c}from"./app-BjhgyJo9.js";const l={},u=n("h2",{id:"一-同源策略与跨域请求",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#一-同源策略与跨域请求"},[n("span",null,"一 同源策略与跨域请求")])],-1),r=n("p",null,[n("strong",null,"首先，跨域不是问题。是一种安全机制")],-1),d=n("h3",{id:"_1-同源策略介绍",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1-同源策略介绍"},[n("span",null,"1. 同源策略介绍")])],-1),k=n("p",null,"跨域是浏览器加载了与当前域名、协议、端口不同另一站点下的资源，这与各大支持JavaScript的浏览器的同源策略是违背的。",-1),v={href:"https://baike.baidu.com/item/%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5",target:"_blank",rel:"noopener noreferrer"},m=n("strong",null,"同源策略",-1),g=c(`<p>现在所有支持JavaScript 的浏览器都会使用这个策略。</p><p>所谓同源是指，域名，协议，端口相同。</p><h3 id="_2-跨域请求的问题" tabindex="-1"><a class="header-anchor" href="#_2-跨域请求的问题"><span>2. 跨域请求的问题</span></a></h3><p>-- 前后端分离的开发环境下</p><p>跨域并不会阻止请求的发出，也不会阻止请求的接受，跨域是浏览器为了保护当前页面，你的请求得到了响应，浏览器不会把响应的数据交给页面上的回调，取而代之的是去提示你这是一个跨域数据。提示就是一个报错提醒</p><p>知道了浏览器是如何处理的了，才能对症下药来解决这个问题，下面介绍几种常用的跨域解决方法</p><h2 id="二-解决跨域请求的问题" tabindex="-1"><a class="header-anchor" href="#二-解决跨域请求的问题"><span>二 解决跨域请求的问题</span></a></h2><h3 id="_1-跨域资源共享cors" tabindex="-1"><a class="header-anchor" href="#_1-跨域资源共享cors"><span>1. 跨域资源共享CORS</span></a></h3><p>这是最靠谱也是非常科学的解决方案，通过<code>Access-Control-Allow-Origin</code>响应头，告诉浏览器如果请求<code>我的资源的页面</code> 是 <code>我这个响应头里记录了的&quot;源&quot;</code>，则不要拦截此响应，允许数据通行。</p><table><thead><tr><th>header头字段</th><th>含义</th><th>取值</th></tr></thead><tbody><tr><td>Access-Control-Allow-Credentials</td><td>响应头表示是否可以将对请求的响应暴露给页面。返回true则可以，其他值均不可以。</td><td>true/false</td></tr><tr><td>Access-Control-Allow-Headers</td><td>表示此次请求中可以使用那些header字段</td><td>符合请求头规范的字符串</td></tr><tr><td>Access-Control-Allow-Methods</td><td>表示此次请求中可以使用那些请求方法</td><td>GET/POST(多个使用逗号隔开)</td></tr></tbody></table><br><h3 id="_2-跨域请求与cookie" tabindex="-1"><a class="header-anchor" href="#_2-跨域请求与cookie"><span>2. 跨域请求与Cookie</span></a></h3><br><h3 id="_3-前端解决方案jsonp" tabindex="-1"><a class="header-anchor" href="#_3-前端解决方案jsonp"><span>3. 前端解决方案JSONP</span></a></h3><p>当服务端没有返回<code>Access-Control-Allow-Origin</code>这样的字段时，是否就意味着不能使用此资源了吗？不！只能说不建议使用此资源了。但我们还有另一种办法，那就是通过JSONP。</p><h2 id="三-springboot跨域配置" tabindex="-1"><a class="header-anchor" href="#三-springboot跨域配置"><span>三 SpringBoot跨域配置</span></a></h2><p>java解决CORS跨域请求的方式，主要有以下几种方式可供选择：</p><ol><li>返回新的CorsFilter</li><li>重写 WebMvcConfigurer</li><li>使用注解 @CrossOrigin</li><li>自定义web filter 实现跨域 （手动设置响应头 ：HttpServletResponse）</li></ol><h3 id="_1-corsfilter★★★" tabindex="-1"><a class="header-anchor" href="#_1-corsfilter★★★"><span>1. CorsFilter★★★</span></a></h3><p>返回新的CorsFilter(全局跨域)</p><p>在任意配置类，返回一个 新的 CorsFIlter Bean ，并添加映射路径和具体的CORS配置路径。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 *
 * 设置跨域请求
 **/</span>
<span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CorsConfig</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">CorsConfiguration</span> <span class="token function">buildConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">CorsConfiguration</span> corsConfiguration <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CorsConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        corsConfiguration<span class="token punctuation">.</span><span class="token function">addAllowedOrigin</span><span class="token punctuation">(</span><span class="token string">&quot;*&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1 设置访问源地址</span>
        corsConfiguration<span class="token punctuation">.</span><span class="token function">addAllowedHeader</span><span class="token punctuation">(</span><span class="token string">&quot;*&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2 设置访问源请求头</span>
        corsConfiguration<span class="token punctuation">.</span><span class="token function">addAllowedMethod</span><span class="token punctuation">(</span><span class="token string">&quot;*&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3 设置访问源请求方法</span>
        <span class="token keyword">return</span> corsConfiguration<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">CorsFilter</span> <span class="token function">corsFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">UrlBasedCorsConfigurationSource</span> source <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UrlBasedCorsConfigurationSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token comment">// 4 对接口配置跨域设置 “*”代表全部。”**”代表适配所有接口。 </span>
        source<span class="token punctuation">.</span><span class="token function">registerCorsConfiguration</span><span class="token punctuation">(</span><span class="token string">&quot;/**&quot;</span><span class="token punctuation">,</span> <span class="token function">buildConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CorsFilter</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h3 id="_2-webmvcconfigurer" tabindex="-1"><a class="header-anchor" href="#_2-webmvcconfigurer"><span>2. WebMvcConfigurer</span></a></h3><p>重写WebMvcConfigurer(全局跨域)</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>
<span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CorsConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addCorsMappings</span><span class="token punctuation">(</span><span class="token class-name">CorsRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        registry<span class="token punctuation">.</span><span class="token function">addMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/**&quot;</span><span class="token punctuation">)</span>
                <span class="token comment">//是否发送Cookie</span>
                <span class="token punctuation">.</span><span class="token function">allowCredentials</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>
                <span class="token comment">//放行哪些原始域</span>
                <span class="token punctuation">.</span><span class="token function">allowedOrigins</span><span class="token punctuation">(</span><span class="token string">&quot;*&quot;</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">allowedMethods</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">&quot;GET&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;POST&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;PUT&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;DELETE&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">allowedHeaders</span><span class="token punctuation">(</span><span class="token string">&quot;*&quot;</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">exposedHeaders</span><span class="token punctuation">(</span><span class="token string">&quot;*&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>


</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h3 id="_3-crossorgin" tabindex="-1"><a class="header-anchor" href="#_3-crossorgin"><span>3. @CrossOrgin</span></a></h3><p>可以用在方法上，也可以用在类上。如果你不设置他的<strong>value</strong>属性，或者是<strong>origins</strong>属性，就默认是可以允许所有的URL/域访问</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>
<span class="token comment">//@CrossOrigin  表示所有的URL均可访问此资源</span>
<span class="token annotation punctuation">@CrossOrigin</span><span class="token punctuation">(</span>origins <span class="token operator">=</span> <span class="token string">&quot;http://127.0.0.1:8093&quot;</span><span class="token punctuation">)</span><span class="token comment">//表示只允许这一个url可以跨域访问这个controller</span>
<span class="token annotation punctuation">@RestController</span>
<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/testCorss&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CorssOriginController</span> <span class="token punctuation">{</span>

    <span class="token comment">//可以对方法运用该注解</span>
    <span class="token comment">//@CrossOrigin(origins = &quot;http://127.0.0.1:8093&quot;)</span>
    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/getString&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;跨域成功！&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>value</strong> 属性可以设置多个URL。</li><li><strong>origins</strong> 属性也可以设置多个URL。</li><li><strong>maxAge</strong> 属性指定了准备响应前的缓存持续的最大时间。就是探测请求的有效期。</li><li><strong>allowCredentials</strong> 属性表示用户是否可以发送、处理 cookie。默认为false</li><li><strong>allowedHeaders</strong> 属性表示允许的请求头部有哪些。</li><li><strong>methods</strong> 属性表示允许请求的方法，默认get，post，head。</li></ul><br><h3 id="_4-通过filter实现跨域" tabindex="-1"><a class="header-anchor" href="#_4-通过filter实现跨域"><span>4. 通过filter实现跨域</span></a></h3><p>使用自定义filter，手动设置响应头实现跨域，定义一个类、实现Filter接口即可</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>
<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyCorsFilter</span> <span class="token keyword">implements</span> <span class="token class-name">Filter</span> <span class="token punctuation">{</span>

  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> res<span class="token punctuation">,</span> 
  <span class="token class-name">FilterChain</span> chain<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span>
  
    <span class="token class-name">HttpServletResponse</span> response <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">HttpServletResponse</span><span class="token punctuation">)</span> res<span class="token punctuation">;</span>
    response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">&quot;Access-Control-Allow-Origin&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;*&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">&quot;Access-Control-Allow-Methods&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;POST, GET, OPTIONS, DELETE&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">&quot;Access-Control-Max-Age&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;3600&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">&quot;Access-Control-Allow-Headers&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;x-requested-with,content-type&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    chain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
  <span class="token punctuation">}</span>
  
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">FilterConfig</span> filterConfig<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><p>也可以通过手动设置响应头实现局部跨域：</p><p>再具体的方法中使用 HttpServletResponse 对象添加响应头(Access-Control-Allow-Origin)来授权放行即可</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>
<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/index&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token punctuation">{</span>

    response<span class="token punctuation">.</span><span class="token function">addHeader</span><span class="token punctuation">(</span><span class="token string">&quot;Access-Allow-Control-Origin&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;*&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token string">&quot;index&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,39);function b(h,f){const a=e("ExternalLinkIcon");return o(),p("div",null,[u,r,d,k,n("p",null,[s("所谓"),n("a",v,[m,s(),i(a)]),s("，它是由Netscape提出的一个著名的安全策略。是防止外网的脚本恶意攻击服务器的一种措施。")]),g])}const q=t(l,[["render",b],["__file","crossDomain.html.vue"]]),w=JSON.parse('{"path":"/java/spring/springboot/crossDomain.html","title":"同源策略与跨域请求","lang":"en-US","frontmatter":{"order":-1,"title":"同源策略与跨域请求","shortTitle":"解决跨域问题","description":"一 同源策略与跨域请求 首先，跨域不是问题。是一种安全机制 1. 同源策略介绍 跨域是浏览器加载了与当前域名、协议、端口不同另一站点下的资源，这与各大支持JavaScript的浏览器的同源策略是违背的。 所谓 同源策略 ，它是由Netscape提出的一个著名的安全策略。是防止外网的脚本恶意攻击服务器的一种措施。 现在所有支持JavaScript 的浏览...","head":[["meta",{"property":"og:url","content":"https://x.app/notebook/java/spring/springboot/crossDomain.html"}],["meta",{"property":"og:site_name","content":"Notebook"}],["meta",{"property":"og:title","content":"同源策略与跨域请求"}],["meta",{"property":"og:description","content":"一 同源策略与跨域请求 首先，跨域不是问题。是一种安全机制 1. 同源策略介绍 跨域是浏览器加载了与当前域名、协议、端口不同另一站点下的资源，这与各大支持JavaScript的浏览器的同源策略是违背的。 所谓 同源策略 ，它是由Netscape提出的一个著名的安全策略。是防止外网的脚本恶意攻击服务器的一种措施。 现在所有支持JavaScript 的浏览..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-04-15T09:06:58.000Z"}],["meta",{"property":"article:author","content":"Mr.Topple"}],["meta",{"property":"article:modified_time","content":"2024-04-15T09:06:58.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"同源策略与跨域请求\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-04-15T09:06:58.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Topple\\",\\"url\\":\\"https://www.baidu.com\\"}]}"]]},"headers":[{"level":2,"title":"一 同源策略与跨域请求","slug":"一-同源策略与跨域请求","link":"#一-同源策略与跨域请求","children":[{"level":3,"title":"1. 同源策略介绍","slug":"_1-同源策略介绍","link":"#_1-同源策略介绍","children":[]},{"level":3,"title":"2. 跨域请求的问题","slug":"_2-跨域请求的问题","link":"#_2-跨域请求的问题","children":[]}]},{"level":2,"title":"二 解决跨域请求的问题","slug":"二-解决跨域请求的问题","link":"#二-解决跨域请求的问题","children":[{"level":3,"title":"1. 跨域资源共享CORS","slug":"_1-跨域资源共享cors","link":"#_1-跨域资源共享cors","children":[]},{"level":3,"title":"2. 跨域请求与Cookie","slug":"_2-跨域请求与cookie","link":"#_2-跨域请求与cookie","children":[]},{"level":3,"title":"3. 前端解决方案JSONP","slug":"_3-前端解决方案jsonp","link":"#_3-前端解决方案jsonp","children":[]}]},{"level":2,"title":"三 SpringBoot跨域配置","slug":"三-springboot跨域配置","link":"#三-springboot跨域配置","children":[{"level":3,"title":"1. CorsFilter★★★","slug":"_1-corsfilter★★★","link":"#_1-corsfilter★★★","children":[]},{"level":3,"title":"2. WebMvcConfigurer","slug":"_2-webmvcconfigurer","link":"#_2-webmvcconfigurer","children":[]},{"level":3,"title":"3. @CrossOrgin","slug":"_3-crossorgin","link":"#_3-crossorgin","children":[]},{"level":3,"title":"4. 通过filter实现跨域","slug":"_4-通过filter实现跨域","link":"#_4-通过filter实现跨域","children":[]}]}],"git":{"createdTime":1713172018000,"updatedTime":1713172018000,"contributors":[{"name":"Neil","email":"msdrizzle@outlook.com","commits":1}]},"readingTime":{"minutes":4.14,"words":1242},"filePathRelative":"java/spring/springboot/crossDomain.md","localizedDate":"April 15, 2024","autoDesc":true}');export{q as comp,w as data};
