import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,e as t}from"./app-BqinhWG9.js";const e={},p=t(`<h2 id="类-class-和面向对象" tabindex="-1"><a class="header-anchor" href="#类-class-和面向对象"><span>类(Class)和面向对象</span></a></h2><p>TypeScript 中的类是对 ECMAScript 6 (ES6) 类的一个超集，它在 ES6 类的基础上增加了一些额外的类型安全和功能特性。</p><h3 id="类的定义和继承" tabindex="-1"><a class="header-anchor" href="#类的定义和继承"><span>类的定义和继承</span></a></h3><p>TS中类的定义和继承等与ES6最大的区别就是TypeScript 允许在类的属性、方法参数和返回值上添加类型注解，提供静态类型检查</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>

  <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">move</span><span class="token punctuation">(</span>distanceInMeters<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> moved </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>distanceInMeters<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">m.</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">bark</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Woof! Woof!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> dog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token string">&#39;Rex&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
dog<span class="token punctuation">.</span><span class="token function">bark</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
dog<span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>TypeScript 不支持从多个类继承（无多重继承），但你可以通过接口来模拟这个功能。一个类可以实现多个接口</p><h3 id="访问修饰符" tabindex="-1"><a class="header-anchor" href="#访问修饰符"><span>访问修饰符</span></a></h3><p>TypeScript 提供了三种访问修饰符，用于在类内部控制成员的可访问性。</p><ul><li><code>public</code>（默认）：成员是从类的外部可访问的。</li><li><code>private</code>：成员只能从类的内部访问。</li><li><code>protected</code>：成员能被派生类中访问。</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  <span class="token keyword">private</span> age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
  <span class="token keyword">protected</span> email<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>

  <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> email<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>email <span class="token operator">=</span> email<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="抽象类和抽象方法" tabindex="-1"><a class="header-anchor" href="#抽象类和抽象方法"><span>抽象类和抽象方法</span></a></h3><p>抽象类（Abstract Classes）和抽象方法（Abstract Methods）主要用于声明基类，它们提供了一种方式来定义必须由派生类实现的方法。</p><ul><li>抽象类不能被实例化</li><li>抽象方法只能存在于抽象类中</li><li>抽象类可以包含非抽象成员</li><li>抽象类不能直接实例化，但仍可以拥有构造函数。这个构造函数用于被派生类的构造函数调用</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Department</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token keyword">public</span> name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

  <span class="token function">printName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Department name: &#39;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">abstract</span> <span class="token function">printMeeting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span> <span class="token comment">// 必须在派生类中实现</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">AccountingDepartment</span> <span class="token keyword">extends</span> <span class="token class-name">Department</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token string">&#39;Accounting and Auditing&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 构造函数中调用 super</span>
  <span class="token punctuation">}</span>

  <span class="token function">printMeeting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;The Accounting Department meets each Monday at 10am.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">generateReports</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Generating accounting reports...&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="接口实现" tabindex="-1"><a class="header-anchor" href="#接口实现"><span>接口实现</span></a></h3><p>在 TypeScript 中，接口（interface）用于定义对象或类的形状（shape），即它们需要具备的属性和方法。当一个类实现（implements）一个接口时，这个类就必须提供接口中所定义的所有属性和方法的实现。</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">// 定义接口</span>
<span class="token keyword">interface</span> <span class="token class-name">InterfaceName</span> <span class="token punctuation">{</span>
  property1<span class="token operator">:</span> type1<span class="token punctuation">;</span>
  <span class="token function">method1</span><span class="token punctuation">(</span>param1<span class="token operator">:</span> type2<span class="token punctuation">,</span> param2<span class="token operator">:</span> type3<span class="token punctuation">)</span><span class="token operator">:</span> returnType<span class="token punctuation">;</span>
  <span class="token comment">// ...更多属性和方法</span>
<span class="token punctuation">}</span>

<span class="token comment">// 实现接口的类</span>
<span class="token keyword">class</span> <span class="token class-name">ClassName</span> <span class="token keyword">implements</span> <span class="token class-name">InterfaceName</span> <span class="token punctuation">{</span>
  property1<span class="token operator">:</span> type1<span class="token punctuation">;</span>

  <span class="token function">constructor</span><span class="token punctuation">(</span>param1<span class="token operator">:</span> type2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>property1 <span class="token operator">=</span> param1<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">method1</span><span class="token punctuation">(</span>param1<span class="token operator">:</span> type2<span class="token punctuation">,</span> param2<span class="token operator">:</span> type3<span class="token punctuation">)</span><span class="token operator">:</span> returnType <span class="token punctuation">{</span>
    <span class="token comment">// 方法实现</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// ...实现接口中的其他方法</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意事项</strong>：</p><ol><li><p><strong>必选与可选成员</strong>：</p><ul><li>接口中可以定义必选成员和可选成员。必选成员在类中必须被实现，而可选成员则不一定。可选成员后面需加上 <code>?</code> 符号。</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">OptionalInterface</span> <span class="token punctuation">{</span>
  <span class="token function">requiredMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
  optionalMethod<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">;</span> <span class="token comment">// 可选方法</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>公共访问修饰符</strong>：</p><ul><li>当实现接口时，类中的相应成员需要是公共的（使用 <code>public</code> 关键字或隐式公共，即不指定访问修饰符），因为接口只关注公有部分。</li></ul></li><li><p><strong>接口继承</strong>：</p><ul><li>接口之间可以继承，实现类需要满足所有基接口的要求。</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">BaseInterface</span> <span class="token punctuation">{</span>
  <span class="token function">baseMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">interface</span> <span class="token class-name">DerivedInterface</span> <span class="token keyword">extends</span> <span class="token class-name">BaseInterface</span> <span class="token punctuation">{</span>
  <span class="token function">derivedMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">MyClass</span> <span class="token keyword">implements</span> <span class="token class-name">DerivedInterface</span> <span class="token punctuation">{</span>
  <span class="token function">baseMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/*...*/</span> <span class="token punctuation">}</span>
  <span class="token function">derivedMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/*...*/</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>多重实现</strong>：</p><ul><li>一个类可以实现多个接口，只需在 <code>implements</code> 后面列出所有接口名，用逗号分隔。</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">InterfaceA</span> <span class="token punctuation">{</span> <span class="token comment">/*...*/</span> <span class="token punctuation">}</span>
<span class="token keyword">interface</span> <span class="token class-name">InterfaceB</span> <span class="token punctuation">{</span> <span class="token comment">/*...*/</span> <span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">MyClass</span> <span class="token keyword">implements</span> <span class="token class-name">InterfaceA</span><span class="token punctuation">,</span> InterfaceB <span class="token punctuation">{</span>
  <span class="token comment">// 实现所有接口中定义的方法和属性</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h2 id="高级类型" tabindex="-1"><a class="header-anchor" href="#高级类型"><span>高级类型</span></a></h2><p>联合类型和交叉类型<br> 类型保护和区分类型<br> 类型断言<br> 映射类型<br> 条件类型</p><h2 id="泛型" tabindex="-1"><a class="header-anchor" href="#泛型"><span>泛型</span></a></h2><p>泛型介绍<br> 泛型函数、接口、类<br> 泛型约束<br> 使用泛型创建可重用的组件</p><h2 id="模块和命名空间" tabindex="-1"><a class="header-anchor" href="#模块和命名空间"><span>模块和命名空间</span></a></h2><p>模块的导入和导出<br> 使用命名空间组织代码<br> 使用外部模块</p><h2 id="装饰器" tabindex="-1"><a class="header-anchor" href="#装饰器"><span>装饰器</span></a></h2><p>装饰器基础<br> 类装饰器<br> 方法装饰器<br> 属性装饰器<br> 参数装饰器</p>`,27),c=[p];function o(i,l){return s(),a("div",null,c)}const d=n(e,[["render",o],["__file","ts2.html.vue"]]),k=JSON.parse('{"path":"/web/base/ts/ts2.html","title":"TypeScript进阶","lang":"en-US","frontmatter":{"order":10,"title":"TypeScript进阶","description":"类(Class)和面向对象 TypeScript 中的类是对 ECMAScript 6 (ES6) 类的一个超集，它在 ES6 类的基础上增加了一些额外的类型安全和功能特性。 类的定义和继承 TS中类的定义和继承等与ES6最大的区别就是TypeScript 允许在类的属性、方法参数和返回值上添加类型注解，提供静态类型检查 TypeScript 不支持从...","head":[["meta",{"property":"og:url","content":"https://x.app/notebook/web/base/ts/ts2.html"}],["meta",{"property":"og:site_name","content":"Notebook"}],["meta",{"property":"og:title","content":"TypeScript进阶"}],["meta",{"property":"og:description","content":"类(Class)和面向对象 TypeScript 中的类是对 ECMAScript 6 (ES6) 类的一个超集，它在 ES6 类的基础上增加了一些额外的类型安全和功能特性。 类的定义和继承 TS中类的定义和继承等与ES6最大的区别就是TypeScript 允许在类的属性、方法参数和返回值上添加类型注解，提供静态类型检查 TypeScript 不支持从..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-05-15T17:43:10.000Z"}],["meta",{"property":"article:author","content":"Mr.Topple"}],["meta",{"property":"article:modified_time","content":"2024-05-15T17:43:10.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"TypeScript进阶\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-05-15T17:43:10.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Topple\\",\\"url\\":\\"https://www.baidu.com\\"}]}"]]},"headers":[{"level":2,"title":"类(Class)和面向对象","slug":"类-class-和面向对象","link":"#类-class-和面向对象","children":[{"level":3,"title":"类的定义和继承","slug":"类的定义和继承","link":"#类的定义和继承","children":[]},{"level":3,"title":"访问修饰符","slug":"访问修饰符","link":"#访问修饰符","children":[]},{"level":3,"title":"抽象类和抽象方法","slug":"抽象类和抽象方法","link":"#抽象类和抽象方法","children":[]},{"level":3,"title":"接口实现","slug":"接口实现","link":"#接口实现","children":[]}]},{"level":2,"title":"高级类型","slug":"高级类型","link":"#高级类型","children":[]},{"level":2,"title":"泛型","slug":"泛型","link":"#泛型","children":[]},{"level":2,"title":"模块和命名空间","slug":"模块和命名空间","link":"#模块和命名空间","children":[]},{"level":2,"title":"装饰器","slug":"装饰器","link":"#装饰器","children":[]}],"git":{"createdTime":1715794990000,"updatedTime":1715794990000,"contributors":[{"name":"Neil","email":"msdrizzle@outlook.com","commits":1}]},"readingTime":{"minutes":3.26,"words":977},"filePathRelative":"web/base/ts/ts2.md","localizedDate":"May 15, 2024","autoDesc":true}');export{d as comp,k as data};
