import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as i,o as l,c as o,b as n,d as s,a as e,e as t}from"./app-Dx-37sW-.js";const c={},u=t(`<h2 id="一-项目环境准备" tabindex="-1"><a class="header-anchor" href="#一-项目环境准备"><span>一 项目环境准备</span></a></h2><h3 id="_1-训练环境准备" tabindex="-1"><a class="header-anchor" href="#_1-训练环境准备"><span>1. 训练环境准备</span></a></h3><p>基本环境要求：Anaconda的Python开发环境、N卡及相关机器学习相关软件</p><h3 id="_2-使用环境搭建" tabindex="-1"><a class="header-anchor" href="#_2-使用环境搭建"><span>2. 使用环境搭建</span></a></h3><p>不同于训练环境，使用环境不需要 cuda 相关的包, 操作前先配置好 conda 源，下载会更快</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>conda create <span class="token parameter variable">-n</span> yolov8 <span class="token assign-left variable">python</span><span class="token operator">=</span><span class="token number">3.10</span>
conda activate yolov8

pip <span class="token function">install</span> <span class="token parameter variable">-r</span> requirements.txt <span class="token parameter variable">-i</span> https://pypi.tuna.tsinghua.edu.cn/simple

pip uninstall opencv_python
pip <span class="token function">install</span> opencv-contrib-python

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>修改好角色配置文件，启动<code>Main.py</code>即可</p><h2 id="二-图像处理及目标检测" tabindex="-1"><a class="header-anchor" href="#二-图像处理及目标检测"><span>二 图像处理及目标检测</span></a></h2><h3 id="_1-获取窗口截图" tabindex="-1"><a class="header-anchor" href="#_1-获取窗口截图"><span>1. 获取窗口截图</span></a></h3><p>刚开始我们需要先获取供训练AI所需的图片，这里需要使用一些Python的第三方库：<br> pywin32, numpy, opencv-python</p><p>这里简单描述一下实现思路：先使用 pywin32 获取指定的窗口句柄，然后利用相关API获取到位图对象</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">import</span> win32con
<span class="token keyword">import</span> win32gui
<span class="token keyword">import</span> win32ui

hwnd <span class="token operator">=</span> win32gui<span class="token punctuation">.</span>FindWindow<span class="token punctuation">(</span><span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token string">&quot;xxx&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;窗口句柄：&quot;</span><span class="token punctuation">,</span> hwnd<span class="token punctuation">)</span>

<span class="token comment"># 游戏窗口基本大小信息</span>
left<span class="token punctuation">,</span> top<span class="token punctuation">,</span> right<span class="token punctuation">,</span> bot <span class="token operator">=</span> win32gui<span class="token punctuation">.</span>GetWindowRect<span class="token punctuation">(</span>hwnd<span class="token punctuation">)</span>
width <span class="token operator">=</span> right <span class="token operator">-</span> left
height <span class="token operator">=</span> bot <span class="token operator">-</span> top
<span class="token keyword">print</span><span class="token punctuation">(</span>width<span class="token punctuation">,</span> height<span class="token punctuation">)</span>

<span class="token comment"># 获取窗口设备上下文句柄</span>
target_dc <span class="token operator">=</span> win32gui<span class="token punctuation">.</span>GetWindowDC<span class="token punctuation">(</span>hwnd<span class="token punctuation">)</span>
<span class="token comment"># 将窗口设备上下文句柄转换为设备上下文对象</span>
img_dc <span class="token operator">=</span> win32ui<span class="token punctuation">.</span>CreateDCFromHandle<span class="token punctuation">(</span>target_dc<span class="token punctuation">)</span>
<span class="token comment"># 创建一个兼容的设备上下文对象</span>
mem_dc <span class="token operator">=</span> img_dc<span class="token punctuation">.</span>CreateCompatibleDC<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment"># 创建位图对象(未分配内存)</span>
picture_bitmap <span class="token operator">=</span> win32ui<span class="token punctuation">.</span>CreateBitmap<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment"># 为位图对象分配内存，并创建一个与原始设备上下文对象兼容的位图</span>
picture_bitmap<span class="token punctuation">.</span>CreateCompatibleBitmap<span class="token punctuation">(</span>img_dc<span class="token punctuation">,</span> width<span class="token punctuation">,</span> height<span class="token punctuation">)</span>

<span class="token comment"># 将位图对象选入到设备上下文对象、以便进行绘图操作</span>
mem_dc<span class="token punctuation">.</span>SelectObject<span class="token punctuation">(</span>picture_bitmap<span class="token punctuation">)</span>
<span class="token comment"># 将原始设备上下文中的内容复制到位图对象中</span>
mem_dc<span class="token punctuation">.</span>BitBlt<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>width<span class="token punctuation">,</span> height<span class="token punctuation">)</span><span class="token punctuation">,</span> img_dc<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> win32con<span class="token punctuation">.</span>SRCCOPY<span class="token punctuation">)</span>

<span class="token comment"># 此时位图对象picture_bitmap中存储了从窗口截取的图像</span>

<span class="token comment"># 保存位图对象到文件</span>
picture_bitmap<span class="token punctuation">.</span>SaveBitmapFile<span class="token punctuation">(</span>mem_dc<span class="token punctuation">,</span> <span class="token string">&quot;target.jpg&quot;</span><span class="token punctuation">)</span>

<span class="token comment"># 释放资源</span>
mem_dc<span class="token punctuation">.</span>DeleteDC<span class="token punctuation">(</span><span class="token punctuation">)</span>
win32gui<span class="token punctuation">.</span>DeleteObject<span class="token punctuation">(</span>picture_bitmap<span class="token punctuation">.</span>GetHandle<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
img_dc<span class="token punctuation">.</span>DeleteDC<span class="token punctuation">(</span><span class="token punctuation">)</span>
win32gui<span class="token punctuation">.</span>ReleaseDC<span class="token punctuation">(</span>hwnd<span class="token punctuation">,</span> target_dc<span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-视频转换为图片" tabindex="-1"><a class="header-anchor" href="#_2-视频转换为图片"><span>2. 视频转换为图片</span></a></h3><p>在后续使用labelImg标记图片共yolov训练时，需要使用大量图片，自己截图显然太慢了，除了小部分需要特定截图外，多数图片都可以通过录屏后转换为图片即可</p><p>通过 openCV 将视频转换为图片的示例：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">import</span> cv2
<span class="token keyword">import</span> os
<span class="token keyword">import</span> time

vidcap <span class="token operator">=</span> cv2<span class="token punctuation">.</span>VideoCapture<span class="token punctuation">(</span><span class="token string">r&#39;./video/107.mp4&#39;</span><span class="token punctuation">)</span>
tag <span class="token operator">=</span> <span class="token string">&quot;107&quot;</span>
success<span class="token punctuation">,</span> image <span class="token operator">=</span> vidcap<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>
count <span class="token operator">=</span> <span class="token number">0</span>
folder_count <span class="token operator">=</span> <span class="token number">0</span>
real_num <span class="token operator">=</span> <span class="token number">0</span>
localtime <span class="token operator">=</span> time<span class="token punctuation">.</span>localtime<span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment">#获取当前时间</span>
time <span class="token operator">=</span> time<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">&#39;%Y%m%d&#39;</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span>localtime<span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token comment">#把获取的时间转换成&quot;年月日格式”</span>
<span class="token keyword">while</span> success<span class="token punctuation">:</span>
    <span class="token comment"># 每xx帧保留一张图片</span>
    <span class="token keyword">if</span> count <span class="token operator">%</span> <span class="token number">50</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
        folder_name <span class="token operator">=</span> time <span class="token operator">+</span> tag <span class="token operator">+</span> <span class="token string">&quot;-%03d&quot;</span> <span class="token operator">%</span> folder_count
        <span class="token keyword">if</span> <span class="token keyword">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>folder_name<span class="token punctuation">)</span><span class="token punctuation">:</span>
            os<span class="token punctuation">.</span>makedirs<span class="token punctuation">(</span>folder_name<span class="token punctuation">)</span>
        cv2<span class="token punctuation">.</span>imwrite<span class="token punctuation">(</span>folder_name <span class="token operator">+</span> <span class="token string">&quot;/&quot;</span> <span class="token operator">+</span> time <span class="token operator">+</span> tag <span class="token operator">+</span> <span class="token string">&quot;%05d.jpg&quot;</span> <span class="token operator">%</span> count<span class="token punctuation">,</span> image<span class="token punctuation">)</span>  <span class="token comment"># save frame as JPEG file</span>
        <span class="token comment"># 每xxx张图片新建一个目录</span>
        real_num <span class="token operator">+=</span> <span class="token number">1</span>
        <span class="token keyword">if</span> real_num <span class="token operator">%</span> <span class="token number">500</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
            folder_count <span class="token operator">+=</span> <span class="token number">1</span>
    success<span class="token punctuation">,</span> image <span class="token operator">=</span> vidcap<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>
    count <span class="token operator">+=</span> <span class="token number">1</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;count: &quot;</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;real: &quot;</span><span class="token punctuation">,</span> real_num<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-labelimg图像标记" tabindex="-1"><a class="header-anchor" href="#_3-labelimg图像标记"><span>3. LabelImg图像标记</span></a></h3><p>先安装 labelimg :</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>pip <span class="token function">install</span> labelimg <span class="token parameter variable">-i</span> https://pypi.tuna.tsinghua.edu.cn/simple
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>直接在命令行启动即可：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>labelimg
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>常用快捷键：</p><ol><li>常用操作</li></ol><ul><li>创建矩形 w</li><li>保存 Ctrl + s</li><li>下一张 d</li><li>上一张 a</li><li>Ctrl + z：撤销上一次操作</li><li>Ctrl + y：重做上一次撤销操作</li></ul><ol start="2"><li>标注工具选择</li></ol><p>labelimg支持多种标注工具，包括矩形、圆形、线条和点等。使用快捷键可以方便地切换标注工具。</p><ul><li>r：选择矩形工具</li><li>c：选择圆形工具</li><li>l：选择线条工具</li><li>p：选择点工具</li></ul><ol start="3"><li>标注形状调整</li></ol><p>对于不同的标注形状，我们可以使用不同的快捷键进行调整。</p><ul><li>Alt + ↑：矩形或圆形高度增加</li><li>Alt + ↓：矩形或圆形高度减少</li><li>Alt + →：矩形或圆形宽度增加</li><li>Alt + ←：矩形或圆形宽度减少</li><li>w：线条宽度增加</li><li>s：线条宽度减少</li></ul><ol start="4"><li>标注边缘微调</li></ol><p>当我们标注完一个物体后，我们可以使用快捷键微调标注的边缘，以精确地覆盖物体。</p><ul><li>e：选中当前标注框，并进入微调模式</li><li>w：上移</li><li>s：下移</li><li>a：左移</li><li>d：右移</li><li>i：上调整大小</li><li>k：下调整大小</li><li>j：左调整大小</li><li>l：右调整大小</li></ul><h3 id="_4-yolov目标检测" tabindex="-1"><a class="header-anchor" href="#_4-yolov目标检测"><span>4. Yolov目标检测</span></a></h3><h2 id="三-串口通信及自动操作" tabindex="-1"><a class="header-anchor" href="#三-串口通信及自动操作"><span>三 串口通信及自动操作</span></a></h2><h3 id="_1-ch9329" tabindex="-1"><a class="header-anchor" href="#_1-ch9329"><span>1. CH9329</span></a></h3><p>CH9329 芯片是由沁恒生产的一种串口转HID键盘鼠标芯片。<br> 它可以将上位机发送的串口数据转换为标准的USB键鼠设备信号，<br> 并将其发送给下位机，从而实现硬件级别的键鼠模拟。</p><p>官网信息：</p>`,38),r={href:"https://special.wch.cn/zh_cn/USBChips/#/",target:"_blank",rel:"noopener noreferrer"},d={href:"https://www.wch.cn/products/CH9329.html",target:"_blank",rel:"noopener noreferrer"},m=n("p",null,"Github参考：",-1),k={href:"https://github.com/beijixiaohu/CH9329_COMM",target:"_blank",rel:"noopener noreferrer"},v=t(`<div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>pip <span class="token function">install</span> ch9329Comm <span class="token parameter variable">-i</span> https://pypi.tuna.tsinghua.edu.cn/simple
pip <span class="token function">install</span> pyserial  <span class="token parameter variable">-i</span> https://pypi.tuna.tsinghua.edu.cn/simple 
pip <span class="token function">install</span> pyautogui <span class="token parameter variable">-i</span> https://pypi.tuna.tsinghua.edu.cn/simple
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="四-相关特殊功能实现" tabindex="-1"><a class="header-anchor" href="#四-相关特殊功能实现"><span>四 相关特殊功能实现</span></a></h2>`,2);function h(b,g){const a=i("ExternalLinkIcon");return l(),o("div",null,[u,n("p",null,[n("a",r,[s("https://special.wch.cn/zh_cn/USBChips/#/"),e(a)])]),n("p",null,[n("a",d,[s("https://www.wch.cn/products/CH9329.html"),e(a)])]),m,n("p",null,[n("a",k,[s("https://github.com/beijixiaohu/CH9329_COMM"),e(a)])]),v])}const w=p(c,[["render",h],["__file","damb.html.vue"]]),f=JSON.parse('{"path":"/python/Project/damb.html","title":"DAMB","lang":"en-US","frontmatter":{"order":-5,"title":"DAMB","icon":"app","description":"一 项目环境准备 1. 训练环境准备 基本环境要求：Anaconda的Python开发环境、N卡及相关机器学习相关软件 2. 使用环境搭建 不同于训练环境，使用环境不需要 cuda 相关的包, 操作前先配置好 conda 源，下载会更快 修改好角色配置文件，启动Main.py即可 二 图像处理及目标检测 1. 获取窗口截图 刚开始我们需要先获取供训练A...","head":[["meta",{"property":"og:url","content":"https://x.app/notebook/python/Project/damb.html"}],["meta",{"property":"og:site_name","content":"Notebook"}],["meta",{"property":"og:title","content":"DAMB"}],["meta",{"property":"og:description","content":"一 项目环境准备 1. 训练环境准备 基本环境要求：Anaconda的Python开发环境、N卡及相关机器学习相关软件 2. 使用环境搭建 不同于训练环境，使用环境不需要 cuda 相关的包, 操作前先配置好 conda 源，下载会更快 修改好角色配置文件，启动Main.py即可 二 图像处理及目标检测 1. 获取窗口截图 刚开始我们需要先获取供训练A..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-06-03T14:20:15.000Z"}],["meta",{"property":"article:author","content":"Mr.Topple"}],["meta",{"property":"article:modified_time","content":"2024-06-03T14:20:15.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"DAMB\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-06-03T14:20:15.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Topple\\",\\"url\\":\\"https://www.baidu.com\\"}]}"]]},"headers":[{"level":2,"title":"一 项目环境准备","slug":"一-项目环境准备","link":"#一-项目环境准备","children":[{"level":3,"title":"1. 训练环境准备","slug":"_1-训练环境准备","link":"#_1-训练环境准备","children":[]},{"level":3,"title":"2. 使用环境搭建","slug":"_2-使用环境搭建","link":"#_2-使用环境搭建","children":[]}]},{"level":2,"title":"二 图像处理及目标检测","slug":"二-图像处理及目标检测","link":"#二-图像处理及目标检测","children":[{"level":3,"title":"1. 获取窗口截图","slug":"_1-获取窗口截图","link":"#_1-获取窗口截图","children":[]},{"level":3,"title":"2. 视频转换为图片","slug":"_2-视频转换为图片","link":"#_2-视频转换为图片","children":[]},{"level":3,"title":"3. LabelImg图像标记","slug":"_3-labelimg图像标记","link":"#_3-labelimg图像标记","children":[]},{"level":3,"title":"4. Yolov目标检测","slug":"_4-yolov目标检测","link":"#_4-yolov目标检测","children":[]}]},{"level":2,"title":"三 串口通信及自动操作","slug":"三-串口通信及自动操作","link":"#三-串口通信及自动操作","children":[{"level":3,"title":"1. CH9329","slug":"_1-ch9329","link":"#_1-ch9329","children":[]}]},{"level":2,"title":"四 相关特殊功能实现","slug":"四-相关特殊功能实现","link":"#四-相关特殊功能实现","children":[]}],"git":{"createdTime":1712140835000,"updatedTime":1717424415000,"contributors":[{"name":"Neil","email":"msdrizzle@outlook.com","commits":3}]},"readingTime":{"minutes":3.72,"words":1117},"filePathRelative":"python/Project/damb.md","localizedDate":"April 3, 2024","autoDesc":true}');export{w as comp,f as data};
