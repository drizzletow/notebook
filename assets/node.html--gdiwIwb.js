import{_ as d}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as l,o as r,c as u,b as n,d as s,a as e,w as t,e as a}from"./app-DwcluZE3.js";const m={},h=a('<h2 id="node-js和包管理器" tabindex="-1"><a class="header-anchor" href="#node-js和包管理器"><span>Node.js和包管理器</span></a></h2><h3 id="node的安装和使用" tabindex="-1"><a class="header-anchor" href="#node的安装和使用"><span>Node的安装和使用</span></a></h3><p>Node.js 是一个基于 Chrome V8 JavaScript 引擎构建的开源、跨平台的 JavaScript 运行环境。它允许在服务器端执行 JavaScript，使得开发者可以使用同一种语言编写前后端代码，Node.js 以其非阻塞 I/O 和事件驱动的架构而闻名，特别适合于构建高并发、高性能的实时应用、API 服务器、微服务、工具脚本等。</p><p><strong>特点与优势</strong>：</p><ol><li><strong>异步非阻塞I/O</strong>：Node.js采用事件循环和回调函数，能高效处理并发请求，特别适合I/O密集型应用。</li><li><strong>单线程模型</strong>：尽管JavaScript是单线程，但Node.js通过事件循环和异步处理，能够有效利用系统资源。</li><li><strong>庞大的生态系统</strong>：npm（Node Package Manager）是世界上最大的软件注册表，提供了海量的开源库和工具。</li><li><strong>跨平台</strong>：Node.js可在多种操作系统上运行，包括Windows、Linux和macOS。</li><li><strong>轻量级</strong>：相比传统的Java、PHP等服务器端技术，Node.js启动速度快，资源消耗少。</li></ol><h4 id="在-windows-或-macos-上安装" tabindex="-1"><a class="header-anchor" href="#在-windows-或-macos-上安装"><span>在 Windows 或 macOS 上安装</span></a></h4>',6),k=n("strong",null,"下载安装程序",-1),g={href:"https://nodejs.org/",target:"_blank",rel:"noopener noreferrer"},v=n("li",null,[n("strong",null,"安装"),s("：双击下载的安装程序，跟随向导完成安装过程。通常情况下，安装程序会自动添加 Node.js 到系统的 PATH 环境变量中，使你能在命令行直接使用 "),n("code",null,"node"),s(" 和 "),n("code",null,"npm"),s(" 命令。")],-1),b=n("h4",{id:"在-linux-上安装",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#在-linux-上安装"},[n("span",null,"在 Linux 上安装")])],-1),f=n("p",null,"对于 Ubuntu 或 Debian 系统，可以使用 apt 包管理器安装，对于 CentOS 或 RHEL，则使用 yum 或 dnf：",-1),j=n("div",{class:"language-bash line-numbers-mode","data-ext":"sh","data-title":"sh"},[n("pre",{class:"language-bash"},[n("code",null,[n("span",{class:"token function"},"sudo"),s(),n("span",{class:"token function"},"apt"),s(` update
`),n("span",{class:"token function"},"sudo"),s(),n("span",{class:"token function"},"apt"),s(),n("span",{class:"token function"},"install"),s(" nodejs "),n("span",{class:"token function"},"npm"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),x=n("div",{class:"language-bash line-numbers-mode","data-ext":"sh","data-title":"sh"},[n("pre",{class:"language-bash"},[n("code",null,[n("span",{class:"token function"},"sudo"),s(" yum "),n("span",{class:"token function"},"install"),s(" nodejs "),n("span",{class:"token function"},"npm"),s(`
`),n("span",{class:"token comment"},"# 或者对于较新的 CentOS/RHEL 使用 dnf"),s(`
`),n("span",{class:"token function"},"sudo"),s(" dnf "),n("span",{class:"token function"},"install"),s(" nodejs "),n("span",{class:"token function"},"npm"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),N=a(`<h4 id="使用-node-js运行-javascript-文件" tabindex="-1"><a class="header-anchor" href="#使用-node-js运行-javascript-文件"><span>使用 Node.js运行 JavaScript 文件</span></a></h4><ol><li><strong>创建文件</strong>：用文本编辑器创建一个名为 <code>app.js</code> 的文件。</li><li><strong>编写代码</strong>：在 <code>app.js</code> 中输入简单的 JavaScript 代码，例如：<div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Hello, Node.js!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><strong>运行代码</strong>：打开终端，进入该文件所在的目录，然后运行：<div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">node</span> app.js
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>你会在终端看到输出 “Hello, Node.js!”。</li></ol><h4 id="安装和使用-npm-包" tabindex="-1"><a class="header-anchor" href="#安装和使用-npm-包"><span>安装和使用 npm 包</span></a></h4><ol><li><strong>初始化项目</strong>：在项目根目录下运行 <code>npm init</code>，按照提示填写信息，生成 <code>package.json</code> 文件。</li><li><strong>安装包</strong>：例如安装 Express，运行：<div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> express
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><strong>在代码中使用</strong>：在 <code>app.js</code> 中引入并使用 Express：<div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;express&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&#39;Hello World!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Example app listening on port 3000!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><strong>运行服务器</strong>：再次通过 <code>node app.js</code> 启动服务器，然后在浏览器访问 <code>http://localhost:3000</code>，可以看到 &quot;Hello World!&quot;。</li></ol><h3 id="node包管理器-npm" tabindex="-1"><a class="header-anchor" href="#node包管理器-npm"><span>Node包管理器-npm</span></a></h3><p>npm（Node Package Manager） 是随 Node.js 一起安装的包管理器，它让开发者能够轻松地安装、管理和共享 Node.js 应用程序及其依赖关系。npm 提供了一个巨大的公开注册表，其中包含数百万个开源软件包，这些软件包可以通过简单的命令行操作进行安装和管理。</p><p><strong>npm 的特点</strong>：</p><ol><li><strong>包生态丰富</strong>：npm 是目前世界上最大的软件包生态系统，覆盖了从Web框架、数据库驱动到实用工具等各类库。</li><li><strong>依赖管理</strong>：自动处理依赖关系，确保安装的包及其依赖版本兼容，通过 <code>package.json</code> 和 <code>package-lock.json</code> 文件管理项目的依赖。</li><li><strong>脚本执行</strong>：支持定义和执行自定义脚本，便于自动化构建、测试和部署任务。</li><li><strong>版本控制</strong>：支持语义化版本控制，方便管理包的不同版本以及升级。</li><li><strong>全球镜像</strong>：除了官方源，还有众多地区性镜像源可用，比如淘宝 NPM 镜像，可提高下载速度。</li></ol><p>由于 Node.js 安装时会自动包含 npm，所以安装 Node.js 即安装了 npm。不过，有时候你可能需要更新 npm 到最新版本：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-g</span> <span class="token function">npm</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>为了加快下载速度，特别是对于中国用户，可以配置使用淘宝 NPM 镜像：</p><ol><li><p><strong>临时使用</strong>：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token parameter variable">--registry</span><span class="token operator">=</span>https://registry.npmmirror.com <span class="token function">install</span> <span class="token operator">&lt;</span>package-name<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p><strong>永久配置</strong>：</p><ul><li>在命令行设置（仅限当前用户）：<div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">npm</span> config <span class="token builtin class-name">set</span> registry https://registry.npmmirror.com
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li>修改全局配置文件（所有用户）：<br> 找到 npm 的配置文件（通常是 <code>~/.npmrc</code> 或 <code>/etc/npmrc</code>），添加或修改 <code>registry=https://registry.npmmirror.com</code>。<br> 即便使用nvm安装了多个版本的node，所有的版本都适用于此配置文件</li></ul></li></ol><p>npm（Node Package Manager）是 Node.js 的默认包管理器，用于安装、管理和发布 Node.js 应用的依赖包。以下是 npm 的一些基本使用方法和常用命令：</p><h4 id="初始化项目" tabindex="-1"><a class="header-anchor" href="#初始化项目"><span>初始化项目</span></a></h4><ul><li><p><code>npm init</code>: 创建一个新的 <code>package.json</code> 文件，引导你填写项目信息。使用 <code>-y</code> 跳过提示并接受默认值，快速创建：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">npm</span> init <span class="token parameter variable">-y</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><h4 id="安装依赖" tabindex="-1"><a class="header-anchor" href="#安装依赖"><span>安装依赖</span></a></h4><ul><li><p><code>npm install &lt;package&gt;</code>: 安装指定的包到当前项目的 <code>node_modules</code> 目录，并添加到 <code>package.json</code> 的 <code>dependencies</code> 或 <code>devDependencies</code>（使用 <code>--save-dev</code>）。</p></li><li><p><code>npm i</code> 或 <code>npm install</code>: 无参数时，安装 <code>package.json</code> 中列出的所有依赖。</p></li><li><p><code>npm install --save</code>: 安装的同时将包添加到 <code>dependencies</code>。</p></li><li><p><code>npm install --save-dev</code>: 安装开发依赖，添加到 <code>devDependencies</code>。</p></li></ul><h4 id="更新依赖" tabindex="-1"><a class="header-anchor" href="#更新依赖"><span>更新依赖</span></a></h4><ul><li><p><code>npm update</code>: 更新所有依赖到最新版本（不改变大版本号）。</p></li><li><p><code>npm update &lt;package&gt;</code>: 更新指定包到最新版本。</p></li></ul><h4 id="卸载依赖" tabindex="-1"><a class="header-anchor" href="#卸载依赖"><span>卸载依赖</span></a></h4><ul><li><code>npm uninstall &lt;package&gt;</code>: 卸载指定包，并从 <code>package.json</code> 中移除记录。</li></ul><h4 id="查看依赖" tabindex="-1"><a class="header-anchor" href="#查看依赖"><span>查看依赖</span></a></h4><ul><li><p><code>npm list</code>: 列出当前项目安装的所有依赖包。</p></li><li><p><code>npm list --global</code>: 查看全局安装的包。</p></li></ul><h4 id="脚本执行" tabindex="-1"><a class="header-anchor" href="#脚本执行"><span>脚本执行</span></a></h4><ul><li><code>npm run &lt;script&gt;</code>: 执行 <code>package.json</code> 中 <code>scripts</code> 部分定义的脚本。</li></ul><h4 id="发布包" tabindex="-1"><a class="header-anchor" href="#发布包"><span>发布包</span></a></h4><ul><li><p><code>npm login</code>: 登录 npm 账户。</p></li><li><p><code>npm publish</code>: 发布当前目录下的包到 npm 仓库。</p></li></ul><h4 id="其他常用命令" tabindex="-1"><a class="header-anchor" href="#其他常用命令"><span>其他常用命令</span></a></h4><ul><li><p><code>npm cache clean --force</code>: 清理 npm 缓存。</p></li><li><p><code>npm view &lt;package&gt; versions</code>: 查看包的所有版本。</p></li><li><p><code>npm view &lt;package&gt; dependencies</code>: 查看包的依赖。</p></li><li><p><code>npm outdated</code>: 检查哪些依赖包有新版本可用。</p></li><li><p><code>npm help &lt;command&gt;</code>: 获取特定命令的帮助信息。</p></li><li><p><code>npm search &lt;keyword&gt;</code>: 搜索 npm 仓库中的包。</p></li></ul><div class="hint-container tip"><p class="hint-container-title">nvm环境下的注意事项</p><p>在使用 nvm 管理多个 Node.js 版本时，每个版本的全局安装路径是独立的，这意味着全局安装的 npm 包（包括 <code>pnpm</code>）也是版本独立的。然而，全局的 <code>.npmrc</code> 配置文件通常是共用的，位于用户主目录下（例如，<code>~/.npmrc</code>），影响所有 Node.js 版本下的 npm 和 pnpm 的行为，除非在特定 Node.js 版本的环境变量中指定了不同的配置。局部 <code>.npmrc</code> 文件则按项目隔离，只影响当前项目的包管理操作。</p></div>`,30),y={class:"hint-container info"},_=n("p",{class:"hint-container-title"},"NPM 与 Maven 的区别",-1),w=n("p",null,[n("strong",null,"Maven"),s(" 主要用于 Java 生态系统，而 "),n("strong",null,"npm"),s(" 服务于 JavaScript 和 Node.js 生态系统。以下是它们之间的一些主要区别：")],-1),S=n("li",null,[n("strong",null,"语言与平台"),s("：Maven 是 Java 开发的标准构建工具，而 npm 专注于 JavaScript 和 Node.js。")],-1),O=n("li",null,[n("strong",null,"依赖管理"),s("：虽然两者都管理依赖，Maven 使用 pom.xml 文件定义依赖和构建过程，而 npm 使用 package.json 和 lock 文件。")],-1),I=n("li",null,[n("strong",null,"构建与生命周期"),s("：Maven 有一套固定的构建生命周期和阶段，比如 compile、test、package 等，而 npm 更侧重于包管理，构建过程灵活性更高，可通过自定义脚本来实现。")],-1),J=n("strong",null,"仓库",-1),M={href:"http://npmjs.com",target:"_blank",rel:"noopener noreferrer"},C=n("li",null,[n("strong",null,"脚本与插件"),s("：Maven 依赖于外部插件来扩展功能，npm 则通过 npm 脚本和直接在 JavaScript 中调用模块来实现自动化任务。")],-1),H=n("p",null,"总的来说，npm 更加灵活且轻量，特别是在前端和Node.js项目中，而 Maven 更适用于传统的Java后端项目，提供了更复杂的构建生命周期和标准化的项目结构。",-1),T=a(`<h3 id="node包管理器-pnpm" tabindex="-1"><a class="header-anchor" href="#node包管理器-pnpm"><span>Node包管理器-pnpm</span></a></h3><p>pnpm 是一种快速且高效的 Node.js 包管理器，它通过利用硬链接和归档文件来显著减少磁盘空间占用和提高安装速度。</p><p><strong>安装</strong>: pnpm 可以通过 npm 安装为全局包：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-g</span> <span class="token function">pnpm</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>或者使用其他平台特定的包管理器，如 Homebrew（macOS）或 Chocolatey/Scoop（Windows）。</p><p>pnpm 使用 npm 配置文件（<code>.npmrc</code>）来指定下载源，格式与 npm 相同。例如，更改为淘宝镜像源：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>registry=https://registry.npmmirror.com/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>pnpm 除了使用 <code>.npmrc</code> 外，还可以使用 <code>.pnpmfile.cjs</code> 进行更高级的配置，比如自定义生命周期脚本。</p><br><p><strong>pnpm常见命令的使用</strong>：</p><ul><li><strong>清理缓存</strong>：<code>pnpm cache clean</code> 或 <code>pnpm cache clear</code></li><li><strong>查看版本</strong>：<code>pnpm -v</code> 或 <code>pnpm version</code></li></ul><h4 id="初始化项目-1" tabindex="-1"><a class="header-anchor" href="#初始化项目-1"><span>初始化项目</span></a></h4><p>进入你的项目目录，使用 <code>pnpm init</code> 来创建一个新的 <code>package.json</code> 文件，这个命令与 npm 的 <code>npm init</code> 类似：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">pnpm</span> init
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在交互式提示中填写项目信息，或者使用 <code>-y</code> 参数跳过提示，接受默认设置：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">pnpm</span> init <span class="token parameter variable">-y</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="安装依赖-1" tabindex="-1"><a class="header-anchor" href="#安装依赖-1"><span>安装依赖</span></a></h4><p>安装项目所需的依赖。<code>pnpm install</code> 会安装 <code>package.json</code> 文件中列出的所有依赖，同时也会读取 <code>package-lock.json</code> 或 <code>pnpm-lock.yaml</code> 文件来保证依赖的精确版本安装：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">pnpm</span> <span class="token function">install</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>安装单个依赖包，并将其添加到 <code>dependencies</code> 或 <code>devDependencies</code>：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">pnpm</span> <span class="token function">add</span> <span class="token operator">&lt;</span>package-name<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>安装依赖到开发环境（即添加到 <code>devDependencies</code>）：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">pnpm</span> <span class="token function">add</span> --save-dev <span class="token operator">&lt;</span>package-name<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="更新依赖-1" tabindex="-1"><a class="header-anchor" href="#更新依赖-1"><span>更新依赖</span></a></h4><p>更新所有依赖到最新兼容版本：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">pnpm</span> update
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>更新特定包到最新版本：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">pnpm</span> update <span class="token operator">&lt;</span>package-name<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="卸载依赖-1" tabindex="-1"><a class="header-anchor" href="#卸载依赖-1"><span>卸载依赖</span></a></h4><p>从项目中移除依赖包，并从 <code>package.json</code> 中删除相应的条目：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">pnpm</span> remove <span class="token operator">&lt;</span>package-name<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="查看依赖-1" tabindex="-1"><a class="header-anchor" href="#查看依赖-1"><span>查看依赖</span></a></h4><p>查看已安装的依赖：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">pnpm</span> <span class="token function">ls</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>查看具体包的依赖树：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">pnpm</span> <span class="token function">ls</span> <span class="token operator">&lt;</span>package-name<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="执行脚本" tabindex="-1"><a class="header-anchor" href="#执行脚本"><span>执行脚本</span></a></h4><p>运行 <code>package.json</code> 中定义的脚本，类似于 npm：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">pnpm</span> run <span class="token operator">&lt;</span>script-name<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>pnpm 使用 <code>pnpm-lock.yaml</code> 文件来锁定依赖版本和描述依赖关系图，这与 npm 使用的 <code>package-lock.json</code> 类似，但格式和机制有所不同。</p><div class="hint-container tip"><p class="hint-container-title">在 nvm 多版本 Node.js 环境下的配置设置影响</p><ul><li><strong>pnpm依赖于npm</strong>: 在使用nvm切换版本后，如果对应版本下没有安装过pnpm，需要重新安装，每个node版本都对应一个独立的pnpm</li><li><strong>共享全局 .npmrc</strong>：所有通过 nvm 管理的 Node.js 版本共享一个全局的 <code>.npmrc</code> 文件，因此在此文件中设置的下载源适用于所有版本的 pnpm。</li><li><strong>局部 .npmrc</strong>：每个项目可以有自己独立的 <code>.npmrc</code> 文件，覆盖全局设置，这种配置是隔离的，不随 Node.js 版本变化。</li><li><strong>环境变量</strong>：通过环境变量（如 <code>NPM_CONFIG_REGISTRY</code>）设置的下载源也会影响所有 Node.js 版本下的 pnpm。</li></ul></div><div class="hint-container info"><p class="hint-container-title">npm与pnpm</p><p><strong>npm与pnpm 的共同点</strong></p><ul><li><strong>包管理目的相同</strong>：两者都用于管理 Node.js 项目的依赖，支持安装、更新、卸载包等操作。</li><li><strong>使用 .npmrc 配置文件</strong>：都使用 <code>.npmrc</code> 文件来配置包源和其他设置。</li></ul><p><strong>npm与pnpm的区别</strong></p><ul><li><strong>依赖管理方式</strong>：pnpm 采用“内容可寻址的文件系统”，避免了重复的依赖包，通过硬链接和快照机制节省磁盘空间和提高安装速度，而 npm 通常会为每个依赖包的每个版本复制所有文件到项目目录。</li><li><strong>下载源配置</strong>：虽然两者都可以通过 <code>.npmrc</code> 配置下载源，但 pnpm 在处理依赖时的优化机制使得它在某些场景下能更高效地使用这些源。</li><li><strong>配置文件扩展</strong>：pnpm 支持 <code>.pnpmfile.cjs</code>，提供比 npm 更多的自定义选项。</li></ul></div><h3 id="node包管理器-yarn" tabindex="-1"><a class="header-anchor" href="#node包管理器-yarn"><span>Node包管理器-yarn</span></a></h3><p>Yarn 是 Facebook 推出的一个快速、可靠、安全的依赖管理工具，与 npm 类似，用于 Node.js 项目中管理依赖包。下面是 Yarn 的一些基本使用方法和常用命令：</p><h4 id="安装-yarn" tabindex="-1"><a class="header-anchor" href="#安装-yarn"><span>安装 Yarn</span></a></h4>`,45),q=a(`<li><p><strong>通过 npm 安装</strong>:</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-g</span> <span class="token function">yarn</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li>`,1),P=n("strong",null,"官方推荐安装方法",-1),Y={href:"https://yarnpkg.com",target:"_blank",rel:"noopener noreferrer"},E=n("p",null,"通常包括使用 curl 或者 wget 下载安装脚本直接安装。",-1),L=a(`<h4 id="初始化项目-2" tabindex="-1"><a class="header-anchor" href="#初始化项目-2"><span>初始化项目</span></a></h4><ul><li><code>yarn init</code>: 生成一个新的 <code>package.json</code> 文件，与 <code>npm init</code> 类似，通过交互式提问收集项目信息。</li></ul><h4 id="安装依赖-2" tabindex="-1"><a class="header-anchor" href="#安装依赖-2"><span>安装依赖</span></a></h4><ul><li><code>yarn add &lt;package&gt;</code>: 安装并添加依赖到 <code>dependencies</code>。</li><li><code>yarn add &lt;package&gt; --dev</code>: 添加到 <code>devDependencies</code>。</li><li><code>yarn add &lt;package&gt;@&lt;version&gt;</code>: 安装特定版本的包。</li><li><code>yarn</code>: 或 <code>yarn install</code>, 安装 <code>package.json</code> 中列出的所有依赖。</li></ul><h4 id="更新依赖-2" tabindex="-1"><a class="header-anchor" href="#更新依赖-2"><span>更新依赖</span></a></h4><ul><li><code>yarn upgrade &lt;package&gt;</code>: 更新指定包。</li><li><code>yarn upgrade &lt;package&gt;@&lt;version&gt;</code>: 更新到指定版本。</li><li><code>yarn upgrade-interactive</code>: 交互式地升级依赖。</li></ul><h4 id="移除依赖" tabindex="-1"><a class="header-anchor" href="#移除依赖"><span>移除依赖</span></a></h4><ul><li><code>yarn remove &lt;package&gt;</code>: 从项目中移除依赖并更新 <code>package.json</code>。</li></ul><h4 id="查看依赖-2" tabindex="-1"><a class="header-anchor" href="#查看依赖-2"><span>查看依赖</span></a></h4><ul><li><code>yarn list</code>: 列出所有已安装的依赖。</li><li><code>yarn info &lt;package&gt;</code>: 显示包的详细信息。</li></ul><h4 id="运行脚本" tabindex="-1"><a class="header-anchor" href="#运行脚本"><span>运行脚本</span></a></h4><ul><li><code>yarn run &lt;script&gt;</code>: 执行 <code>package.json</code> 中定义的脚本。</li></ul><h4 id="配置文件" tabindex="-1"><a class="header-anchor" href="#配置文件"><span>配置文件</span></a></h4><ul><li>Yarn 使用 <code>yarn.lock</code> 文件来锁定依赖版本，确保每次安装时获得相同的依赖树。</li></ul><div class="hint-container info"><p class="hint-container-title">Yarn 与 npm 和 pnpm 的异同</p><p><strong>相同点</strong>:</p><ul><li>都是 Node.js 的包管理工具，用于解决项目依赖管理问题。</li><li>支持 <code>package.json</code> 文件来管理依赖信息。</li><li>都可以通过命令行安装、更新和管理依赖。</li></ul><p><strong>不同点</strong>:</p><ul><li><p><strong>性能与安装速度</strong>:</p><ul><li>Yarn 使用并行下载和缓存机制，提高安装速度；npm 在较新版本中也有所改进，但Yarn在并发下载上仍有一定的优势。</li><li>pnpm 通过共享依赖和快照机制进一步优化了速度和磁盘使用。</li></ul></li><li><p><strong>依赖管理</strong>:</p><ul><li>Yarn 使用 <code>yarn.lock</code> 文件来锁定依赖，保证一致性；npm 使用 <code>package-lock.json</code> 达到类似效果。</li><li>pnpm 使用 <code>pnpm-lock.yaml</code>，并实现了一种更高效的依赖管理策略，避免了重复的包副本。</li></ul></li><li><p><strong>安全性</strong>:</p><ul><li>Yarn 和 npm 都有检查依赖安全性的功能，如 Yarn 的 <code>yarn audit</code> 类似于 npm 的 <code>npm audit</code>。</li><li>pnpm 同样关注安全性，但具体实现和报告可能有所不同。</li></ul></li><li><p><strong>配置与兼容性</strong>:</p><ul><li>Yarn 和 npm 都支持 <code>.npmrc</code> 配置文件，具有较高的兼容性。</li><li>pnpm 除了支持 <code>.npmrc</code>，还提供了额外的 <code>.pnpmfile.cjs</code> 自定义配置。</li></ul></li></ul></div><p>总的来说，Yarn、npm 和 pnpm 都是强大的包管理工具，各有侧重。Yarn 强调速度和一致性，npm 是 Node.js 官方默认工具，生态丰富，而 pnpm 在空间效率和一致性方面表现出色。选择哪一个取决于个人或团队的具体需求和偏好。</p><h2 id="node-js基础及应用" tabindex="-1"><a class="header-anchor" href="#node-js基础及应用"><span>Node.js基础及应用</span></a></h2><h3 id="事件驱动和非阻塞i-o" tabindex="-1"><a class="header-anchor" href="#事件驱动和非阻塞i-o"><span>事件驱动和非阻塞I/O</span></a></h3><p><strong>Node.js 的事件驱动模型</strong></p><p>Node.js 的核心特性之一是其事件驱动的架构，这一模型主要依赖于事件循环（Event Loop）和回调函数（Callback）。事件驱动编程允许程序响应外部事件，而不是仅仅按照预定的顺序执行代码。在 Node.js 中，这一机制使得它能够高效地处理大量的并发请求，特别适合构建高吞吐量的网络应用。</p><ol><li><p><strong>事件循环</strong>：Node.js 的事件循环不断地检查是否有待处理的事件（比如网络请求、文件读写完成等），如果有，它就会取出对应的事件及其回调函数并执行。这种机制让 Node.js 能够在单个线程中处理多个并发任务，无需为每个请求创建新的线程或进程。</p></li><li><p><strong>回调函数</strong>：当某个事件发生时，与之关联的回调函数会被放入事件队列等待执行。一旦当前正在执行的代码（包括之前的回调）完成，事件循环就会从队列中取出下一个回调执行。</p></li><li><p><strong>异步I/O</strong>：Node.js 中的大多数I/O操作（如文件读写、网络通信）都是异步的，意味着它们不会阻塞主线程，而是在操作完成后通过回调通知事件循环。</p></li></ol><p><strong>非阻塞I/O</strong></p><p>非阻塞I/O是事件驱动模型的基础。在传统的阻塞I/O模型中，当一个请求发出后，程序会暂停当前执行，直到请求完成并返回结果，这期间不能处理其他任务。而Node.js采用的非阻塞I/O则允许程序在等待I/O操作完成的同时继续执行其他任务。</p><ol><li><p><strong>如何提高性能</strong>：非阻塞I/O避免了线程在等待I/O操作时的空闲，充分利用CPU时间。在高并发场景下，由于Node.js使用单线程处理请求，没有线程上下文切换的开销，可以处理更多的并发连接，减少了内存消耗，提升了整体性能。</p></li><li><p><strong>libuv</strong>：Node.js 的底层依赖于 libuv 库来实现跨平台的异步I/O和事件循环机制。libuv负责管理一个线程池来处理实际的I/O操作，而主线程（事件循环所在的线程）则专注于执行JavaScript代码和调度事件。</p></li></ol><p><strong>事件循环处理并发请求</strong></p><p>当Node.js接收到多个请求时，它并不会为每个请求分配一个单独的线程，而是将请求的处理逻辑（主要是I/O操作）注册为事件监听器，并立即返回，继续处理下一个请求。当某个I/O操作完成时，事件循环会触发相应的事件，执行与之关联的回调函数，完成请求处理。因此，即使在处理大量并发请求时，Node.js也能保持低延迟和高吞吐量，因为它总是准备好去处理下一个事件，而不是等待某个操作完成。</p><p>总结来说，尽管Node.js在处理I/O时可能会在LibUV层使用线程池，但这与为每个请求或任务创建新线程的概念不同。Node.js通过异步I/O和事件循环机制，在单个主线程中实现了对多个并发任务的高效处理，减少了线程创建和切换的开销，提高了应用的整体性能。</p><h3 id="node核心模块的使用" tabindex="-1"><a class="header-anchor" href="#node核心模块的使用"><span>Node核心模块的使用</span></a></h3><p>Node.js 的模块系统是其设计的核心特性之一，它允许开发者将代码组织成独立的模块，便于复用和维护。Node.js 的模块系统遵循“CommonJS”规范，这使得每个模块都有自己的作用域，避免了全局变量的污染。</p><h4 id="node-js-模块的分类" tabindex="-1"><a class="header-anchor" href="#node-js-模块的分类"><span>Node.js 模块的分类</span></a></h4><ol><li><p><strong>核心模块</strong>：这些模块是Node.js的一部分，直接由Node.js提供，无需安装即可使用。例如<code>fs</code>（文件系统）、<code>http</code>（HTTP服务器）、<code>path</code>（路径处理）、<code>os</code>（操作系统相关的实用功能）等。</p></li><li><p><strong>文件模块</strong>：当导入一个以<code>.js</code>、<code>.json</code>或编译后的<code>.node</code>（C++扩展）结尾的本地文件时，Node.js会将其视为文件模块。文件模块的路径可以是相对的或绝对的。</p></li><li><p><strong>第三方模块</strong>：这些是通过npm（Node.js包管理器）安装的外部库。使用前需要先通过<code>npm install</code>命令安装。</p></li></ol><h4 id="核心模块的使用示例" tabindex="-1"><a class="header-anchor" href="#核心模块的使用示例"><span>核心模块的使用示例</span></a></h4><h4 id="示例1-使用fs模块读取文件" tabindex="-1"><a class="header-anchor" href="#示例1-使用fs模块读取文件"><span>示例1：使用<code>fs</code>模块读取文件</span></a></h4><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 引入fs模块</span>
<span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 异步读取文件</span>
fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">&#39;example.txt&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;utf8&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="示例2-使用http模块创建一个简单的http服务器" tabindex="-1"><a class="header-anchor" href="#示例2-使用http模块创建一个简单的http服务器"><span>示例2：使用<code>http</code>模块创建一个简单的HTTP服务器</span></a></h4><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;http&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 根据req.url判断客户端请求的路径，返回不同的响应内容</span>
<span class="token keyword">const</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 可以使用 req.method 判断请求方式，进行不同的处理</span>
  <span class="token comment">// if (req.method === &#39;POST&#39; &amp;&amp; req.url === &#39;/submit&#39;) { ... }  </span>
  res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">&#39;Content-Type&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;text/plain; charset=utf-8&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>url <span class="token operator">===</span> <span class="token string">&#39;/&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    res<span class="token punctuation">.</span>statusCode <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>
    res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">&#39;欢迎来到首页\\n&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>url <span class="token operator">===</span> <span class="token string">&#39;/about&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    res<span class="token punctuation">.</span>statusCode <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>
    res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">&#39;关于我们的信息...\\n&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    res<span class="token punctuation">.</span>statusCode <span class="token operator">=</span> <span class="token number">404</span><span class="token punctuation">;</span>
    res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">&#39;页面未找到\\n&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Server running on port 3000&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="模块的导出与导入" tabindex="-1"><a class="header-anchor" href="#模块的导出与导入"><span>模块的导出与导入</span></a></h4><ul><li><strong>导出模块成员</strong>：在模块文件中，使用<code>module.exports</code>或<code>exports</code>对象来导出函数、对象或变量。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// exampleModule.js</span>
<span class="token keyword">const</span> greeting <span class="token operator">=</span> <span class="token string">&#39;Hello, module!&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token function-variable function">sayHello</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>greeting<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">!</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span> sayHello <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>导入模块成员</strong>：在其他文件中，使用<code>require()</code>函数导入模块，并访问其导出的成员。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// app.js</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> sayHello <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./exampleModule&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token string">&#39;User&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: Hello, module!, User!</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Node.js的模块系统通过清晰的导入导出机制，使得代码组织结构更加合理，易于管理和维护。核心模块作为Node.js的一部分，提供了处理文件、网络、系统交互等基本功能，是构建Node.js应用的基石。通过理解和有效利用模块系统，开发者能够构建出高效、可维护的服务器端应用程序。</p>`,42);function D(U,V){const o=l("ExternalLinkIcon"),i=l("Tabs");return r(),u("div",null,[h,n("ol",null,[n("li",null,[k,s("：访问 Node.js 官方网站 "),n("a",g,[s("https://nodejs.org/"),e(o)]),s("，根据你的操作系统下载对应的安装包。")]),v]),b,f,e(i,{id:"60",data:[{id:"Ubuntu 或 Debian"},{id:"CentOS 或 RHEL"}],active:0,"tab-id":"Linux"},{title0:t(({value:p,isActive:c})=>[s("Ubuntu 或 Debian")]),title1:t(({value:p,isActive:c})=>[s("CentOS 或 RHEL")]),tab0:t(({value:p,isActive:c})=>[j]),tab1:t(({value:p,isActive:c})=>[x]),_:1}),N,n("div",y,[_,w,n("ol",null,[S,O,I,n("li",null,[J,s("：Maven 默认使用 Maven Central，而 npm 使用 "),n("a",M,[s("npmjs.com"),e(o)]),s("，两者都有广泛的社区支持和企业级镜像解决方案。")]),C]),H]),T,n("ul",null,[q,n("li",null,[n("p",null,[P,s("（因地区网络环境差异，请访问 "),n("a",Y,[s("Yarn官网"),e(o)]),s(" 获取最新安装指令）:")]),E])]),L])}const W=d(m,[["render",D],["__file","node.html.vue"]]),z=JSON.parse('{"path":"/web/base/js/node.html","title":"Node运行环境","lang":"en-US","frontmatter":{"order":-1,"title":"Node运行环境","description":"Node.js和包管理器 Node的安装和使用 Node.js 是一个基于 Chrome V8 JavaScript 引擎构建的开源、跨平台的 JavaScript 运行环境。它允许在服务器端执行 JavaScript，使得开发者可以使用同一种语言编写前后端代码，Node.js 以其非阻塞 I/O 和事件驱动的架构而闻名，特别适合于构建高并发、高性能的...","head":[["meta",{"property":"og:url","content":"https://x.app/notebook/web/base/js/node.html"}],["meta",{"property":"og:site_name","content":"Notebook"}],["meta",{"property":"og:title","content":"Node运行环境"}],["meta",{"property":"og:description","content":"Node.js和包管理器 Node的安装和使用 Node.js 是一个基于 Chrome V8 JavaScript 引擎构建的开源、跨平台的 JavaScript 运行环境。它允许在服务器端执行 JavaScript，使得开发者可以使用同一种语言编写前后端代码，Node.js 以其非阻塞 I/O 和事件驱动的架构而闻名，特别适合于构建高并发、高性能的..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-05-15T17:43:10.000Z"}],["meta",{"property":"article:author","content":"Mr.Topple"}],["meta",{"property":"article:modified_time","content":"2024-05-15T17:43:10.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Node运行环境\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-05-15T17:43:10.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Topple\\",\\"url\\":\\"https://www.baidu.com\\"}]}"]]},"headers":[{"level":2,"title":"Node.js和包管理器","slug":"node-js和包管理器","link":"#node-js和包管理器","children":[{"level":3,"title":"Node的安装和使用","slug":"node的安装和使用","link":"#node的安装和使用","children":[]},{"level":3,"title":"Node包管理器-npm","slug":"node包管理器-npm","link":"#node包管理器-npm","children":[]},{"level":3,"title":"Node包管理器-pnpm","slug":"node包管理器-pnpm","link":"#node包管理器-pnpm","children":[]},{"level":3,"title":"Node包管理器-yarn","slug":"node包管理器-yarn","link":"#node包管理器-yarn","children":[]}]},{"level":2,"title":"Node.js基础及应用","slug":"node-js基础及应用","link":"#node-js基础及应用","children":[{"level":3,"title":"事件驱动和非阻塞I/O","slug":"事件驱动和非阻塞i-o","link":"#事件驱动和非阻塞i-o","children":[]},{"level":3,"title":"Node核心模块的使用","slug":"node核心模块的使用","link":"#node核心模块的使用","children":[]}]}],"git":{"createdTime":1715794990000,"updatedTime":1715794990000,"contributors":[{"name":"Neil","email":"msdrizzle@outlook.com","commits":1}]},"readingTime":{"minutes":17.17,"words":5151},"filePathRelative":"web/base/js/node.md","localizedDate":"May 15, 2024","autoDesc":true}');export{W as comp,z as data};
