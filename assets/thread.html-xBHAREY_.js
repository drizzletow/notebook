import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as c,o as l,c as i,b as n,d as s,a as p,w as e,e as a}from"./app-B05z7mYU.js";const u="/notebook/assets/image-20220223201814461-DgT7B55O.png",d="/notebook/assets/image-20220223212210867-BoMaQPMo.png",r="/notebook/assets/image-20220223210052497-B6Vd6DxB.png",k="/notebook/assets/image-20211019020845359-DY-8gVn8.png",v="/notebook/assets/image-20211019023243206-51pUsGsp.png",m={},b=a(`<h2 id="并发编程基础概念" tabindex="-1"><a class="header-anchor" href="#并发编程基础概念"><span>并发编程基础概念</span></a></h2><h3 id="并发与并行" tabindex="-1"><a class="header-anchor" href="#并发与并行"><span>并发与并行</span></a></h3><p><strong>并发（Concurrency）</strong>:</p><p>并发是指两个或多个任务在<strong>同一时间段内</strong>开始、执行和完成，但不意味着它们在物理上同时执行。在单核处理器上，通过<mark>时间片轮转</mark>，CPU快速地在多个任务之间切换，给人一种同时执行的错觉。而在多核处理器上，虽然可以有任务真正并行执行，但并发更侧重于描述任务的调度和执行方式，而非强调物理上的同时性。</p><p>并发的关键在于任务的交替执行，即使在单个处理器上也能实现，通过操作系统的线程调度机制来管理。并发编程的目标是提升程序的响应速度和整体吞吐量，使程序能够在执行耗时操作（如I/O操作）时继续处理其他任务。</p><p><strong>并行（Parallelism）</strong>:</p><p>并行则是指两个或多个任务在<strong>同一时刻</strong>真正同时执行。这是硬件级别的同时性，要求系统具有多个处理器（或多核CPU）或多个执行单元。在并行计算中，每个任务分配到单独的处理器上，可以同时进行计算，从而显著提高程序执行的速度。</p><p>并行处理依赖于硬件资源，没有足够的处理器核心，任务就无法真正并行执行。并行编程通常用于科学计算、大数据处理、机器学习等领域，这些场景下，任务可以被自然地分解成独立的部分，各部分可以同时处理。</p><div class="hint-container info"><p class="hint-container-title">区分并发与并行的区别</p><ul><li><strong>执行环境</strong>：并发可以在单核和多核处理器上实现，而并行则需要多核或多处理器环境来发挥效果。</li><li><strong>执行方式</strong>：并发是任务在时间上的重叠，通过任务切换达到“同时”处理的效果；并行则是任务在空间上的同时执行，多个任务真正同时进行。</li><li><strong>目标</strong>：并发主要是为了提高程序的响应性和效率，通过合理安排任务执行顺序和资源利用来达到目的；并行则是为了加速计算密集型任务的完成，通过增加计算资源的使用来直接缩短任务执行时间。</li></ul></div><ul><li><p>串行：一个任务接一个任务按顺序执行</p></li><li><p>并发：指两个或多个事件在同一个时间段内发生</p></li><li><p>并行：指两个或多个事件在同一时刻发生（同时发生）</p></li></ul><h3 id="同步和异步" tabindex="-1"><a class="header-anchor" href="#同步和异步"><span>同步和异步</span></a></h3><p><strong>同步（Synchronous）</strong>：</p><p>同步执行模式下，程序按照既定的顺序执行，每个操作必须等待前一个操作完成才能开始。这意味着，在执行某个可能耗时的操作（如I/O操作、网络通信）时，当前线程会阻塞，直到该操作完成。同步执行保证了操作的顺序性和一致性，但可能会降低程序的响应速度和并发处理能力。</p><p><strong>常见实现</strong>：</p><ul><li><strong>synchronized关键字</strong>：用于方法或代码块，确保同一时刻只有一个线程可以访问被保护的资源，防止数据竞争条件。</li><li><strong>Lock接口</strong>：提供比<code>synchronized</code>更灵活的锁定机制，如可中断锁、定时锁等。</li></ul><p><strong>使用场景</strong>：适用于需要严格顺序执行的任务，或者当资源访问需要高度一致性和原子性时，如银行账户转账、库存管理等。</p><p><strong>异步（Asynchronous）</strong>：</p><p>异步执行模式允许程序在发起一个操作后，不等待其完成即可继续执行后续代码，通过回调、Future/Promise、CompletableFuture等机制在操作完成后处理结果。异步执行可以充分利用多核处理器，提高程序的并发处理能力和响应速度，避免了线程的长时间阻塞。</p><p><strong>常见实现</strong>：</p><ul><li><strong>Future与CompletableFuture</strong>：Future代表一个异步计算的结果，可以获取计算状态和结果。CompletableFuture是Java 8引入的，提供了更丰富的链式调用和组合异步操作的能力。</li><li><strong>回调（Callback）</strong>：通过传递一个函数作为参数，当异步操作完成时自动调用该函数处理结果。</li><li><strong>事件驱动和观察者模式</strong>：通过注册事件监听器或观察者，在特定事件发生时通知并处理。</li></ul><p><strong>使用场景</strong>：适用于需要高性能、高并发处理的场景，如Web服务中的请求处理、大量数据的后台处理、文件上传下载等。</p><div class="hint-container info"><p class="hint-container-title">同步与异步的区别</p><ul><li><strong>执行流程</strong>：同步是线性的，按顺序执行；异步是非阻塞的，可以同时进行多个操作。</li><li><strong>响应性</strong>：异步提高程序响应速度，因为它不等待耗时操作完成；同步可能导致UI冻结或响应延迟。</li><li><strong>复杂度</strong>：异步编程通常比同步编程更为复杂，需要处理回调地狱、线程同步等问题。</li><li><strong>资源利用</strong>：异步能更好地利用多核CPU，提高资源使用率；同步则可能造成资源闲置。</li></ul></div><h3 id="线程与进程" tabindex="-1"><a class="header-anchor" href="#线程与进程"><span>线程与进程</span></a></h3><p><strong>进程（Process）</strong>：</p><p>进程是一个独立的执行环境，拥有独立的内存空间、系统资源（如打开的文件句柄、网络连接等），并由操作系统进行调度。每个进程都包含一个或多个线程，它是<mark>操作系统进行资源分配和调度的基本单位</mark>。一个程序至少对应一个进程，当运行一个Java程序时，JVM实例就是一个进程。</p><p><strong>进程特点</strong>：</p><ul><li>进程之间内存空间相互隔离。</li><li>进程创建开销大，包括分配内存空间、加载程序代码等。</li><li>进程间通信（IPC）通常较复杂，需要使用管道、套接字、共享内存等机制。</li></ul><p><strong>线程（Thread）</strong>：</p><p>线程是进程内的一个执行单元，是<mark>CPU调度的基本单位</mark>。线程共享所属进程的内存空间和资源，使得线程间的通信变得简单高效。在Java中，可以通过继承<code>Thread</code>类或实现<code>Runnable</code>接口来创建线程。</p><p><strong>线程特点</strong>：</p><ul><li>线程轻量级，创建和销毁成本相对较低。</li><li>同一进程内的线程共享该进程的资源，包括内存、文件句柄等。</li><li>线程间可以直接访问共享数据，因此需要适当的同步机制（如<code>synchronized</code>关键字、Locks等）来防止数据不一致问题。</li><li>线程的状态包括新建（New）、可运行（Runnable）、阻塞（Blocked）、等待（Waiting）、超时等待（Timed Waiting）和终止（Terminated）。</li></ul><div class="hint-container info"><p class="hint-container-title">Info</p><p>Java中线程的优势主要包括以下几点：</p><ol><li><p><strong>提高响应速度和用户体验</strong>：多线程允许程序在执行耗时操作（如I/O操作）的同时处理其他任务，从而减少阻塞，提高程序的响应速度和用户界面的交互性。</p></li><li><p><strong>增强并发性</strong>：多线程能够并行执行多个任务，充分利用多核处理器的计算能力，提高程序的并发执行能力，处理更多并发请求。</p></li><li><p><strong>资源利用率</strong>：通过多线程，可以更有效地利用CPU资源，减少CPU空闲时间，同时在进行I/O密集型任务时，可以利用线程切换执行其他任务，保持CPU忙碌。</p></li><li><p><strong>模块化和简化编程</strong>：多线程可以把复杂的任务分解为多个独立运行的子任务，便于模块化编程，使得程序结构更加清晰，易于理解和维护。</p></li><li><p><strong>提高系统稳定性和容错性</strong>：线程间的独立性意味着单个线程的异常不会直接影响整个程序，增强了系统的稳定性和健壮性。</p></li></ol><p>然而，使用线程也伴随着一定的成本和缺点：</p><ol><li><p><strong>上下文切换开销</strong>：操作系统在不同线程间切换执行时需要保存和恢复线程的上下文信息，这会消耗CPU时间。</p></li><li><p><strong>资源争抢和同步问题</strong>：多个线程共享资源可能导致竞态条件、死锁和数据不一致性，解决这些问题需要额外的同步机制，如锁、同步块等，这会增加编程复杂度和潜在的性能损耗。</p></li><li><p><strong>线程创建和销毁的开销</strong>：频繁创建和销毁线程需要消耗系统资源，尤其是对于短生命周期的线程。</p></li><li><p><strong>死锁和活锁风险</strong>：不当的线程同步可能导致死锁，即两个或多个线程互相等待对方释放资源而永久阻塞。另外，活锁是指线程由于逻辑问题持续重复尝试而无法进展的情况。</p></li><li><p><strong>调试和维护困难</strong>：多线程程序的调试和维护相对单线程程序更加复杂，因为线程间的交互和数据共享可能导致非确定性的行为。</p></li></ol><p>虽然Java中的多线程编程能够带来显著的性能和响应性提升，但同时也需要谨慎设计，以避免引入潜在的并发问题和性能瓶颈。合理利用线程池等技术可以减轻一些管理线程的负担，优化资源利用。</p></div><p><strong>进程和线程的简单总结</strong>：</p><ul><li>进程： 是指一个在内存中运行的应用程序，每个进程都有一个独立的内存空间。一个进程最少有一个线程</li><li>线程： 是进程中的一个执行路径，共享一个内存空间，线程之间可以自由切换，并发执行。<br> 线程实际上是在进程基础之上的进一步划分，一个进程启动之后，里面的若干执行路径又可以划分成若干个线程</li></ul><h3 id="管程-monitor" tabindex="-1"><a class="header-anchor" href="#管程-monitor"><span>管程(Monitor)</span></a></h3><p>“Monitor”这个词来源于操作系统理论，最早是由C.A.R Hoare在1974年提出的。在计算机科学中，“Monitor”被翻译为“管程”，这一术语源自英文“Monitor”和“Monitor Procedures”，意在强调其管理和协调并发访问的职责，以及其作为一种同步机制的高级抽象概念。</p><div class="hint-container tip"><p class="hint-container-title">Tips</p><ul><li><p>在Java中，每个对象实例都隐含了一个基于其对象头信息的Monitor（监视器）机制，用于实现对对象的线程安全访问控制。包括了锁的获取与释放、线程的阻塞与唤醒等功能。</p></li><li><p><code>Monitor</code>这个概念在计算机科学和Java并发编程领域中，通常可以称为 <mark>“管程”（从英文直译，强调其管理、协调并发访问的职能）</mark> 或 <mark>“监视器”（强调其监控、控制访问的功能）</mark></p></li></ul></div><p>每个Java对象实例都有一个 <strong>对象头（Object Header）</strong>。对象头是Java对象在内存中的存储布局的一部分，它包含了对象的重要元数据，对于理解对象的身份、类型信息、锁定状态以及垃圾收集等至关重要。对象头通常包含以下两部分信息：</p><ol><li><p><strong>Mark Word（标记字）</strong>：这个部分存储了对象自身的运行时数据，例如：</p><ul><li>哈希码（HashCode）</li><li>GC分代年龄（用于垃圾回收算法）</li><li>锁状态标志（表明对象是否被锁定，以及使用的是哪种锁，如轻量级锁、重量级锁、偏向锁等）</li><li>线程持有的锁信息</li><li>偏向线程ID和偏向时间戳（偏向锁相关）</li><li>其他状态信息如对象是否处于未初始化状态等</li></ul></li><li><p><strong>类型指针（Class Pointer / Type Metadata Address）</strong>：这个部分指向了对象的类元数据，即对象所属的类的信息，位于方法区（Metaspace）中。虚拟机通过这个指针来确定该对象属于哪个类的实例。对于数组对象，这个部分还会包括数组的长度信息。</p></li></ol><p>对象头的具体结构（如Mark Word的大小、是否包含类型指针等）可能会根据Java虚拟机（JVM）的实现细节、运行时环境（如32位或64位系统）以及是否开启压缩指针等配置有所不同。</p><h3 id="线程调度方式" tabindex="-1"><a class="header-anchor" href="#线程调度方式"><span>线程调度方式</span></a></h3><p>由于CPU的计算频率非常高，每秒计算数十亿次，因此可以将CPU的时间从毫秒的维度进行分段，每一小段叫作一个CPU时间片。</p><ul><li><p>目前操作系统中主流的线程调度方式是：基于CPU时间片方式进行线程调度</p></li><li><p>线程调度：给线程分配CPU时间片的过程。</p></li></ul><div class="hint-container info"><p class="hint-container-title">线程调度分类</p><ul><li><p>协同式线程调度：线程的执行时间是由线程本身决定. 该线程的内容执行完后,报告操作系统进行切换.</p></li><li><p>分时调度模型：所有线程轮流使用 CPU 的使用权，平均分配每个线程占用 CPU 的时间片</p></li><li><p>抢占式调度模型：优先让优先级高的线程使用 CPU，如果线程的优先级相同，那么会随机选择一 个，优先级高的线程获取的 CPU 时间片相对多一些</p></li></ul></div><p><strong>Java使用的是抢占式调度模型</strong> ：由于目前大部分操作系统都是使用抢占式调度模型进行线程调度，Java的线程管理和调度是委托给操作系统完成的，与之相对应，Java的线程调度也是使用抢占式调度模型</p><div class="hint-container tip"><p class="hint-container-title">随机性</p><p>假如计算机只有一个 CPU，那么 CPU 在某一个时刻只能执行一条指令，线程只有得到CPU时间片，也就是使用权，才可以执行指令。即多线程程序的执行是有随机性，因为谁抢到CPU的使用权是不一 定的</p></div><h3 id="线程优先级" tabindex="-1"><a class="header-anchor" href="#线程优先级"><span>线程优先级</span></a></h3><p>操作系统的线程优先级: （静态优先级+动态优先级）</p><ul><li>静态优先级:固定值</li><li>动态优先级:正在的线程会随着执行时间的延长优先级会降低, 正在等待的线程的优先级会随着等待时间的延长,优先级会升高</li></ul><div class="hint-container info"><p class="hint-container-title">java中的优先级到底为什么没有用？</p><p><strong>java中优先级是静态优先级, 只是向操作系统建议</strong>，我们在java语言中设置的线程优先级，它仅仅只能被看做是一种&quot;建议&quot;(对操作系统的建议)，实际上，操作系统本身，有它自己的一套线程优先级 (静态优先级 + 动态优先级)，故而即使设置了线程优先级，也不能保证执行顺序！</p><p><strong>java官方说明</strong>： 线程优先级并非完全没有用，我们Thread的优先级，它具有统计意义，总的来说，高优先级的线程占用的cpu执行时间多一点，低优先级线程，占用cpu执行时间，短一点 （也就是说，优先级高最多意味着抢到执行权的可能性高一点点而已！）</p></div><p>Java为线程类提供了10个优先级，优先级可以用整数1-10表示，超过范围会抛出异常，主线程默认优先级为5</p><p><strong>Thread类的优先级常量</strong>：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// The minimum priority that a thread can have.</span>
<span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token constant">MIN_PRIORITY</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    

<span class="token comment">// The default priority that is assigned to a thread.</span>
<span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token constant">NORM_PRIORITY</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>  

<span class="token comment">// The maximum priority that a thread can have.</span>
<span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token constant">MAX_PRIORITY</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>   
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>优先级相关的方法：</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>public int getPriority()</td><td>获取线程优先级的方法</td></tr><tr><td>public void setPriority(int newPriority)</td><td>设置线程优先级的方法</td></tr></tbody></table><h2 id="线程的创建与启动" tabindex="-1"><a class="header-anchor" href="#线程的创建与启动"><span>线程的创建与启动</span></a></h2><h3 id="继承thread" tabindex="-1"><a class="header-anchor" href="#继承thread"><span>继承Thread</span></a></h3><p>继承Thread实现多线程的步骤：</p><ul><li><p>定义一个继承Thread的类， 并重写<code>run()</code>方法</p></li><li><p>创建这个类的对象， 通过<code>start()</code>方法启动线程</p></li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;——&quot;</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadDemo1</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">MyThread</span> th1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">MyThread</span> th2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        th1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        th2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>run()</code>：用来封装被线程执行的代码</li><li><code>start()</code>：启动线程；然后由JVM调用此线程的run()方法</li></ul><div class="hint-container info"><p class="hint-container-title">run方法跟start方法的区别</p><ul><li><p>run方法根本就没有开辟新的执行路径,还是按照顺序执行的，直接调用run方法,相当于普通成员方法调用</p></li><li><p>start方法才是真正的去创建线程</p></li><li><p>只有run方法当中的代码才会执行在子线程中,我们要把我们的代码写到run方法中,并且启动的时候一定是start方法</p></li></ul></div><p>【注意】</p><ul><li><p>同1个线程,能否启动多次?<br> 不可以, 同一个线程多次启动会报异常(<code>java.lang.IllegalThreadStateException</code>)</p></li><li><p>​谁才代表一个真正的线程? Thread类的对象及其子类的对象才代表1个线程</p></li></ul><h3 id="实现runnable" tabindex="-1"><a class="header-anchor" href="#实现runnable"><span>实现Runnable</span></a></h3><p>通过实现Runnable接口实现多线程的步骤：</p><ul><li>定义一个实现Runnable接口的类， 并在类中重写<code>run()</code>方法</li><li>创建该类的对象，创建Thread类的对象，把该类的对象作为Thread类的构造方法参数</li><li>通过<code>start()</code> 启动线程</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyRunnable</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;——&quot;</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadDemo2</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">MyRunnable</span> task <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyRunnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Thread</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>task<span class="token punctuation">,</span> <span class="token string">&quot;T1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Thread</span> t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>task<span class="token punctuation">,</span> <span class="token string">&quot;T2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实现Runnable相对于继承Thread有如下优势：</p><ul><li>可以实现多个接口，避免单继承带来的局限性</li><li>通过先创建任务，然后创建线程的方式来实现，任务与线程分离，提高了程序的健壮性</li><li>线程池接收Runnable类型的任务，但不接收Thread类型的对象</li></ul><p><strong>可以通过匿名内部类的方式实现</strong>：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>上述案例的Lambda表达式</strong>：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="实现callable" tabindex="-1"><a class="header-anchor" href="#实现callable"><span>实现Callable</span></a></h3><p><code>Callable</code>是一个具有泛型参数的接口，位于<code>java.util.concurrent</code>包中，与<code>Runnable</code>接口类似，但提供了更强大的功能。<code>Callable</code>定义了一个<code>call()</code>方法，该方法可以返回一个结果，并且可以抛出异常，这使得它比仅仅执行工作的<code>Runnable</code>更加灵活和强大。Thread类和Runnable接口都不允许声明检查型异常，也不能定义返回值</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token class-name">V</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">;</span>   <span class="token comment">// \`&lt;V&gt;\`: 泛型参数，表示\`call()\`方法返回的结果类型</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当需要执行一个可能产生结果或抛出异常的任务时，可以使用<code>Callable</code>。</p><div class="hint-container tip"><p class="hint-container-title">Runnable 与 Callable的不同点</p><p>（1）Callable规定的方法是call()，而Runnable规定的方法是run()。</p><p>（2）Callable的任务执行后可返回值，而Runnable的任务是不能返回值的。</p><p>（3）call()方法可抛出异常，而run()方法是不能抛出异常的。</p><p>（4）运行Callable任务可拿到一个Future对象。</p></div><p>Callable使用步骤：</p><ol><li>编写类实现Callable接口 , 实现call方法</li><li>创建FutureTask对象 , 并传入第一步编写的Callable类对象</li><li>通过Thread, 启动线程</li></ol><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyCallable</span> <span class="token keyword">implements</span> <span class="token class-name">Callable</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            sum <span class="token operator">+=</span> i<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> sum<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CallableDemo</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ExecutionException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        <span class="token class-name">MyCallable</span> myCallable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyCallable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 执行Callable的任务，需要用FutureTask来接收运算结果</span>
        <span class="token class-name">FutureTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> futureTask <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FutureTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>myCallable<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>futureTask<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 接收线程运算后的结果（调用FutureTask对象的get()方法阻塞性地获得并发线程的执行结果）</span>
        <span class="token class-name">Integer</span> result <span class="token operator">=</span> futureTask<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container info"><p class="hint-container-title">Future接口</p><p><code>Future</code>代表一个异步计算的结果。它提供了检查计算是否完成、获取计算结果以及取消计算的方法。<code>Future</code>接口允许你处理异步操作的结果，即使操作尚未完成。它通常与<code>ExecutorService</code>结合使用，通过<code>submit(Callable)</code>方法提交任务后返回一个<code>Future</code>实例。</p><ul><li><strong>常用方法</strong>: <ul><li><code>boolean cancel(boolean mayInterruptIfRunning)</code>: 尝试取消任务的执行。</li><li><code>boolean isCancelled()</code>: 判断任务是否已经被取消。</li><li><code>boolean isDone()</code>: 判断任务是否已经完成。</li><li><code>V get() throws InterruptedException, ExecutionException</code>: 等待计算完成并返回结果，可能会抛出异常。</li><li><code>V get(long timeout, TimeUnit unit) throws InterruptedException, ExecutionException, TimeoutException</code>: 等待指定时间获取结果，超时则抛出异常。</li></ul></li></ul></div><h2 id="线程状态及其转换" tabindex="-1"><a class="header-anchor" href="#线程状态及其转换"><span>线程状态及其转换</span></a></h2><h3 id="线程状态的划分" tabindex="-1"><a class="header-anchor" href="#线程状态的划分"><span>线程状态的划分</span></a></h3><p>关于Java线程状态的数量，常见的说法确实有两种：五种和六种。这种差异主要来源于对线程状态的分类和解释方式不同。根据不同的教材、文章或讨论，可能会看到对Java线程状态数量的不同表述。</p><p><strong>五种状态的划分</strong>通常包括：</p><ol><li><strong>New（新建）</strong>: 线程被创建但尚未启动。</li><li><strong>Ready（可运行/就绪）</strong>: 线程已经调用了<code>start()</code>方法，可以被线程调度器选中运行，但尚未获得CPU时间片。</li><li><strong>Running（运行）</strong>: 线程正在执行，获得了CPU时间片。</li><li><strong>Blocked（阻塞）</strong>: 线程因为某些原因（如等待锁、I/O操作等）而暂停执行，等待某个条件满足后才能继续。</li><li><strong>Dead（死亡）</strong>: 线程执行完毕或因异常终止。</li></ol><p>这种划分方式中，“Ready”状态有时被看作是线程等待CPU调度的时间，而一旦获得CPU，就直接进入“Running”状态，这种划分<mark>没有明确区分操作系统层面的就绪状态和运行状态</mark>。</p><p>五种状态的划分其实更像<mark>操作系统的线程状态</mark>， 但是操作系统通常没有 <code>New</code> 这一线程状态</p><p>五种状态线程在各种状态之间转换（这只是帮助理解的状态模型，并非真正的java线程状态）：</p><figure><img src="`+u+`" alt="五种状态线程及其转换" tabindex="0" loading="lazy"><figcaption>五种状态线程及其转换</figcaption></figure><p>六种状态的划分更细致，特别是区分了<code>等待状态</code>和<code>超时等待状态</code></p><p><strong>六种状态的划分</strong>则通常包括：</p><ol><li><strong>New（新建）</strong>: 同上。</li><li><strong>Runnable（可运行）</strong>: 这个状态合并了操作系统层面的就绪（ready）和运行（running）状态，表示线程已经调用了<code>start()</code>方法，可以被CPU调度执行，但不一定正在执行（可能在就绪队列中等待）。</li><li><strong>Blocked（阻塞）</strong>: 同上。</li><li><strong>Waiting（等待）</strong>: 线程因调用<code>wait()</code>、<code>join()</code>无参方法或<code>LockSupport.park()</code>等而等待特定条件，需要其他线程唤醒。</li><li><strong>Timed Waiting（超时等待）</strong>: 线程因调用带超时参数的方法如<code>sleep(long millis)</code>、<code>wait(long timeout)</code>、<code>join(long millis)</code>或<code>LockSupport.parkNanos(long nanos)</code>而等待，超时后自动返回。</li><li><strong>Terminated（终止）</strong>: 同Dead（死亡）。</li></ol><p>操作系统的线程状态划分通常更为基础和通用，而Java作为高级语言，其线程模型在操作系统的线程状态基础上进行了抽象和扩展，以适应高级语言的特性和需求。</p><div class="hint-container info"><p class="hint-container-title">Java线程状态对应的操作系统线程状态</p><table><thead><tr><th>Java线程状态</th><th>操作系统(Linux)线程状态</th><th>描述</th></tr></thead><tbody><tr><td>New (新建)</td><td>-</td><td>线程被创建，但尚未调用start()方法启动</td></tr><tr><td>Runnable (可运行)</td><td>Ready + Running</td><td>线程可以被CPU调度执行，包括就绪和正在执行两种子状态，Java不区分</td></tr><tr><td>Blocked (阻塞)</td><td>Blocked</td><td>等待获取监视器锁或执行I/O操作等，无法继续执行</td></tr><tr><td>Waiting (等待)</td><td>Blocked</td><td>等待其他线程执行特定操作（如notify()）唤醒，与Blocked状态共享物理状态</td></tr><tr><td>Timed Waiting (超时等待)</td><td>Blocked</td><td>与Waiting类似，但有超时限制，超时后自动返回Runnable状态</td></tr><tr><td>Terminated (终止)</td><td>Terminated/Dead</td><td>线程执行结束或因异常终止</td></tr></tbody></table></div><p>Java线程的状态控制（如进入阻塞、等待、休眠状态等）是由Java虚拟机(JVM)来管理的，而Java线程的创建、调度（线程的实际CPU执行时间分配）和销毁 则是由操作系统内核的线程调度器来完成。这种分工使得Java能够提供跨平台的线程管理，同时利用操作系统的底层能力进行高效的线程执行。</p><h3 id="六种线程状态" tabindex="-1"><a class="header-anchor" href="#六种线程状态"><span>六种线程状态</span></a></h3><p>实际上Java中线程的生命周期分为6种状态。Thread类有一个实例属性和一个实例方法专门用于保存和获取线程的状态。其中，用于保存线程Thread实例状态的实例属性为threadStatus，以下为Thread类相关属性：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// Java thread status for tools,  initialized to indicate thread &#39;not yet started&#39;</span>
<span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">int</span> threadStatus <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

<span class="token comment">// Returns the state of this thread.</span>
<span class="token keyword">public</span> <span class="token class-name">State</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// get current thread state</span>
    <span class="token keyword">return</span> sun<span class="token punctuation">.</span>misc<span class="token punctuation">.</span><span class="token constant">VM</span><span class="token punctuation">.</span><span class="token function">toThreadState</span><span class="token punctuation">(</span>threadStatus<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Thread.State是一个内部枚举类，定义了6个枚举常量，分别代表Java线程的6种状态，具体如下：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">State</span> <span class="token punctuation">{</span>
    <span class="token constant">NEW</span><span class="token punctuation">,</span>             <span class="token comment">// 新建</span>
    <span class="token constant">RUNNABLE</span><span class="token punctuation">,</span>        <span class="token comment">// 可执行（包含操作系统的就绪、运行两种状态）</span>
    <span class="token constant">BLOCKED</span><span class="token punctuation">,</span>         <span class="token comment">// 阻塞</span>
    <span class="token constant">WAITING</span><span class="token punctuation">,</span>         <span class="token comment">// 等待</span>
    <span class="token constant">TIMED_WAITING</span><span class="token punctuation">,</span>   <span class="token comment">// 限时等待</span>
    <span class="token constant">TERMINATED</span><span class="token punctuation">;</span>      <span class="token comment">// 终止</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>六种线程状态详解</strong>：</p><ol><li><p><strong>新建（New）</strong>:<br> 当使用<code>new</code>关键字创建一个<code>Thread</code>对象时，线程处于新建状态。此时，线程尚未启动，也不具备执行资格。Java源码对NEW状态的说明是：创建成功但是没有调用start()方法启动的Thread线程实例都处于NEW状态。</p></li><li><p><strong>可运行（Runnable）</strong>:<br> Java把 <code>Ready（就绪）</code>和<code>Running（执行）</code>两种状态合并为一种状态：<code>RUNNABLE（可执行）</code>状态。当Java线程的Thread实例的start()方法被调用后，操作系统中的对应线程进入的并不是运行状态，而是就绪状态，而Java线程并没有这个就绪状态。JVM的线程状态与其幕后的操作系统线程状态之间的转换关系简化后如图：</p></li></ol><figure><img src="`+d+'" alt="Runnable" tabindex="0" loading="lazy"><figcaption>Runnable</figcaption></figure><div class="hint-container info"><p class="hint-container-title">前线程进入就绪状态（Runnable）的条件</p><ol><li><p><strong>线程创建后调用<code>start()</code>方法</strong>：当使用<code>new</code>关键字创建一个线程对象后，调用该线程的<code>start()</code>方法，线程将从新建状态进入就绪状态。</p></li><li><p><strong>线程从阻塞状态恢复</strong>：如果线程之前因为以下原因之一被阻塞，当这些条件解除时，线程会进入就绪状态：</p><ul><li><strong>等待的I/O操作完成</strong>：例如，读写文件、网络通信等I/O操作完成。</li><li><strong><code>sleep()</code>方法结束</strong>：线程执行<code>Thread.sleep(long millis)</code>后，经过指定的毫秒数，线程结束休眠。</li><li><strong>等待的监视器锁（锁）获得</strong>：如果线程因为试图获取一个对象的锁而被阻塞（例如进入<code>synchronized</code>块），当持有锁的线程释放锁后，等待的线程可能变为就绪。</li><li><strong><code>join()</code>方法等待的线程结束</strong>：如果线程调用了另一个线程的<code>join()</code>方法等待其结束，当被加入的线程执行完毕，等待的线程变为就绪。</li><li><strong>等待条件满足或被<code>notify()</code>/<code>notifyAll()</code>唤醒</strong>：如果线程在等待条件变量（使用<code>Object.wait()</code>），当其他线程调用同一对象的<code>notify()</code>或<code>notifyAll()</code>方法，或等待的条件被满足，线程变为就绪。</li></ul></li><li><p><strong><code>yield()</code>方法的使用</strong>：虽然不常见，但如果一个运行中的线程调用了<code>Thread.yield()</code>方法，它可能会从运行状态转为就绪状态，给同优先级的其他线程执行的机会，但这取决于JVM的具体实现和当前系统的线程调度策略。</p></li></ol></div><ol start="3"><li><p><strong>阻塞（Blocked）</strong>:<br> 当线程在执行过程中遇到某些条件而不能继续执行时，会进入阻塞状态。阻塞的原因可能包括：</p><ul><li><strong>等待获取监视器锁</strong>：试图进入同步代码块或方法，但锁被其他线程持有。</li><li><strong>等待I/O操作</strong>：如读写文件、网络通信等。</li><li><strong>等待唤醒</strong>：调用了<code>Object.wait()</code>方法，等待其他线程的<code>notify()</code>或<code>notifyAll()</code>。</li></ul></li><li><p><strong>等待（Waiting）</strong>:<br> 线程因调用了以下方法之一而进入等待状态，直到其他线程执行特定操作才会返回到可运行状态：</p><ul><li><code>Object.wait()</code>：等待其他线程调用此对象的<code>notify()</code>或<code>notifyAll()</code>方法。</li><li><code>Thread.join()</code>：等待调用此方法的线程结束。</li><li><code>LockSupport.park()</code>：除非收到许可，否则一直等待。<br> 对应的唤醒方式为：<code>LockSupport.unpark(Thread)</code></li></ul></li></ol><figure><img src="'+r+'" alt="WAITING" tabindex="0" loading="lazy"><figcaption>WAITING</figcaption></figure><ol start="5"><li><p><strong>超时等待（Timed Waiting）</strong>:<br> 与等待状态相似，但线程在指定的时间后会自动返回到可运行状态，无论是否收到了预期的通知或事件。进入此状态的方法包括但不限于：</p><ul><li><code>Thread.sleep(long millis)</code>：使当前正在执行的线程暂停执行指定的毫秒数。</li><li><code>Object.wait(long timeout)</code>：带有超时参数的等待。</li><li><code>Thread.join(long millis)</code>：带有超时参数的线程加入。</li><li><code>LockSupport.parkNanos(long nanos)</code>：等待纳秒数后返回。</li></ul></li><li><p><strong>终止（Terminated）</strong>:<br> 当线程的<code>run()</code>方法正常执行完毕，或者因异常退出，线程进入终止状态，不再具有执行资格。</p></li></ol><h3 id="线程控制api" tabindex="-1"><a class="header-anchor" href="#线程控制api"><span>线程控制API</span></a></h3>',114),g=a(`<li><p><code>sleep()</code> ：释放资源，自己休眠，让其他线程先执行。</p><p>sleep的作用是让目前正在执行的线程休眠，让CPU去执行其他的任务。从线程状态来说，就是从执行状态变成限时阻塞状态</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// sleep 案例</span>
<span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 休眠半秒</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>`,1),h=n("code",null,"join()",-1),y=a("<p><code>join()</code>方法属于<code>Thread</code>类，主要有以下几种形式：</p><ol><li><p><code>void join()</code>: 让当前线程等待调用此方法的线程执行完毕。如果没有指定等待时间，当前线程将一直等待，直到目标线程执行结束。</p></li><li><p><code>void join(long millis)</code>: 让当前线程最多等待指定的毫秒数，等待目标线程结束。如果目标线程在这段时间内结束，则当前线程继续执行；如果超时时间到达目标线程仍未结束，则当前线程不再等待。</p></li><li><p><code>void join(long millis, int nanos)</code>: 同上，但除了毫秒外还可以指定纳秒级别的等待时间，进一步精确控制等待时长。</p></li></ol>",2),w=a(`<div class="hint-container info"><p class="hint-container-title">使用场景</p><ol><li><p><strong>按序执行任务</strong>：当需要确保某些任务按特定顺序执行时，可以使用<code>join()</code>方法。例如，数据处理任务必须在数据收集任务完成后开始。</p></li><li><p><strong>同步控制</strong>：在多线程环境中，有时需要确保一个线程的输出作为另一个线程的输入，这时可以利用<code>join()</code>来同步这两个线程。</p></li><li><p><strong>资源清理</strong>：在程序结束前，可能需要等待所有工作线程完成，确保资源正确释放或数据一致，此时可以通过在主线程中调用各个工作线程的<code>join()</code>来实现。</p></li></ol></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// join 案例</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JoinDemo</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        <span class="token class-name">MyThread</span> thread0 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">MyThread</span> thread1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">MyThread</span> thread2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        thread0<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        thread0<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//Thread-0 执行完毕后，Thread-1和Thread-2才能执行</span>
        thread1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        thread2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+k+`" alt="join demo" tabindex="0" loading="lazy"><figcaption>join demo</figcaption></figure><ul><li><p><code>yield()</code>： 暂停当前正在执行的线程对象，并执行其他线程 （<strong>注意该方法并不能保证执行顺序</strong>）</p><ul><li><p>线程的yield（让步）操作的作用是让目前正在执行的线程放弃当前的执行，让出CPU的执行权限，使得CPU去执行其他的线程。</p></li><li><p>处于让步状态的JVM层面的线程状态仍然是RUNNABLE状态，<strong>它不会阻塞该线程，但是该线程所对应的操作系统层面的线程从状态上来说会从执行状态变成就绪状态</strong>。</p></li><li><p>线程在yield时，线程放弃和重占CPU的时间是不确定的，可能是刚刚放弃CPU，马上又获得CPU执行权限，重新开始执行。</p></li></ul><div class="hint-container info"><p class="hint-container-title">Thread.yeid()方法有以下特点：</p><p>（1）yield仅能使一个线程从运行状态转到就绪状态，而不是阻塞状态。</p><p>（2）yield不能保证使得当前正在运行的线程迅速转换到就绪状态。</p><p>（3）即使完成了迅速切换，系统通过线程调度机制从所有就绪线程中挑选下一个执行线程时，就绪的线程有可能被选中，也有可能不被选中，其调度的过程受到其他因素（如优先级）的影响。</p></div></li></ul><h3 id="线程中断机制" tabindex="-1"><a class="header-anchor" href="#线程中断机制"><span>线程中断机制</span></a></h3><p>Java中的线程中断机制是一种协作机制，它允许一个线程向另一个线程发出中断请求，但并不直接停止目标线程的执行。目标线程需要主动检查中断状态并做出相应处理。下面是详细的解释、使用场景、注意事项及代码示例。</p><ol><li><p><strong>中断标志</strong>：每个Java线程都有一个中断状态位，可以通过<code>Thread.interrupt()</code>方法设置这个标志为true。被中断的线程可以调用<code>Thread.isInterrupted()</code>检查中断状态，或者在抛出中断异常（如在<code>sleep()</code>, <code>wait()</code>, <code>join()</code>等阻塞方法中）时自动清除中断状态。</p></li><li><p><strong>响应中断</strong>：中断机制的设计原则是“合作而非强迫”。被中断的线程需要主动检查中断状态并作出响应，如结束执行、清理资源或抛出自定义的中断异常等。</p></li></ol><div class="hint-container tip"><p class="hint-container-title">使用场景和注意事项</p><h4 id="使用场景" tabindex="-1"><a class="header-anchor" href="#使用场景"><span>使用场景</span></a></h4><ol><li><strong>取消任务</strong>：用户请求取消一个耗时操作时，可以通过中断线程来通知执行任务的线程。</li><li><strong>超时处理</strong>：在执行可能阻塞的操作时设置超时，超时后中断线程。</li><li><strong>关闭服务</strong>：在服务关闭时，中断所有工作线程，促使它们尽快完成并退出。</li></ol><h4 id="注意事项" tabindex="-1"><a class="header-anchor" href="#注意事项"><span>注意事项</span></a></h4><ol><li><strong>检查中断状态</strong>：线程应定期检查中断状态，特别是在循环或可能阻塞的方法调用前后。</li><li><strong>清理资源</strong>：在响应中断时，确保释放所有资源，避免资源泄露。</li><li><strong>中断状态的清除</strong>：调用阻塞方法（如<code>Thread.sleep()</code>）时，如果线程被中断，这些方法会抛出<code>InterruptedException</code>并清除中断状态。需要在捕获异常后重新中断线程，以便上层代码知晓中断的发生。</li><li><strong>不要忽视中断</strong>：忽略中断请求可能会导致程序难以控制或资源无法释放。</li></ol></div><p>以下是一个简单的线程中断示例，展示如何发起中断请求和响应中断：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InterruptExample</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        <span class="token class-name">Thread</span> workerThread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isInterrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// 模拟工作</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Working...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">try</span> <span class="token punctuation">{</span>
                    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 模拟耗时操作，可被中断</span>
                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment">// 捕获中断异常，中断标志会被清除，需要重新设置</span>
                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Interrupted while sleeping. Exiting...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 重新设置中断标志</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Worker thread exiting.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        workerThread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 主线程等待一段时间后中断workerThread</span>
        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        workerThread<span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Main thread interrupted worker thread.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Thread.interrupt VS Thread.stop</strong>：Thread.stop方法已经不推荐使用了。</p><p>在某些方面Thread.stop与中断机制有着相似之处。如：</p>`,12),f=n("li",null,[n("p",null,"当线程在等待内置锁或IO时，stop跟interrupt一样，不会中止这些操作；")],-1),T=n("li",null,[n("p",null,"当catch住stop导致的异常时，程序也可以继续执行，虽然stop本意是要停止线程，这么做会让程序行为变得更加混乱。")],-1),j=a(`<h2 id="线程通信与同步" tabindex="-1"><a class="header-anchor" href="#线程通信与同步"><span>线程通信与同步</span></a></h2><h3 id="object的等待-通知机制" tabindex="-1"><a class="header-anchor" href="#object的等待-通知机制"><span>Object的等待/通知机制</span></a></h3><p>Object的等待/通知机制 是基于对象监视器（Monitor）的一种线程间通信方式，主要通过<code>wait()</code>, <code>notify()</code>, 和 <code>notifyAll()</code>这三个方法来实现。这些方法都是定义在<code>Object</code>类中，因此任何对象都可以调用它们。</p><p><strong>wait()</strong></p><p><code>wait()</code>方法使当前线程进入等待（WAITING）状态，并释放它所持有的对象的监视器锁。调用<code>wait()</code>的线程会等待，直到其他线程调用同一个对象上的<code>notify()</code>或<code>notifyAll()</code>方法。<code>wait()</code>有两种形式：</p><ul><li><code>wait()</code>：无参数，无限期等待，直到被其他线程通知。</li><li><code>wait(long timeout)</code>：等待指定的毫秒数，如果超时后仍未被通知，则自动醒来。</li><li><code>wait(long timeout, int nanos)</code>：与上类似，但提供了纳秒级精度的超时时间。</li></ul><p><strong>notify()</strong></p><p><code>notify()</code>方法随机唤醒在此对象监视器上等待的一个线程。被唤醒的线程将进入锁的竞争状态，只有获得锁后才能继续执行。如果没有线程在等待，则<code>notify()</code>调用不起作用。</p><p><strong>notifyAll()</strong></p><p><code>notifyAll()</code>方法唤醒在此对象监视器上等待的所有线程。同样，被唤醒的线程需要竞争锁，只有获得锁的线程才能继续执行。</p><div class="hint-container info"><p class="hint-container-title">使用场景和注意事项</p><h4 id="使用场景-1" tabindex="-1"><a class="header-anchor" href="#使用场景-1"><span>使用场景</span></a></h4><ul><li><strong>生产者-消费者模型</strong>：生产者线程往队列中添加元素后调用<code>notify()</code>或<code>notifyAll()</code>通知消费者线程，消费者线程在队列为空时调用<code>wait()</code>等待。</li><li><strong>线程同步</strong>：当一个线程需要等待某个条件满足（如资源可用）时调用<code>wait()</code>，条件满足后由另一个线程调用<code>notify()</code>或<code>notifyAll()</code>通知等待线程。</li></ul><h4 id="注意事项-1" tabindex="-1"><a class="header-anchor" href="#注意事项-1"><span>注意事项</span></a></h4><ol><li><strong>必须在同步代码块或方法中调用</strong>：<code>wait()</code>, <code>notify()</code>, 和 <code>notifyAll()</code> 必须在已经获取了对象监视器锁的同步上下文中调用，否则会抛出<code>IllegalMonitorStateException</code>。</li><li><strong>检查等待条件</strong>：调用<code>wait()</code>的线程在被唤醒后，通常需要再次检查等待的条件是否已经满足，因为有可能被虚假唤醒。</li><li><strong>唤醒策略</strong>：选择<code>notify()</code>还是<code>notifyAll()</code>取决于具体需求。如果只有一个等待线程，或仅需唤醒一个线程，使用<code>notify()</code>；如果有多个线程等待，且都需要唤醒，则使用<code>notifyAll()</code>。</li></ol></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WaitNotifyExample</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">MAX_CAPACITY</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">produce</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>list<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">MAX_CAPACITY</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;List is full, producer is waiting.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                list<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;Item&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Produced an item, list size: &quot;</span> <span class="token operator">+</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            list<span class="token punctuation">.</span><span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">consume</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>list<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;List is empty, consumer is waiting.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                list<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token class-name">String</span> item <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Consumed an item, list size: &quot;</span> <span class="token operator">+</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            list<span class="token punctuation">.</span><span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">WaitNotifyExample</span> example <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WaitNotifyExample</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Thread</span> producer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">try</span> <span class="token punctuation">{</span>
                    example<span class="token punctuation">.</span><span class="token function">produce</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">Thread</span> consumer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">try</span> <span class="token punctuation">{</span>
                    example<span class="token punctuation">.</span><span class="token function">consume</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        producer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        consumer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这段代码展示了典型的生产者-消费者模型，其中<code>produce()</code>方法模拟生产过程，<code>consume()</code>方法模拟消费过程。通过<code>wait()</code>和<code>notifyAll()</code>实现了线程间的有效同步。</p><h3 id="condition接口" tabindex="-1"><a class="header-anchor" href="#condition接口"><span>Condition接口</span></a></h3><p><code>Condition</code>接口在Java并发编程中扮演着关键角色，它提供了一种灵活的线程间协作机制，允许线程在某一个条件满足时等待，以及由其他线程通知这些等待的线程条件已满足。<code>Condition</code>相比于传统的<code>wait()</code>和<code>notify()</code>/<code>notifyAll()</code>方法，提供了更加精细的线程控制能力，尤其是能够绑定到特定的<code>Lock</code>上，支持多路通知。</p><div class="hint-container tip"><p class="hint-container-title">如何创建Condition对象</p><p><code>Condition</code>接口没有公共构造方法，不能直接通过构造函数创建。它需要通过与<code>Lock</code>接口的实现类（如<code>ReentrantLock</code>）结合使用来创建。<code>Condition</code>对象是通过<code>Lock</code>接口的实例方法<code>newCondition()</code>得到的</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Lock</span> lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Condition</span> condition <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></div><p><strong>Condition对象的常用方法</strong></p><ol><li><p><strong>await()</strong>: 使当前线程等待，直到其他线程调用此<code>Condition</code>的<code>signal()</code>方法或<code>signalAll()</code>方法唤醒它，或者被中断。</p></li><li><p><strong>signal()</strong>: 唤醒在此<code>Condition</code>上等待的一个线程（如果有的话）。被唤醒的线程将从其<code>await()</code>调用中返回。</p></li><li><p><strong>signalAll()</strong>: 唤醒在此<code>Condition</code>上等待的所有线程。</p></li></ol><p>下面是一个 利用<code>Condition</code>实现生产者消费者模式的示例：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">LinkedList</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Queue</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>locks<span class="token punctuation">.</span></span><span class="token class-name">Condition</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>locks<span class="token punctuation">.</span></span><span class="token class-name">ReentrantLock</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProducerConsumerExample</span> <span class="token punctuation">{</span>
    <span class="token comment">// 创建一个简单的缓冲区，生产者线程向缓冲区放入产品，消费者线程从缓冲区取出产品</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Queue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 缓冲区</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> capacity <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment">// 缓冲区大小</span>

    <span class="token comment">// 使用一个锁对象和两个\`Condition\`对象，分别用于通知生产者和消费者的等待线程</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ReentrantLock</span> lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// \`notFull\`条件变量用于在缓冲区满时让生产者线程等待</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Condition</span> notFull <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 缓冲区未满条件</span>
    <span class="token comment">// \`notEmpty\`条件变量用于在缓冲区空时让消费者线程等待</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Condition</span> notEmpty <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 缓冲区非空条件</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">produce</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span>buffer<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> capacity<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 如果缓冲区满，生产者等待</span>
                notFull<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            buffer<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Produced: &quot;</span> <span class="token operator">+</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
            notEmpty<span class="token punctuation">.</span><span class="token function">signal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 通知消费者，缓冲区中有新元素</span>
        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">consume</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span>buffer<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 如果缓冲区为空，消费者等待</span>
                notEmpty<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">int</span> value <span class="token operator">=</span> buffer<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Consumed: &quot;</span> <span class="token operator">+</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
            notFull<span class="token punctuation">.</span><span class="token function">signal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 通知生产者，缓冲区有空间了</span>
        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">ProducerConsumerExample</span> pc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProducerConsumerExample</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 启动生产者线程</span>
        <span class="token class-name">Thread</span> producer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">try</span> <span class="token punctuation">{</span>
                    pc<span class="token punctuation">.</span><span class="token function">produce</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 模拟生产时间</span>
                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 启动消费者线程</span>
        <span class="token class-name">Thread</span> consumer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">try</span> <span class="token punctuation">{</span>
                    pc<span class="token punctuation">.</span><span class="token function">consume</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">800</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 模拟消费时间</span>
                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        producer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        consumer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上例中：</p><ul><li>生产者调用<code>notFull.await()</code>等待，直到有空间时被其他线程通过<code>notFull.signal()</code>唤醒。</li><li>消费者调用<code>notEmpty.await()</code>等待，直到有产品时被其他线程通过<code>notEmpty.signal()</code>唤醒。</li><li>在<code>finally</code>块中解锁，确保即使在等待过程中发生异常也能释放锁，防止死锁。</li></ul><p><strong>注意事项</strong>:</p><ul><li>在调用<code>await()</code>、<code>signal()</code>、<code>signalAll()</code>之前，必须持有与<code>Condition</code>关联的<code>Lock</code>。</li><li><code>await()</code>、<code>signal()</code>、<code>signalAll()</code>方法应当总是放在<code>try...finally</code>块内，确保<code>Lock</code>最终被正确释放，防止死锁。</li><li>使用<code>await()</code>时，建议使用<code>while</code>循环检查条件，而非<code>if</code>，这样可以防止虚假唤醒。</li></ul><div class="hint-container info"><p class="hint-container-title">\`Condition\`接口与\`Object\`类中的\`wait\`, \`notify\`, \`notifyAll\`方法的区别</p><p><code>Object</code>的等待/通知机制是早期Java并发设计的一部分，而<code>Condition</code>接口是Java并发包（<code>java.util.concurrent</code>）引入的高级特性，旨在提供更强大和灵活的线程同步机制。</p><h4 id="object类的wait-notify-notifyall方法" tabindex="-1"><a class="header-anchor" href="#object类的wait-notify-notifyall方法"><span><code>Object</code>类的<code>wait</code>, <code>notify</code>, <code>notifyAll</code>方法</span></a></h4><ul><li><strong>使用场景</strong>：主要用于在同步代码块或同步方法中，与<code>synchronized</code>关键字紧密配合。当线程需要等待某个条件满足时调用<code>wait()</code>，而当条件满足时，另一个线程通过<code>notify()</code>或<code>notifyAll()</code>唤醒等待的线程。</li><li><strong>灵活性</strong>：这些方法与监视器锁（即对象锁）绑定，每个对象只有一个监视器锁，因此对于复杂的多条件同步控制，灵活性较低，所有线程共享同一等待队列。</li><li><strong>绑定关系</strong>：直接与对象的监视器关联，意味着调用这些方法的线程必须拥有对象的监视器锁。</li></ul><h4 id="condition接口-1" tabindex="-1"><a class="header-anchor" href="#condition接口-1"><span><code>Condition</code>接口</span></a></h4><ul><li><strong>使用场景</strong>：与<code>java.util.concurrent.locks.Lock</code>接口配合使用，为线程间协调提供了更细粒度的控制。可以在一个Lock对象上创建多个Condition实例，分别对应不同的等待条件。</li><li><strong>灵活性</strong>：由于可以创建多个Condition实例，因此可以为不同的条件设置不同的等待队列，提高了并发控制的灵活性和精确度，适用于更复杂的同步需求。</li><li><strong>绑定关系</strong>：<code>Condition</code>对象与一个具体的<code>Lock</code>实例绑定，而非直接与对象本身，因此可以更自由地管理线程的等待和通知逻辑，而不局限于单一的监视器锁。</li><li><strong>方法</strong>：<code>await()</code>替代了<code>wait()</code>，<code>signal()</code>替代了<code>notify()</code>，<code>signalAll()</code>替代了<code>notifyAll()</code>，提供了类似的功能，但更加强大和灵活。</li></ul></div><h3 id="locksupport" tabindex="-1"><a class="header-anchor" href="#locksupport"><span>LockSupport</span></a></h3><p><code>LockSupport</code> 是 Java 并发包 (<code>java.util.concurrent</code>) 中的一个强大工具类，用于实现线程的阻塞和唤醒操作。它是构建其他同步组件如锁和条件队列的基础。<code>LockSupport</code> 提供了非常灵活且细粒度的线程控制能力，与传统的 <code>synchronized</code> 关键字或 <code>Object</code> 类的 <code>wait()</code>、<code>notify()</code> 方法相比，它具有更高的灵活性和控制力。</p><div class="hint-container tip"><p class="hint-container-title">许可证(permit)</p><p><code>LockSupport</code> 与每个线程关联一个所谓的“许可证”。默认情况下，线程不持有这个许可证。通过调用 <code>unpark()</code> 方法，可以给目标线程发放许可证；而调用 <code>park()</code> 方法的线程如果没有许可证，则会被阻塞。</p></div><p><strong>主要方法</strong>：</p><ul><li><p><strong><code>park()</code></strong>: 阻塞当前线程。如果调用 <code>park()</code> 的线程已经持有许可证，那么它会立即返回；否则，该线程会被阻塞，直到以下任一条件满足：</p><ul><li>其他线程调用 <code>unpark()</code> 给当前线程发放了许可证。</li><li>线程被中断（通过 <code>Thread.interrupt()</code> 方法）。</li><li>发生了“虚假唤醒”，这是由于操作系统层面的实现细节，虽然不常见，但也是可能发生的。</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">park</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p><strong><code>park(Object blocker)</code></strong>: 这个版本的 <code>park</code> 方法允许传递一个 <code>blocker</code> 参数，通常是一个对象引用，用来记录导致线程阻塞的原因，这在调试和监控线程行为时非常有用。它不会影响方法的行为，但可以被一些监视工具用来理解线程为什么被阻塞。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">park</span><span class="token punctuation">(</span><span class="token class-name">Object</span> blocker<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p><strong><code>parkNanos(long nanos)</code></strong>: 这个方法会使当前线程暂停执行，但最长不超过指定的纳秒数。如果在指定时间内被 <code>unpark</code> 调用或者中断，线程会提前结束阻塞状态。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">parkNanos</span><span class="token punctuation">(</span><span class="token keyword">long</span> nanos<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p><strong><code>parkUntil(long deadline)</code></strong>: 类似于 <code>parkNanos</code>，但不是基于时间间隔而是基于绝对时间点。线程将阻塞直到指定的时间点（以毫微秒为单位，自1970年以来的纳秒数），或者被 <code>unpark</code> 唤醒。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">parkUntil</span><span class="token punctuation">(</span><span class="token keyword">long</span> deadline<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p><strong><code>unpark(Thread thread)</code></strong>: <code>unpark</code> 方法用于明确地唤醒一个目标线程。它可以唤醒一个已经阻塞的线程，或者给一个尚未调用 <code>park</code> 方法的线程发放许可证，使得该线程在未来调用 <code>park</code> 时能够立即返回。如果多次调用 <code>unpark</code>，则会累积许可（但不会超过一次有效唤醒）。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">unpark</span><span class="token punctuation">(</span><span class="token class-name">Thread</span> thread<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">unpark</p><h4 id="许可证累积" tabindex="-1"><a class="header-anchor" href="#许可证累积"><span>许可证累积</span></a></h4><p>当多次调用 <code>LockSupport.unpark(Thread thread)</code> 方法时，实际上是在给定线程 <code>thread</code> 的内部状态中累积了一个或多个“许可证”。这意味着，如果有多个 <code>unpark</code> 调用发生在某个线程被 <code>park</code> 之前，这些调用不会丢失效果，而是被“记忆”下来。简而言之，许可证是可以累积的，多次调用会增加这个累积的数量。</p><h4 id="一次有效唤醒" tabindex="-1"><a class="header-anchor" href="#一次有效唤醒"><span>一次有效唤醒</span></a></h4><p>尽管许可证可以累积，但一个线程从 <code>park</code> 状态被唤醒的行为却是一次性的。这意味着，无论之前累积了多少个许可证，一旦线程因为调用了 <code>park</code> 而阻塞，它被唤醒时只会消耗一个许可证，并立即变为可运行状态。即使还有剩余的许可证，这次唤醒操作也不会消耗它们。线程下次再调用 <code>park</code> 时，如果之前累积的许可证还未消耗完，它仍然可以直接获得许可而无需等待。</p></div></li></ul><p><strong>特性</strong>：</p><ul><li><strong>无条件唤醒</strong>: <code>unpark()</code> 方法可以无条件唤醒线程，即使线程还没有调用 <code>park()</code>，这与传统的 <code>wait()</code>/<code>notify()</code> 机制不同。</li><li><strong>灵活的位置</strong>: <code>LockSupport</code> 方法可以在任何位置调用，不需要像 <code>synchronized</code> 代码块那样必须在监视器对象上操作。</li><li><strong>底层实现</strong>: <code>LockSupport</code> 的阻塞和唤醒操作是基于 JVM 的本地方法实现的，使用了 <code>sun.misc.Unsafe</code> 类中的底层操作，提供了高性能的线程控制。</li></ul><p><strong>使用场景</strong>：</p><ul><li>实现自定义同步组件，如自定义锁和条件变量。</li><li>线程间的精细控制，比如在复杂的并发算法中精确控制线程的执行顺序。</li><li>异常处理和恢复，当需要在异常处理后恢复线程的执行时。</li></ul><p>下面是一个简单的 <code>LockSupport</code> 使用示例，展示了如何使用 <code>park()</code> 和 <code>unpark()</code> 方法来控制线程的暂停和恢复执行：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>locks<span class="token punctuation">.</span></span><span class="token class-name">LockSupport</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LockSupportExample</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 创建一个工作线程</span>
        <span class="token class-name">Thread</span> workerThread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Worker thread starts.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            
            <span class="token comment">// 模拟工作前的准备</span>
            <span class="token function">doSomeWork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            
            <span class="token comment">// 线程准备就绪，等待被唤醒</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Worker thread is going to park itself.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">LockSupport</span><span class="token punctuation">.</span><span class="token function">park</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 线程在此处暂停</span>
            
            <span class="token comment">// 被唤醒后继续执行</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Worker thread is running again after being unparked.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">doSomeMoreWork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&quot;Worker&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 启动工作线程</span>
        workerThread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 主线程休眠一段时间，确保工作线程开始并park</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Main thread is going to unpark the worker thread.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">LockSupport</span><span class="token punctuation">.</span><span class="token function">unpark</span><span class="token punctuation">(</span>workerThread<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 唤醒工作线程</span>

        <span class="token comment">// 等待工作线程完成</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            workerThread<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">doSomeWork</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Some work done.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">doSomeMoreWork</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Some more work done.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意事项</strong></p><ul><li>谨慎使用 <code>LockSupport</code>，不当使用可能导致死锁或无限期阻塞。</li><li>使用 <code>park()</code> 和 <code>unpark()</code> 时，应确保它们在逻辑上成对出现，以避免意外的线程行为。</li></ul><div class="hint-container info"><p class="hint-container-title">使用到LockSupport的并发工具</p><p><code>LockSupport</code> 是Java并发包中的一个核心工具类，虽然它本身不是一个复合工具，但许多高级并发工具和框架在内部使用了 <code>LockSupport</code> 来实现线程的阻塞和唤醒逻辑。以下是几个直接或间接基于 <code>LockSupport</code> 实现的并发工具和框架的例子：</p><ol><li><p><strong><code>ReentrantLock</code> 和 Condition</strong>: <code>ReentrantLock</code> 是一个可重入互斥锁，提供了比 <code>synchronized</code> 更多的灵活性。其内部的 <code>Condition</code> 对象（通过 <code>newCondition()</code> 方法获得）用于线程间的精确等待/通知，这些功能在底层就是通过 <code>LockSupport</code> 的 <code>park</code> 和 <code>unpark</code> 方法实现的。</p></li><li><p><strong><code>AbstractQueuedSynchronizer (AQS)</code></strong>: AQS 是许多高级同步器的基础框架，包括 <code>ReentrantLock</code>, <code>Semaphore</code>, <code>CountDownLatch</code>, <code>CyclicBarrier</code>, 等。AQS 使用了一个双向链表来管理等待线程，并通过 <code>LockSupport</code> 来实现线程的阻塞与唤醒。</p></li><li><p><strong>CountDownLatch</strong>: 用于让一个或多个线程等待其他线程完成一定数量的操作。当计数达到零时，所有等待的线程被释放，这个过程中就用到了 <code>LockSupport</code>。</p></li><li><p><strong>CyclicBarrier</strong>: 用于同步多个线程到达一个共同的屏障点，所有线程到达后一起继续执行。在屏障点等待和唤醒线程的机制中，<code>LockSupport</code> 起到了关键作用。</p></li><li><p><strong>Semaphore</strong>: 实现了计数信号量，控制同时访问特定资源的线程数量。线程在尝试获取信号量时可能被阻塞，这也是通过 <code>LockSupport</code> 实现的。</p></li><li><p><strong>StampedLock</strong>: 提供了读写锁的更精细控制，包括乐观读锁、悲观读锁和写锁，它也依赖于 <code>LockSupport</code> 来实现线程的挂起和恢复。</p></li><li><p><strong>自定义同步组件</strong>: 开发者在实现自定义的同步组件时，如自旋锁、读写锁或其他同步逻辑时，经常直接使用 <code>LockSupport</code> 来控制线程状态。</p></li></ol><p>总的来说，<code>LockSupport</code> 是Java并发编程中用于线程控制的核心工具之一，许多高级并发工具在内部都依赖它来实现线程的阻塞与唤醒机制，从而实现了高效的线程同步。</p></div><h2 id="用户线程和守护线程" tabindex="-1"><a class="header-anchor" href="#用户线程和守护线程"><span>用户线程和守护线程</span></a></h2><p>在Java中有两类线程：User Thread(用户线程)、Daemon Thread(守护线程) ，User和Daemon两者几乎没有区别，不同之处在于：</p><ul><li><p>如果 User Thread已经全部退出运行了，只剩下Daemon Thread存在了，虚拟机也就退出了。<br> 因为没有了被守护者，Daemon也就没有工作可做了，也就没有继续运行程序的必要了。</p></li><li><p>Daemon的作用是为其他线程的运行提供便利服务，守护线程最典型的应用就是 GC (垃圾回收器)</p></li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;——&quot;</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DaemonDemo</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        <span class="token class-name">MyThread</span> daemonThread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        daemonThread<span class="token punctuation">.</span><span class="token function">setDaemon</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 设置为守护线程</span>
        daemonThread<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;Daemon-Thread&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        daemonThread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;User-Thread&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 主线程为用户线程</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;——&quot;</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+v+'" alt="Daemon Thread Demo" tabindex="0" loading="lazy"><figcaption>Daemon Thread Demo</figcaption></figure><div class="hint-container info"><p class="hint-container-title">使用守护线程的注意事项</p><p>（1）守护线程必须在启动前将其守护状态设置为true，启动之后不能再将用户线程设置为守护线程，否则JVM会抛出一个<code>InterruptedException异常</code>。具体来说，如果线程为守护线程，就必须在线程实例的start()方法调用之前调用线程实例的<code>setDaemon(true)</code>，设置其daemon实例属性值为true。</p><p>（2）守护线程存在被JVM强行终止的风险，所以在守护线程中尽量不去访问系统资源，如文件句柄、数据库连接等。守护线程被强行终止时，可能会引发系统资源操作不负责任的中断，从而导致资源不可逆的损坏。</p><p>（3）守护线程创建的线程也是守护线程。在守护线程中创建的线程，新的线程都是守护线程。在创建之后，如果通过调用setDaemon(false)将新的线程显式地设置为用户线程，新的线程可以调整成用户线程。</p><p>（3）<strong>守护线程创建的线程也是守护线程</strong>，如果要将守护线程所创建的线程调整为用户线程，可以通过<code>setDaemon(false)</code>显式地将这些线程设置为用户线程</p></div>',46);function x(C,S){const t=c("font");return l(),i("div",null,[b,n("ul",null,[g,n("li",null,[n("p",null,[h,s("： 抢占资源，让自己占有线程， 先执行完毕后（或达到指定时间）才释放资源。( "),p(t,{color:"red"},{default:e(()=>[s("可以用来保证执行顺序")]),_:1}),s(" )")]),y])]),w,n("ul",null,[f,n("li",null,[n("p",null,[s("最重要的就是"),p(t,{color:"red"},{default:e(()=>[s("中断需要程序自己去检测然后做相应的处理")]),_:1}),s("，而Thread.stop会直接在代码执行过程中抛出ThreadDeath错误")])]),T]),j])}const E=o(m,[["render",x],["__file","thread.html.vue"]]),M=JSON.parse('{"path":"/java/syntax/thread/thread.html","title":"Java多线程基础","lang":"en-US","frontmatter":{"order":1,"title":"Java多线程基础","description":"并发编程基础概念 并发与并行 并发（Concurrency）: 并发是指两个或多个任务在同一时间段内开始、执行和完成，但不意味着它们在物理上同时执行。在单核处理器上，通过时间片轮转，CPU快速地在多个任务之间切换，给人一种同时执行的错觉。而在多核处理器上，虽然可以有任务真正并行执行，但并发更侧重于描述任务的调度和执行方式，而非强调物理上的同时性。 并发...","head":[["meta",{"property":"og:url","content":"https://x.app/notebook/java/syntax/thread/thread.html"}],["meta",{"property":"og:site_name","content":"Notebook"}],["meta",{"property":"og:title","content":"Java多线程基础"}],["meta",{"property":"og:description","content":"并发编程基础概念 并发与并行 并发（Concurrency）: 并发是指两个或多个任务在同一时间段内开始、执行和完成，但不意味着它们在物理上同时执行。在单核处理器上，通过时间片轮转，CPU快速地在多个任务之间切换，给人一种同时执行的错觉。而在多核处理器上，虽然可以有任务真正并行执行，但并发更侧重于描述任务的调度和执行方式，而非强调物理上的同时性。 并发..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-06-09T16:14:20.000Z"}],["meta",{"property":"article:author","content":"Mr.Topple"}],["meta",{"property":"article:modified_time","content":"2024-06-09T16:14:20.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java多线程基础\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-06-09T16:14:20.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Topple\\",\\"url\\":\\"https://www.baidu.com\\"}]}"]]},"headers":[{"level":2,"title":"并发编程基础概念","slug":"并发编程基础概念","link":"#并发编程基础概念","children":[{"level":3,"title":"并发与并行","slug":"并发与并行","link":"#并发与并行","children":[]},{"level":3,"title":"同步和异步","slug":"同步和异步","link":"#同步和异步","children":[]},{"level":3,"title":"线程与进程","slug":"线程与进程","link":"#线程与进程","children":[]},{"level":3,"title":"管程(Monitor)","slug":"管程-monitor","link":"#管程-monitor","children":[]},{"level":3,"title":"线程调度方式","slug":"线程调度方式","link":"#线程调度方式","children":[]},{"level":3,"title":"线程优先级","slug":"线程优先级","link":"#线程优先级","children":[]}]},{"level":2,"title":"线程的创建与启动","slug":"线程的创建与启动","link":"#线程的创建与启动","children":[{"level":3,"title":"继承Thread","slug":"继承thread","link":"#继承thread","children":[]},{"level":3,"title":"实现Runnable","slug":"实现runnable","link":"#实现runnable","children":[]},{"level":3,"title":"实现Callable","slug":"实现callable","link":"#实现callable","children":[]}]},{"level":2,"title":"线程状态及其转换","slug":"线程状态及其转换","link":"#线程状态及其转换","children":[{"level":3,"title":"线程状态的划分","slug":"线程状态的划分","link":"#线程状态的划分","children":[]},{"level":3,"title":"六种线程状态","slug":"六种线程状态","link":"#六种线程状态","children":[]},{"level":3,"title":"线程控制API","slug":"线程控制api","link":"#线程控制api","children":[]},{"level":3,"title":"线程中断机制","slug":"线程中断机制","link":"#线程中断机制","children":[]}]},{"level":2,"title":"线程通信与同步","slug":"线程通信与同步","link":"#线程通信与同步","children":[{"level":3,"title":"Object的等待/通知机制","slug":"object的等待-通知机制","link":"#object的等待-通知机制","children":[]},{"level":3,"title":"Condition接口","slug":"condition接口","link":"#condition接口","children":[]},{"level":3,"title":"LockSupport","slug":"locksupport","link":"#locksupport","children":[]}]},{"level":2,"title":"用户线程和守护线程","slug":"用户线程和守护线程","link":"#用户线程和守护线程","children":[]}],"git":{"createdTime":1717424415000,"updatedTime":1717949660000,"contributors":[{"name":"Neil","email":"msdrizzle@outlook.com","commits":2}]},"readingTime":{"minutes":45.06,"words":13518},"filePathRelative":"java/syntax/thread/thread.md","localizedDate":"June 3, 2024","autoDesc":true}');export{E as comp,M as data};
