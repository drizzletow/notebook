import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,e}from"./app-By9poVyN.js";const t={},p=e(`<h1 id="set和map" tabindex="-1"><a class="header-anchor" href="#set和map"><span>Set和Map</span></a></h1><h2 id="_1-map接口" tabindex="-1"><a class="header-anchor" href="#_1-map接口"><span>1. Map接口</span></a></h2><p>Map 是一种键-值对（key-value）集合，Map 集合中的每一个元素都包含一个键（key）对象和一个值（value）对象。用于保存具有映射关系的数据。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 1, Map是Map集合体系的顶级接口</span>
<span class="token comment">// 2, Map存储的是key-value数据(键值对)  (key-value具有自我描述性)</span>
<span class="token comment">// 3, Map的一些子实现存储元素是有序的, 另一些子实现存储元素无序</span>
<span class="token comment">// 4, Map都不允许存储重复元素 (什么叫重复元素)</span>
<span class="token comment">// 5, Map的一些子实现允许存储null, 另一些子实现不允许存储null</span>

<span class="token punctuation">(</span>这些有序<span class="token operator">/</span>重复<span class="token operator">/</span><span class="token keyword">null</span>问题指的都是map数据中的key<span class="token punctuation">,</span>  value不在讨论范畴之内<span class="token punctuation">)</span>

注意<span class="token operator">:</span> 如果我们又给map存储了一份重复key<span class="token operator">-</span>value数据 <span class="token punctuation">(</span>重复指key重复<span class="token punctuation">)</span><span class="token punctuation">,</span> 那么会新的value会覆盖已经存储的key<span class="token operator">-</span>value的value

注意<span class="token operator">:</span> 因为map没有定义<span class="token class-name">Iterator</span>方法<span class="token punctuation">,</span> 所以我们没有办法直接使用foreach循环来遍历map
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Map接口的常用方法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">V</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">K</span> key<span class="token punctuation">,</span> <span class="token class-name">V</span> value<span class="token punctuation">)</span>                       <span class="token comment">// 添加或替换（可选操作）</span>
<span class="token keyword">void</span> <span class="token function">putAll</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">K</span><span class="token punctuation">,</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> m<span class="token punctuation">)</span> <span class="token comment">// 批量添加或替换（可选操作）</span>

<span class="token class-name">V</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token class-name">Object</span> key<span class="token punctuation">)</span>                        <span class="token comment">// 如果存在一个键的映射关系，则将其从此映射中移除（可选操作）</span>

<span class="token keyword">boolean</span> <span class="token function">containsKey</span><span class="token punctuation">(</span><span class="token class-name">Object</span> key<span class="token punctuation">)</span>             <span class="token comment">// 如果此映射包含指定键的映射关系，则返回 true</span>
<span class="token keyword">boolean</span> <span class="token function">containsValue</span><span class="token punctuation">(</span><span class="token class-name">Object</span> value<span class="token punctuation">)</span>         <span class="token comment">// 如果此映射将一个或多个键映射到指定值，则返回 true     </span>
<span class="token class-name">V</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Object</span> key<span class="token punctuation">)</span>                           <span class="token comment">// 返回指定键所映射的值；如果此映射不包含该键的映射关系，则返回null             </span>

<span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                                <span class="token comment">// 从此映射中移除所有映射关系（可选操作）。</span>
<span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span>                    <span class="token comment">// 比较指定的对象与此映射是否相等。</span>
<span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                              <span class="token comment">// 返回此映射的哈希码值。</span>
<span class="token keyword">boolean</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                           <span class="token comment">// 如果此映射未包含键-值映射关系，则返回 true。       </span>
<span class="token keyword">int</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                                  <span class="token comment">// 返回此映射中的键-值映射关系数。       </span>


<span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">&gt;</span></span> <span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                             <span class="token comment">// 返回此映射中包含的键的 Set 视图</span>
<span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                      <span class="token comment">// 返回此映射中包含的值的 Collection 视图   </span>
<span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span>              <span class="token comment">// 返回此映射中包含的映射关系的 Set 视图</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意: 为什么Map要提供三个视图方法（keySet、values、entrySet）</p><ul><li><p>因为map没有定义Iterator方法, 所以我们没有办法直接使用foreach循环来遍历map</p><p>所以提供了是哪个视图方法, 把数据变成Collection类型, 就可以使用foreach循环来遍历map数据了</p></li></ul><p>三个视图方法的简单使用示例代码如下：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MapDemo</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> animal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        animal<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;cat&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;小猫&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        animal<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;dog&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;小狗&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        animal<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;pig&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;小猪&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 遍历（迭代器）</span>
        <span class="token comment">// 1. 输出 value的值</span>
        <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> it <span class="token operator">=</span> animal<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;\\n——————————————————————————————————————————&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 2. 通过 entrySet 方法打印 key 和 value 的值</span>
        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> entrySet <span class="token operator">=</span> animal<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> entry<span class="token operator">:</span>entrySet<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">&quot;-&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;\\n——————————————————————————————————————————&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 查找（根据 key查找值）</span>
        <span class="token class-name">String</span> search <span class="token operator">=</span> <span class="token string">&quot;cat&quot;</span><span class="token punctuation">;</span>
        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> keySet <span class="token operator">=</span> animal<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token operator">:</span>keySet<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>search<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;OK! &quot;</span><span class="token operator">+</span>key<span class="token operator">+</span><span class="token string">&quot;-&quot;</span><span class="token operator">+</span>animal<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-hashmap" tabindex="-1"><a class="header-anchor" href="#_1-hashmap"><span>1) HashMap</span></a></h3><p>注意: HashMap的底层结构: 数组+链表+红黑树，jdk1.8之前: 只有单纯的: 数组+链表</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 1, HashMap是Map接口的一个子实现 (没有toString方法，使用了其父类AbstractMap的toString方法)</span>
<span class="token comment">// 2, HashMap底层是: 数组 +链表+红黑树</span>
<span class="token comment">// 3, HashMap的底层数组默认初始长度 16,   默认的扩容机制: 扩为原来2倍 , 默认的加载因子是0.75</span>
<span class="token comment">// 4, HashMap存储元素是无序</span>
<span class="token comment">// 5, HashMap不允许存储重复的key</span>
<span class="token comment">// 6, HashMap允许存储null作为key （key为null的时候必定存储再数组下标为0的位置）</span>
<span class="token comment">// 7, HashMap线程不安全</span>
<span class="token comment">// 8, 如果我们在构造方法里给定长度: 底层长度会变成大于等于我们给定值的最小的2的幂值</span>
       <span class="token number">16</span> <span class="token operator">-&gt;</span> <span class="token number">16</span><span class="token punctuation">;</span>   <span class="token number">20</span> <span class="token operator">-&gt;</span> <span class="token number">32</span><span class="token punctuation">;</span>  <span class="token number">60</span> <span class="token operator">-&gt;</span> <span class="token number">64</span><span class="token punctuation">;</span>  <span class="token number">64</span> <span class="token operator">-&gt;</span> <span class="token number">64</span>
<span class="token comment">// 9, </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>加载因子:</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 加载因子是用来限定阈值的 , 如果在爱HashMap存储的数据(key-value份数)超过阈值, 就要底层数组扩容</span>
 阈值<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span> <span class="token operator">=</span> 加载因子<span class="token punctuation">(</span><span class="token number">0.75</span><span class="token punctuation">)</span> <span class="token operator">*</span> 数组长度<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span>

<span class="token comment">// 注意: 虽然我们可以做在构造方法里修改加载因子: 但是建议不要修改, 实在要修改(建议保证在0.5-1之间)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于HashMap讲什么是重复的key:</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">HashMap</span>对key的重复的定义<span class="token operator">:</span> key的hash值相等<span class="token punctuation">,</span> 并且 key直接相等或者相equals

<span class="token comment">//  if (p.hash == hash &amp;&amp;  ((k = p.key) == key || (key != null &amp;&amp; key.equals(k))))</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>key是怎么计算出一个int类型的值, 以及怎么进一步用这个int值取下标</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">int</span>类型的值<span class="token punctuation">(</span>hash值<span class="token punctuation">)</span>怎么得到的
<span class="token comment">// (key == null) ? 0 : (h = key.hashCode()) ^ (h &gt;&gt;&gt; 16);</span>
<span class="token comment">// 为什么要先移位又做异或运算, 就是希望一个key的hashCode()低位能够充分混合(和高位), 再参数取模, 取模的结果就更随机</span>

注意了解<span class="token operator">:</span> hashCode值不一样 一定意味着hash值不一样 <span class="token operator">:</span> 结论 

取下标
<span class="token comment">//     (n - 1) &amp; hash  : hash值和数组长度取模</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>链表多长算长(多长才会转化为红黑树): 非常重要</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>当我们在<span class="token class-name">HashMap</span>添加的过程中<span class="token punctuation">,</span> 某一个下标位置添加结点<span class="token punctuation">(</span>key<span class="token operator">-</span>value数据的份数<span class="token punctuation">)</span>算上刚刚添加的超过<span class="token number">8</span>达到<span class="token number">9</span>的时候<span class="token punctuation">,</span> 就会由链表转化为红黑树 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>当HashMap添加数据的时候, 链表长度超过8,达到9的时候, 一定会由链表转化为红黑树吗?</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>不一定<span class="token punctuation">,</span> 当底层数组长度小于<span class="token number">64</span>的时候<span class="token punctuation">,</span> 如果链表长度超过<span class="token number">8</span><span class="token punctuation">,</span>达到<span class="token number">9</span>的时候优先扩容<span class="token punctuation">,</span> 而非转化为红黑树
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果红黑树上数据量变少, 有可能转化回链表(什么时候/怎么转化)</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>什么时候红黑树转化为链表<span class="token operator">:</span>
<span class="token number">1</span><span class="token punctuation">,</span> 删除结点在红黑树上 <span class="token operator">:</span>  如果删除的时候<span class="token punctuation">,</span> 这个红黑树上根节点<span class="token operator">/</span>根节点的左右结点<span class="token operator">/</span>根节点的左结点的左节点<span class="token punctuation">,</span>这四个结点有一个是<span class="token keyword">null</span><span class="token punctuation">,</span> 就要由红黑树转化为链表

  <span class="token comment">// root就是树的根节点</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> root<span class="token punctuation">.</span>right <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span><span class="token punctuation">(</span>rl <span class="token operator">=</span> root<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> rl<span class="token punctuation">.</span>left <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> 
         <span class="token comment">// 红黑树转化为链表</span>
        tab<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> first<span class="token punctuation">.</span><span class="token function">untreeify</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// too small</span>


<span class="token number">2</span><span class="token punctuation">,</span> 扩容的时候<span class="token punctuation">(</span>扩容会把原下标位置存储的元素拆成两部分<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">6</span>
       扩容的时候<span class="token punctuation">,</span> 红黑树会拆成低位和高位两部分<span class="token punctuation">,</span>  任一部分的拆的数据个数小于等于<span class="token number">6</span>的话<span class="token punctuation">,</span> 就要由红黑树转化为链表
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>HashMap底层数组是个Node类型的数组: 用来存储Node类型的对象, 这个对象里面包含key-value数据</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">implements</span> <span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
        <span class="token keyword">final</span> <span class="token keyword">int</span> hash<span class="token punctuation">;</span>
        <span class="token keyword">final</span> <span class="token class-name">K</span> key<span class="token punctuation">;</span>
        <span class="token class-name">V</span> value<span class="token punctuation">;</span>
        <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> next<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意事项:</p><p>红黑树出现的概率高吗? 很低</p><p>如果HashMap中已经存储的key-value数据, 建议不要直接通过key的引用修改key的内容, 有可能删不掉</p><p>HashMap重写了toString遍历方式是按照下标从前向后遍历, 遇到链表或者树, 对链表或者树按照next遍历完成之后, 接着随着数组下标向后遍历</p><p>构造方法:</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                                      <span class="token comment">// 构造一个具有默认初始容量 (16) 和默认加载因子 (0.75) 的空HashMap</span>
<span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token keyword">int</span> initialCapacity<span class="token punctuation">)</span>                   <span class="token comment">// 构造一个带指定初始容量和默认加载因子 (0.75) 的空 HashMap</span>
<span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token keyword">int</span> initialCapacity<span class="token punctuation">,</span> <span class="token keyword">float</span> loadFactor<span class="token punctuation">)</span> <span class="token comment">// 构造一个带指定初始容量和加载因子的空 HashMap </span>
<span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">K</span><span class="token punctuation">,</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> m<span class="token punctuation">)</span>        <span class="token comment">// 构造一个映射关系与指定 Map 相同的新 HashMap </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一份key-value数据的添加流程</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 1, 要存储一份key-value数据</span>
<span class="token comment">// 2, 把key拿出, 计算hash值:   通过key的hashCode 异或上hashCode向right移动16位</span>
<span class="token comment">//                             异或的原因:  希望hash值的高位也参与到取模运算, 充分散列</span>
<span class="token comment">// 3, hash和数组长度取模, 的到一个下标(就是key-value数据要存储的位置)</span>
<span class="token comment">// 4, 判断这个下标位置有没有内容, 没有直接存储, 存储一个Node类型(key, value, hash, next)</span>
<span class="token comment">// 5, 如果这个位置已经存储了别的key-value数据 --&gt; 先判断重复</span>
<span class="token comment">//       重复的依据: key的hash值是否相等 以及, key是否直接相等或者相equals</span>
<span class="token comment">// 6, 重复, 新value覆盖旧value</span>
<span class="token comment">// 7, 不重复,  接着判断这个位置存储的是树还是单链表</span>
<span class="token comment">//      7.1 如果是个单链表, 按照next方向比较, 重复, 新value覆盖旧value</span>
<span class="token comment">//                    不重复, 最终添加到这个链表尾部</span>
<span class="token comment">//            如果添加之后导致这个链表过长(超过8达到9)转化为红黑树(如果数组长度小于64, 优先扩容)</span>
<span class="token comment">//      7.2 如果是个树, 按照hash值比较大小, 确定比较方向</span>
<span class="token comment">//          最终是否重复: key的hash值是否相等 以及, key是否直接相等或者相equals</span>
<span class="token comment">//                     重复: 替换</span>
<span class="token comment">//                      不重复: 添加到红黑树上</span>
<span class="token comment">// 8, 添加完成, 有可能超出阈值 --&gt; 扩容</span>
<span class="token comment">// 9, 原本在x位置元素, 扩容之后, 要么还在x位置, 要么在旧长度+x位置  (取决于高位)</span>
<span class="token comment">// 10, 如果是个树在扩容之后, 可能被拆开, 被拆开的任何一部分数据量小于等于6的时候, 由红黑树转化为链表</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>删除一个结点: 了解</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 1, 根据一个key删除一份key-value数据</span>
<span class="token comment">// 2, 通过key计算hash值: 通过key的hashCode 异或上hashCode向right移动16位</span>
<span class="token comment">// 3, 取模, 的下标, </span>
<span class="token comment">// 4, 找到对应下标, 判断是否重复: </span>
<span class="token comment">//       重复的依据: key的hash值是否相等 以及, key是否直接相等或者相equals</span>
<span class="token comment">// 5, 不重复, 判断是树还是链表</span>
<span class="token comment">// 6, 如果是链表, 遍历链表判断重复, 找到了删除, 没找到不删除</span>
<span class="token comment">// 7, 如果是个树, 在树上查找(hash确定左右方向), 找到了删除, 删除之后判断根节点/根节点的左右结点/根节点的左节点的左节点是否是null, 如果是null, 红黑树转化为链表</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-linkedhashmap" tabindex="-1"><a class="header-anchor" href="#_2-linkedhashmap"><span>2) LinkedHashMap</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 1, LinkedHashMap 是HashMap的一个子类</span>
<span class="token comment">// 2, LinkedHashMap 底层结构基本上完全复用了HashMap的结构</span>
<span class="token comment">// 3, LinkedHashMap 在HashMap的基础上, 额外的维护了一个双向链表, 用以保证迭代顺序</span>
<span class="token comment">// 4, LinkedHashMap 表现是有序的</span>
<span class="token comment">// 5, LinkedHashMap 不允许存储重复元素: 重复的定义和HashMap一样</span>
<span class="token comment">// 6, LinkedHashMap 允许存储null作为key</span>
<span class="token comment">// 7, LinkedHashMap 线程不安全</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>构造方法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 构造一个带默认初始容量 (16) 和加载因子 (0.75) 的空插入顺序 LinkedHashMap 实例</span>
<span class="token class-name">LinkedHashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 

<span class="token comment">//构造一个带指定初始容量和默认加载因子 (0.75) 的空插入顺序 LinkedHashMap 实例</span>
<span class="token class-name">LinkedHashMap</span><span class="token punctuation">(</span><span class="token keyword">int</span> initialCapacity<span class="token punctuation">)</span>  

<span class="token comment">//构造一个带指定初始容量和加载因子的空插入顺序 LinkedHashMap 实例</span>
<span class="token class-name">LinkedHashMap</span><span class="token punctuation">(</span><span class="token keyword">int</span> initialCapacity<span class="token punctuation">,</span> <span class="token keyword">float</span> loadFactor<span class="token punctuation">)</span> 

<span class="token comment">// 构造一个带指定初始容量、加载因子和排序模式的空 LinkedHashMap 实例</span>
<span class="token class-name">LinkedHashMap</span><span class="token punctuation">(</span><span class="token keyword">int</span> initialCapacity<span class="token punctuation">,</span> <span class="token keyword">float</span> loadFactor<span class="token punctuation">,</span> <span class="token keyword">boolean</span> accessOrder<span class="token punctuation">)</span> 

<span class="token comment">// 构造一个映射关系与指定映射相同的插入顺序 LinkedHashMap 实例</span>
<span class="token class-name">LinkedHashMap</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">K</span><span class="token punctuation">,</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> m<span class="token punctuation">)</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-hashtable" tabindex="-1"><a class="header-anchor" href="#_3-hashtable"><span>3) Hashtable</span></a></h3><p>Hashtable工作已经不使用, jdk1.0时候出现; 面试常用来和HashMap做对比</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 1, Hashtable是数组+链表   (没有红黑树;  jdk1.8之前的HashMap一样)</span>
<span class="token comment">// 2, Hashtbale数组的初始长度11 ,    扩容机制: 扩为原来的2倍+1</span>
<span class="token comment">// 3, Hashtable不允许存储null 作为key和value</span>
<span class="token comment">// 4, Hashtable线程安全</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-treemap" tabindex="-1"><a class="header-anchor" href="#_4-treemap"><span>4) TreeMap</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 1, TreeMap是Map接口的子实现</span>
<span class="token comment">// 2, TreeMap数据结构是红黑树</span>
<span class="token comment">// 3, TreeMap底层是链表</span>
<span class="token comment">// 5, TreeMap大小有序</span>
<span class="token comment">// 6, TreeMap不允许存储重复元素: 大小重复    (和Hash一点关系都没有)</span>
<span class="token comment">// 7, TreeMap不允许存储null 作为key</span>
<span class="token comment">// 8, Treemap线程不安全</span>


注意<span class="token operator">:</span> 因为<span class="token class-name">TreeMap</span>是一个红黑树<span class="token punctuation">(</span>是一个特殊的二叉搜素树<span class="token punctuation">)</span><span class="token punctuation">,</span> 需要比较大小<span class="token punctuation">,</span> 那么也就意味着 <span class="token punctuation">,</span> 我们存储的到<span class="token class-name">TreeMap</span>中的数据要能比较大小<span class="token punctuation">(</span><span class="token keyword">implements</span> <span class="token class-name">Comparable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span>
     也可以让存储的key 不实现<span class="token class-name">Comparable</span><span class="token punctuation">,</span>  给<span class="token class-name">TreeMap</span>提供一个比较器<span class="token class-name">Comparator</span><span class="token punctuation">,</span> 让存储的key通过<span class="token class-name">Comparator</span>作比较
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>构造方法摘要 
<span class="token class-name">TreeMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 使用键的自然顺序构造一个新的、空的树映射。 </span>
<span class="token class-name">TreeMap</span><span class="token punctuation">(</span><span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">K</span><span class="token punctuation">&gt;</span></span> comparator<span class="token punctuation">)</span> <span class="token comment">// 构造一个新的、空的树映射，该映射根据给定比较器进行排序。 </span>
<span class="token class-name">TreeMap</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">K</span><span class="token punctuation">,</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> m<span class="token punctuation">)</span> <span class="token comment">// 构造一个与给定映射具有相同映射关系的新的树映射，根据其键的自然顺序进行排序 </span>
<span class="token class-name">TreeMap</span><span class="token punctuation">(</span><span class="token class-name">SortedMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> m<span class="token punctuation">)</span>     <span class="token comment">// 构造一个与指定有序映射具有相同映射关系和相同排序顺序的新的树映射。 </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">boolean</span> <span class="token function">containsKey</span><span class="token punctuation">(</span><span class="token class-name">Object</span> key<span class="token punctuation">)</span>                <span class="token comment">// 如果此映射包含指定键的映射关系，则返回 true</span>
<span class="token keyword">boolean</span> <span class="token function">containsValue</span><span class="token punctuation">(</span><span class="token class-name">Object</span> value<span class="token punctuation">)</span>            <span class="token comment">// 如果此映射为指定值映射一个或多个键，则返回 true</span>
<span class="token class-name">V</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Object</span> key<span class="token punctuation">)</span>                              <span class="token comment">// 返回指定键所映射的值，没有则返回 null</span>
<span class="token class-name">V</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">K</span> key<span class="token punctuation">,</span> <span class="token class-name">V</span> value<span class="token punctuation">)</span>                          <span class="token comment">// 将指定值与此映射中的指定键进行关联</span>
<span class="token keyword">void</span> <span class="token function">putAll</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">K</span><span class="token punctuation">,</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> map<span class="token punctuation">)</span>  <span class="token comment">// 将指定映射中的所有映射关系复制到此映射中</span>
<span class="token class-name">V</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token class-name">Object</span> key<span class="token punctuation">)</span>                           <span class="token comment">// 如果此 TreeMap 中存在该键的映射关系，则将其删除</span>


<span class="token comment">// 通常集合类都具有的方法</span>
<span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span>               <span class="token comment">// 从此映射中移除所有映射关系</span>
<span class="token class-name">Object</span> <span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span>             <span class="token comment">// 返回此 TreeMap 实例的浅表副本</span>
<span class="token keyword">int</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                 <span class="token comment">// 返回此映射中的键-值映射关系数</span>

<span class="token comment">// 视图: 键值, 值集, 键值对结合</span>
<span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span>           <span class="token comment">// 返回此映射包含的值的 Collection 视图</span>
<span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">&gt;</span></span> <span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                  <span class="token comment">// 返回此映射包含的键的 Set 视图</span>
<span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment">// 返回此映射中包含的映射关系的 Set 视图</span>


<span class="token comment">// 根据大小相关的 </span>
<span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token function">ceilingEntry</span><span class="token punctuation">(</span><span class="token class-name">K</span> key<span class="token punctuation">)</span>   <span class="token comment">// 获得大于等于给定key的最小键值对</span>
<span class="token class-name">K</span> <span class="token function">ceilingKey</span><span class="token punctuation">(</span><span class="token class-name">K</span> key<span class="token punctuation">)</span>                  <span class="token comment">// 获得大于等于给定key的最小key</span>

<span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token function">floorEntry</span><span class="token punctuation">(</span><span class="token class-name">K</span> key<span class="token punctuation">)</span>     <span class="token comment">// 获得小于等于给定key的最大键值对</span>
<span class="token class-name">K</span> <span class="token function">floorKey</span><span class="token punctuation">(</span><span class="token class-name">K</span> key<span class="token punctuation">)</span>                    <span class="token comment">// 获得小于等于给定key的最大key</span>

<span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token function">firstEntry</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token comment">// 获取第一个键值对</span>
<span class="token class-name">K</span> <span class="token function">firstKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                         <span class="token comment">// 获取第一个键值对的key</span>
<span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token function">lastEntry</span><span class="token punctuation">(</span><span class="token punctuation">)</span>           <span class="token comment">// 获取最后一个键值对</span>
<span class="token class-name">K</span> <span class="token function">lastKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                          <span class="token comment">// 获取最后一个键值对的key</span>

<span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token function">higherEntry</span><span class="token punctuation">(</span><span class="token class-name">K</span> key<span class="token punctuation">)</span>    <span class="token comment">// 获得大于给定key的最小键值对</span>
<span class="token class-name">K</span> <span class="token function">higherKey</span><span class="token punctuation">(</span><span class="token class-name">K</span> key<span class="token punctuation">)</span>                   <span class="token comment">// 获得大于给定key的最小key</span>
<span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token function">lowerEntry</span><span class="token punctuation">(</span><span class="token class-name">K</span> key<span class="token punctuation">)</span>     <span class="token comment">// 获得小于给定key的最大键值对</span>
<span class="token class-name">K</span> <span class="token function">lowerKey</span><span class="token punctuation">(</span><span class="token class-name">K</span> key<span class="token punctuation">)</span>                    <span class="token comment">// 获得小于给定key的最大key</span>

<span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token function">pollFirstEntry</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token comment">// 删除第一个键值对</span>
<span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token function">pollLastEntry</span><span class="token punctuation">(</span><span class="token punctuation">)</span>       <span class="token comment">// 删除最后一个键值对</span>


<span class="token comment">// 截取相关的视图方法</span>

<span class="token comment">// 返回此映射的部分视图，其键值严格小于 toKey</span>
<span class="token class-name">SortedMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token function">headMap</span><span class="token punctuation">(</span><span class="token class-name">K</span> toKey<span class="token punctuation">)</span>

<span class="token comment">// 返回此映射的部分视图，其键小于（或等于，如果 inclusive 为 true）toKey</span>
<span class="token class-name">NavigableMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token function">headMap</span><span class="token punctuation">(</span><span class="token class-name">K</span> toKey<span class="token punctuation">,</span> <span class="token keyword">boolean</span> inclusive<span class="token punctuation">)</span>

<span class="token comment">// 返回此映射的部分视图，其键大于等于 fromKey</span>
<span class="token class-name">SortedMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token function">tailMap</span><span class="token punctuation">(</span><span class="token class-name">K</span> fromKey<span class="token punctuation">)</span>

<span class="token comment">// 返回此映射的部分视图，其键大于（或等于，如果 inclusive 为 true）fromKey</span>
<span class="token class-name">NavigableMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token function">tailMap</span><span class="token punctuation">(</span><span class="token class-name">K</span> fromKey<span class="token punctuation">,</span> <span class="token keyword">boolean</span> inclusive<span class="token punctuation">)</span>

<span class="token comment">// 返回此映射的部分视图，其键的范围从 fromKey 到 toKey。</span>
<span class="token class-name">NavigableMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token function">subMap</span><span class="token punctuation">(</span><span class="token class-name">K</span> fromKey<span class="token punctuation">,</span> <span class="token keyword">boolean</span> fromInclusive<span class="token punctuation">,</span> <span class="token class-name">K</span> toKey<span class="token punctuation">,</span> <span class="token keyword">boolean</span> toInclusive<span class="token punctuation">)</span>

<span class="token comment">// 返回此映射的部分视图，其键值的范围从 fromKey（包括）到 toKey（不包括）</span>
<span class="token class-name">SortedMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token function">subMap</span><span class="token punctuation">(</span><span class="token class-name">K</span> fromKey<span class="token punctuation">,</span> <span class="token class-name">K</span> toKey<span class="token punctuation">)</span>




<span class="token class-name">NavigableSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">&gt;</span></span> <span class="token function">descendingKeySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 返回此映射中所包含键的逆序 NavigableSet 视图</span>
<span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">&gt;</span></span> <span class="token function">navigableKeySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span>           <span class="token comment">// 返回此映射中所包含键的 NavigableSet 视图</span>
<span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token function">descendingMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span>           <span class="token comment">// 返回此映射中所包含映射关系的逆序视图</span>
<span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">K</span><span class="token punctuation">&gt;</span></span> <span class="token function">comparator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 返回对此映射中的键进行排序的比较器；如果此映射使用键的自然顺序，则返回 null</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-set-集合" tabindex="-1"><a class="header-anchor" href="#_2-set-集合"><span>2. Set(集合)</span></a></h2><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 1, Set是Collection子接口</span>
<span class="token comment">// 2, Set所描述的数据结构: 集合</span>
<span class="token comment">// 3, Set存储元素有些子实现有序(TreeSet, LinkedHashSet),  有些子实现无序 (HashSet)</span>
<span class="token comment">// 4, Set不允许存储重复数据</span>
<span class="token comment">// 5, 有些子实现允许存储null (HashSet, LinkedHashSet), 有些子实现不允许存储null(TreeSet)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Set接口并没有在Collection基础上增加什么api, 基本上沿用Collection的定义</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code> <span class="token keyword">boolean</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span>  
 <span class="token keyword">boolean</span> <span class="token function">addAll</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> c<span class="token punctuation">)</span> 

 <span class="token keyword">boolean</span> <span class="token function">contains</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> 
 <span class="token keyword">boolean</span> <span class="token function">containsAll</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> c<span class="token punctuation">)</span>  
 <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span>  

 <span class="token keyword">int</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
 <span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
 <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
 <span class="token keyword">boolean</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 

 <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 

 <span class="token keyword">boolean</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> 
 <span class="token keyword">boolean</span> <span class="token function">removeAll</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> c<span class="token punctuation">)</span> 
 <span class="token keyword">boolean</span> <span class="token function">retainAll</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> c<span class="token punctuation">)</span> 

 <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token function">toArray</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">)</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-hashset" tabindex="-1"><a class="header-anchor" href="#_1-hashset"><span>1) HashSet</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 1, HashSet是Set接口的子实现</span>
<span class="token comment">// 2, HashSet底层持有一个HashMap对象 --&gt; 我们添加到HashSet上的元素, 实际上都添加到底层HashMap上并且作为底层HashMap的key存在</span>
<span class="token comment">// 3, Hashset的特点基本上和HashMap的key一样</span>
<span class="token comment">// 4, HashSet存储元素无序</span>
<span class="token comment">// 5, HashSet不允许存储重复元素: </span>
<span class="token comment">// 6, HashSet允许存储null</span>
<span class="token comment">// 7, HashSet线程不安全</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// HashSet的构造方法:</span>

<span class="token comment">// 构造一个新的空set，其底层HashMap实例的默认初始容量是 16，加载因子是 0.75</span>
<span class="token class-name">HashSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                          

<span class="token comment">// 构造一个包含指定 collection 中的元素的新 set。 </span>
<span class="token class-name">HashSet</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> c<span class="token punctuation">)</span> 

 <span class="token comment">// 构造一个新的空set，其底层HashMap实例具有指定的初始容量和默认的加载因子（0.75）</span>
<span class="token class-name">HashSet</span><span class="token punctuation">(</span><span class="token keyword">int</span> initialCapacity<span class="token punctuation">)</span>       

<span class="token comment">// 构造一个新的空 set，其底层 HashMap 实例具有指定的初始容量和指定的加载因子。 </span>
<span class="token class-name">HashSet</span><span class="token punctuation">(</span><span class="token keyword">int</span> initialCapacity<span class="token punctuation">,</span> <span class="token keyword">float</span> loadFactor<span class="token punctuation">)</span>  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>HashSet的api 和 Set接口定义的一样, Set接口api和Collection一样</p><h3 id="_2-treeset" tabindex="-1"><a class="header-anchor" href="#_2-treeset"><span>2) TreeSet</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 1, TreeSet是Set接口的子实现</span>
<span class="token comment">// 2, TreeSet底层是一个TreeMap (红黑树)</span>
<span class="token comment">// 3, TreeSet的特点和TreeMap的key保持一致</span>
<span class="token comment">// 4, TreeSet存储元素大小有序</span>
<span class="token comment">// 5, TreeSet不存储重复元素 (大小重复)</span>
<span class="token comment">// 6, TreeSet不存储null  (null没有办法比较大小)</span>
<span class="token comment">// 7, TreeSet线程不安全</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>构造方法摘要 
<span class="token class-name">TreeSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
          构造一个新的空 set，该 set 根据其元素的自然顺序进行排序。 
<span class="token class-name">TreeSet</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> c<span class="token punctuation">)</span> 
          构造一个包含指定 collection 元素的新 <span class="token class-name">TreeSet</span>，它按照其元素的自然顺序进行排序。 
<span class="token class-name">TreeSet</span><span class="token punctuation">(</span><span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> comparator<span class="token punctuation">)</span> 
          构造一个新的空 <span class="token class-name">TreeSet</span>，它根据指定比较器进行排序。 
<span class="token class-name">TreeSet</span><span class="token punctuation">(</span><span class="token class-name">SortedSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> s<span class="token punctuation">)</span> 
          构造一个与指定有序 set 具有相同映射关系和相同排序的新 <span class="token class-name">TreeSet</span>。 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>TreeSet 类同时实现了 Set 接口和 SortedSet 接口。SortedSet 接口是 Set 接口的子接口，可以实现对集合进行自然排序，因此使用 TreeSet 类实现的 Set 接口默认情况下是自然排序的，这里的自然排序指的是升序排序。</p><ul><li><p><strong>TreeSet 只能对实现了 Comparable 接口的类对象进行排序</strong>，因为 Comparable 接口中有一个 <code>compareTo(Object o)</code> 方法用于比较两个对象的大小。例如 <code>a.compareTo(b)</code>：</p><ul><li><p>如果 a 和 b 相等，则该方法返回 0；</p></li><li><p>如果 a 大于 b，则该方法返回大于 0 的值；</p></li><li><p>如果 a 小于 b，则该方法返回小于 0 的值。</p></li></ul></li><li><p>在使用自然排序时只能向 TreeSet 集合中添加相同数据类型的对象，否则会抛出 ClassCastException 异常。</p></li></ul><p>Comparable接口类对象的比较方式：</p><table><thead><tr><th>类</th><th>比较方式</th></tr></thead><tbody><tr><td>BigDecimal、Biglnteger、 Byte、Double、Float、Integer、Long 及 Short</td><td>按数字大小比较</td></tr><tr><td>Character</td><td>按字符的 Unicode 值的数字大小比较</td></tr><tr><td>String</td><td>按字符串中字符的 Unicode 值的数字大小比较</td></tr></tbody></table><p>TreeSet的api</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code> <span class="token keyword">boolean</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span>  
 <span class="token keyword">boolean</span> <span class="token function">addAll</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> c<span class="token punctuation">)</span>  
 <span class="token keyword">boolean</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> 
 <span class="token keyword">int</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
 <span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
 <span class="token class-name">Object</span> <span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 


 <span class="token keyword">boolean</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
 <span class="token keyword">boolean</span> <span class="token function">contains</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> 

 <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token function">comparator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 

 <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
 <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token function">descendingIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 

 <span class="token class-name">SortedSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token function">headSet</span><span class="token punctuation">(</span><span class="token class-name">E</span> toElement<span class="token punctuation">)</span> <span class="token comment">// 返回此 set 的部分视图，其元素严格小于 toElement。</span>
 <span class="token class-name">NavigableSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token function">descendingSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 返回此 set 中所包含元素的逆序视图。 </span>

 <span class="token comment">// 返回此 set 的部分视图，其元素小于（或等于，如果 inclusive 为 true）toElement。</span>
 <span class="token class-name">NavigableSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token function">headSet</span><span class="token punctuation">(</span><span class="token class-name">E</span> toElement<span class="token punctuation">,</span> <span class="token keyword">boolean</span> inclusive<span class="token punctuation">)</span>



 <span class="token class-name">E</span> <span class="token function">first</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 返回此 set 中当前第一个（最低）元素。 </span>
 <span class="token class-name">E</span> <span class="token function">last</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 返回此 set 中当前最后一个（最高）元素。</span>

 <span class="token class-name">E</span> <span class="token function">ceiling</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span> 
 <span class="token class-name">E</span> <span class="token function">floor</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span>  <span class="token comment">// 返回此 set 中小于等于给定元素的最大元素；如果不存在这样的元素，则返回 null。 </span>

 <span class="token class-name">E</span> <span class="token function">lower</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span> <span class="token comment">// 返回此 set 中严格小于给定元素的最大元素；如果不存在这样的元素，则返回 null。           </span>
 <span class="token class-name">E</span> <span class="token function">higher</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span> <span class="token comment">// 返回此 set 中严格大于给定元素的最小元素；如果不存在这样的元素，则返回 null。 </span>

 <span class="token class-name">E</span> <span class="token function">pollFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 获取并移除第一个（最低）元素；如果此 set 为空，则返回 null。 </span>
 <span class="token class-name">E</span> <span class="token function">pollLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 获取并移除最后一个（最高）元素；如果此 set 为空，则返回 null。 </span>


 <span class="token comment">// 返回此 set 的部分视图，其元素范围从 fromElement 到 toElement。 </span>
 <span class="token class-name">NavigableSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token function">subSet</span><span class="token punctuation">(</span><span class="token class-name">E</span> fromElement<span class="token punctuation">,</span> <span class="token keyword">boolean</span> fromInclusive<span class="token punctuation">,</span> <span class="token class-name">E</span> toElement<span class="token punctuation">,</span> <span class="token keyword">boolean</span> toInclusive<span class="token punctuation">)</span> 

 <span class="token comment">// 返回此 set 的部分视图，其元素从 fromElement（包括）到 toElement（不包括）。 </span>
 <span class="token class-name">SortedSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token function">subSet</span><span class="token punctuation">(</span><span class="token class-name">E</span> fromElement<span class="token punctuation">,</span> <span class="token class-name">E</span> toElement<span class="token punctuation">)</span> 

 <span class="token comment">// 返回此 set 的部分视图，其元素大于等于 fromElement。 </span>
 <span class="token class-name">SortedSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token function">tailSet</span><span class="token punctuation">(</span><span class="token class-name">E</span> fromElement<span class="token punctuation">)</span> 

 <span class="token comment">//  返回此 set 的部分视图，其元素大于（或等于，如果 inclusive 为 true）fromElement。 </span>
 <span class="token class-name">NavigableSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token function">tailSet</span><span class="token punctuation">(</span><span class="token class-name">E</span> fromElement<span class="token punctuation">,</span> <span class="token keyword">boolean</span> inclusive<span class="token punctuation">)</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-linkedhashset" tabindex="-1"><a class="header-anchor" href="#_3-linkedhashset"><span>3) LinkedHashSet</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 1, LinkedHashSet是HashSet的子类</span>
<span class="token comment">// 2, LinkedHashSet 底层是LinkedHashMap (双向链表区别)</span>
<span class="token comment">// 3, LinkedHashSet 有序</span>
<span class="token comment">// 4, LinkedHashSet 不允许存储重复元素</span>
<span class="token comment">// 5, LinkedHashSet 允许存储null</span>
<span class="token comment">// 6, 线程不安全</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">LinkedHashSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
          构造一个带默认初始容量 <span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span> 和加载因子 <span class="token punctuation">(</span><span class="token number">0.75</span><span class="token punctuation">)</span> 的新空链接哈希 set。 
<span class="token class-name">LinkedHashSet</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> c<span class="token punctuation">)</span> 
          构造一个与指定 collection 中的元素相同的新链接哈希 set。 
<span class="token class-name">LinkedHashSet</span><span class="token punctuation">(</span><span class="token keyword">int</span> initialCapacity<span class="token punctuation">)</span> 
          构造一个带指定初始容量和默认加载因子 <span class="token punctuation">(</span><span class="token number">0.75</span><span class="token punctuation">)</span> 的新空链接哈希 set。 
<span class="token class-name">LinkedHashSet</span><span class="token punctuation">(</span><span class="token keyword">int</span> initialCapacity<span class="token punctuation">,</span> <span class="token keyword">float</span> loadFactor<span class="token punctuation">)</span> 
          构造一个带有指定初始容量和加载因子的新空链接哈希 set。 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>LinkedHashSet 的 api 和 HashSet的api 和 Set接口定义的都一样, Set接口api和Collection一样</p><p><strong>总结</strong>: api 特点(增删改查) 记住.</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Collection</span><span class="token operator">:</span> 
       <span class="token class-name">List</span><span class="token operator">:</span> 线性表
            <span class="token class-name">ArrayList</span><span class="token punctuation">;</span>
            <span class="token class-name">LinkedList</span><span class="token punctuation">;</span>
            <span class="token class-name">Vector</span><span class="token punctuation">(</span>之后<span class="token class-name">Stack</span><span class="token punctuation">)</span><span class="token operator">:</span>

       <span class="token class-name">Queue</span><span class="token operator">:</span> 队列
           <span class="token class-name">Deque</span>接口双端队列<span class="token operator">/</span>栈
                <span class="token class-name">ArrayDeque</span>
           <span class="token class-name">BlockingQueue</span><span class="token operator">:</span> 接口阻塞队列

       <span class="token class-name">Set</span><span class="token operator">:</span> 集合
           <span class="token class-name">HashSet</span> <span class="token punctuation">(</span><span class="token class-name">LinkedHashSet</span><span class="token punctuation">)</span>
           <span class="token class-name">TreeSet</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Map</span><span class="token operator">:</span>
         <span class="token class-name">HashMap</span> <span class="token punctuation">(</span><span class="token class-name">LinkedHashMap</span><span class="token punctuation">)</span>
         <span class="token class-name">TreeMap</span>
         <span class="token class-name">Hashtable</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>重点级别1: HashMap; ArrayList</p><p>重点级别2: LinkedList; HashSet;</p><p>重点级别3: LinkedHashMap/ TreeMap/ LinkedHashSet / TreeSet</p><p>重点级别4: 剩余</p>`,76),c=[p];function l(o,i){return s(),a("div",null,c)}const d=n(t,[["render",l],["__file","set和map.html.vue"]]),m=JSON.parse('{"path":"/java/syntax/collection/set%E5%92%8Cmap.html","title":"Set和Map","lang":"en-US","frontmatter":{"order":15,"description":"Set和Map 1. Map接口 Map 是一种键-值对（key-value）集合，Map 集合中的每一个元素都包含一个键（key）对象和一个值（value）对象。用于保存具有映射关系的数据。 Map接口的常用方法： 注意: 为什么Map要提供三个视图方法（keySet、values、entrySet） 因为map没有定义Iterator方法, 所以我...","head":[["meta",{"property":"og:url","content":"https://x.app/notebook/java/syntax/collection/set%E5%92%8Cmap.html"}],["meta",{"property":"og:site_name","content":"Notebook"}],["meta",{"property":"og:title","content":"Set和Map"}],["meta",{"property":"og:description","content":"Set和Map 1. Map接口 Map 是一种键-值对（key-value）集合，Map 集合中的每一个元素都包含一个键（key）对象和一个值（value）对象。用于保存具有映射关系的数据。 Map接口的常用方法： 注意: 为什么Map要提供三个视图方法（keySet、values、entrySet） 因为map没有定义Iterator方法, 所以我..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-04-15T09:06:58.000Z"}],["meta",{"property":"article:author","content":"Mr.Topple"}],["meta",{"property":"article:modified_time","content":"2024-04-15T09:06:58.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Set和Map\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-04-15T09:06:58.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Topple\\",\\"url\\":\\"https://www.baidu.com\\"}]}"]]},"headers":[{"level":2,"title":"1. Map接口","slug":"_1-map接口","link":"#_1-map接口","children":[{"level":3,"title":"1) HashMap","slug":"_1-hashmap","link":"#_1-hashmap","children":[]},{"level":3,"title":"2) LinkedHashMap","slug":"_2-linkedhashmap","link":"#_2-linkedhashmap","children":[]},{"level":3,"title":"3) Hashtable","slug":"_3-hashtable","link":"#_3-hashtable","children":[]},{"level":3,"title":"4) TreeMap","slug":"_4-treemap","link":"#_4-treemap","children":[]}]},{"level":2,"title":"2. Set(集合)","slug":"_2-set-集合","link":"#_2-set-集合","children":[{"level":3,"title":"1) HashSet","slug":"_1-hashset","link":"#_1-hashset","children":[]},{"level":3,"title":"2) TreeSet","slug":"_2-treeset","link":"#_2-treeset","children":[]},{"level":3,"title":"3) LinkedHashSet","slug":"_3-linkedhashset","link":"#_3-linkedhashset","children":[]}]}],"git":{"createdTime":1713172018000,"updatedTime":1713172018000,"contributors":[{"name":"Neil","email":"msdrizzle@outlook.com","commits":1}]},"readingTime":{"minutes":19.04,"words":5712},"filePathRelative":"java/syntax/collection/set和map.md","localizedDate":"April 15, 2024","autoDesc":true}');export{d as comp,m as data};
