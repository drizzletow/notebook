import{_ as c}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as t,o as l,c as i,b as n,a as e,w as u,d as s,e as a}from"./app-C9pIHXR3.js";const r="/notebook/assets/image-20220217210243271-DRg4sAFF.png",d="/notebook/assets/image-20211018023119385-Xg84O7U4.png",k="/notebook/assets/image-20220218132819531-BwyIKpfm.png",m="/notebook/assets/image-20220218162134606-BJrOR2-H.png",v="/notebook/assets/image-20220219135347553-D199NOXt.png",b="/notebook/assets/image-20220219150027978-C8G1QAEd.png",g="/notebook/assets/image-20220219145810616-C8VDAShb.png",f="/notebook/assets/image-20220219145224024-2FWHlFYH.png",h="/notebook/assets/image-20220222085601424-BRUKx22h.png",w="/notebook/assets/image-20220217202032863-DD446Ik6.png",y={},S=a('<h2 id="java流的分类" tabindex="-1"><a class="header-anchor" href="#java流的分类"><span>Java流的分类</span></a></h2><p>Java中所有数据都是使用流读写的, 流是一组有序的数据序列，将数据从一个地方带到另一个地方。</p><p>数据流是 Java 进行 I/O 操作的对象，它按照不同的标准可以分为不同的类别。</p><ul><li><p>按照流的方向主要分为：输入（Input）流和输出（Output）流两种</p><figure><img src="'+r+'" alt="image-20220217210243271" tabindex="0" loading="lazy"><figcaption>image-20220217210243271</figcaption></figure></li><li><p>数据流按照数据单位的不同分为：字节流、字符流</p><ul><li><p>字节流: 逻辑单位是字节,一个字节一个字节的传输 0000 0000 1B</p></li><li><p>字符流: 逻辑单位是字符(理解为一种文化符号, 你好, ABC, の)，一个字符一个字符的传输</p></li><li><p>一般情况下，如果是文本文件,一般采用字符流方便一些，对于非文本文件,一般采用字节流(字节流是万能的)</p></li></ul></li><li><p>按照功能可以划分为：节点流、处理流</p></li></ul><p><strong>常用的IO流实现类</strong>：</p><figure><img src="'+d+`" alt="常用的IO流实现类" tabindex="0" loading="lazy"><figcaption>常用的IO流实现类</figcaption></figure><h2 id="java字节流" tabindex="-1"><a class="header-anchor" href="#java字节流"><span>Java字节流</span></a></h2><p>Java中的字节流（Byte Streams）是I/O（输入/输出）操作中处理二进制数据的基础组件。字节流允许以字节（byte，8位的序列，即8位二进制数据）的形式读取或写入数据，这对于处理诸如图片、音频、视频、压缩文件或任何非文本的原始二进制数据尤其有用。</p><p>Java的字节流主要通过<code>java.io</code>包中的几个核心类来实现，其中最重要的是<code>InputStream</code>和<code>OutputStream</code>。这两个类是所有字节流操作的基类，提供了读取字节和写入字节的基本方法。</p><h3 id="字节输出流" tabindex="-1"><a class="header-anchor" href="#字节输出流"><span>字节输出流</span></a></h3><ul><li><strong>功能</strong>：OutputStream抽象类，定义了写入二进制数据的基本操作。</li><li><strong>子类</strong>：包括<code>FileOutputStream</code>用于写入文件，<code>ByteArrayOutputStream</code>写入字节数组，<code>PrintStream</code>用于格式化输出等。</li></ul><p>OutputStream 抽象类 的常用方法：</p><ul><li><code>void write(int b)</code>：写入一个字节（参数是 int 类型），为了提高 I/O 操作的效率，建议尽量使用 write() 方法的另外两种形式</li><li><code>void write(byte[] b)</code>：把字节数组中的所有字节写到输出流中</li><li><code>void write(byte[] b,int off,int len)</code>：off 指定字节 数组中的起始下标，len 表示元素个数</li><li><code>void close()</code>：关闭输出流</li><li><code>void flush()</code>：使用 flush() 方法则可以强制将缓冲区中的数据写入输出流， 并清空缓冲区</li></ul><div class="hint-container tip"><p class="hint-container-title">注意</p><p>在创建 FileOutputStream 类的对象时，如果指定的文件不存在，则创建一个新文件；<strong>如果文件已存在，则清除原文件的内容重新写入</strong></p></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OutputStreamDemo</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token class-name">FileOutputStream</span> fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">&quot;.\\\\data\\\\output.txt&quot;</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//append为true表示追加写入</span>
        <span class="token comment">// 1. 写入指定字节</span>
        fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token number">97</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//a</span>
        fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token number">98</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token number">99</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 2. 写入字节数组</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token char">&#39;,&#39;</span><span class="token punctuation">,</span><span class="token number">97</span><span class="token punctuation">,</span><span class="token number">98</span><span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b2 <span class="token operator">=</span> <span class="token string">&quot;,abcde&quot;</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
        fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>b2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 指定写入的字节数组内容</span>
        fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>b2<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>b2<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 3. 写数据时如何实现换行？ （ ）</span>
        fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;\\n\\r&quot;</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;Hello\\n\\r&quot;</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        fos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container info"><p class="hint-container-title">两种输出换行符</p><ul><li><p><code>System.lineSeparator() </code> 根据不同的操作系统使用对应的换行符</p></li><li><p>各个操作系统的换行符不同 win: <code>\\r\\n</code> ， mac: <code>\\r</code> , linux: <code>\\n</code> ，直接使用 <code>\\r\\n</code> 即可三个平台都生效</p><table><thead><tr><th>缩写</th><th>ASCⅡ转义</th><th>系统</th><th>ASCⅡ值</th></tr></thead><tbody><tr><td>CR</td><td><code>\\r</code></td><td>MacIntosh（早期的Mac）</td><td>13</td></tr><tr><td>LF</td><td><code>\\n</code></td><td>Unix/Linux/Mac OS X</td><td>10</td></tr><tr><td>CR LF</td><td><code>\\r\\n</code></td><td>Windows</td><td></td></tr></tbody></table><ul><li>CR：Carriage Return，对应ASCII中转义字符<code>\\r</code>，表示回车</li><li>LF：Linefeed，对应ASCII中转义字符<code>\\n</code>，表示换行</li><li>CRLF：Carriage Return &amp; Linefeed，<code>\\r\\n</code>，表示回车并换行</li></ul></li></ul></div><h3 id="字节输入流" tabindex="-1"><a class="header-anchor" href="#字节输入流"><span>字节输入流</span></a></h3><ul><li><strong>功能</strong>：InputStream 抽象类 用于读取二进制数据。</li><li><strong>子类</strong>：<code>InputStream</code>有许多子类，如<code>FileInputStream</code>用于读取文件，<code>ByteArrayInputStream</code>读取字节数组，<code>PipedInputStream</code>用于线程间通信等。</li></ul><p><strong>InputStream抽象类的常用方法</strong>:</p><ul><li><p><code>int read()</code>：从输入流中读取一个 8 位的字节，并把它转换为 0~255 的整数，最后返回整数</p><p>如果返回 -1，则表示已经到了输入流的末尾。为了提高 I/O 操作的效率，建议尽量使用 read() 方法的另外两种形式</p></li><li><p><code>int read(byte[] b)</code>：从输入流中读取若干字节，并把它们保存到字节数组中。返回结果读到数组中的字节数</p></li><li><p><code>int read(byte[] b, int off, int len)</code>：off 指定在字节数组中开始保存数据的起始下标；len 指定读取的字节数</p></li><li><p><code>void close()</code>：关闭输入流</p></li><li><p><code>int available()</code>：返回可以从输入流中读取的字节数</p></li><li><p><code>long skip(long n)</code>：从输入流中跳过参数 n 指定数目的字节。该方法返回跳过的字节数</p></li><li><p><code>void mark(int readLimit)</code>：在输入流的当前位置开始设置标记</p></li><li><p><code>boolean markSupported()</code>：判断当前输入流是否允许设置标记，是则返回 true，否则返回 false</p></li><li><p><code>void reset()</code>：将输入流的指针返回到设置标记的起始处</p></li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileInputStreamDemo</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">FileInputStream</span> fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">&quot;abc.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// read() 方法一次读一个字节（8位）</span>
            <span class="token keyword">int</span> r1 <span class="token operator">=</span> fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> r2 <span class="token operator">=</span> fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>r1 <span class="token operator">+</span> <span class="token string">&quot;, &quot;</span> <span class="token operator">+</span> r2<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// int read(byte[] b) 从输入流中读取若干字节，并把它们保存到字节数组中</span>
            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> count <span class="token operator">=</span> fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;读取的字符个数：&quot;</span> <span class="token operator">+</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;读到的字符：&quot;</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+k+`" alt="result" tabindex="0" loading="lazy"><figcaption>result</figcaption></figure><p>【应用】：利用字节流复制图片示例</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 复制图片</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CopyPicture</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">FileInputStream</span> fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">&quot;.\\\\data\\\\io\\\\abc.png&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">FileOutputStream</span> fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">&quot;.\\\\data\\\\io\\\\abc_copy.png&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bys <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> len<span class="token punctuation">;</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>bys<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>bys<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            fis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            fos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="字节缓冲流" tabindex="-1"><a class="header-anchor" href="#字节缓冲流"><span>字节缓冲流</span></a></h3><p>字节缓冲流（Byte Buffering Streams）是Java I/O体系中用来提高字节流读写效率的一类特殊流。</p><p>它们通过引入内部缓冲区来减少直接与物理介质（如磁盘或网络）的交互次数，从而提升了数据读写速度。</p><p>Java中的字节缓冲流主要包括<code>BufferedInputStream</code>和<code>BufferedOutputStream</code>两个类，它们分别继承自<code>FilterInputStream</code>和<code>FilterOutputStream</code>，是字节流的装饰器模式实现。</p><p><strong>使用场景</strong>:</p><ul><li><strong>频繁读写小块数据</strong>：对于频繁的小规模读写操作，缓冲流能显著减少系统调用的开销。</li><li><strong>文件处理</strong>：处理大文件时，缓冲流能有效减少磁盘I/O，提升处理速度。</li><li><strong>网络通信</strong>：在网络数据传输中，缓冲流可以减少网络I/O，提高数据传输效率。</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">BufferedOutputStream</span><span class="token punctuation">(</span><span class="token class-name">QutputStream</span> out<span class="token punctuation">)</span>  <span class="token comment">// 字节缓冲输出流</span>
<span class="token class-name">BufferedInputStream</span><span class="token punctuation">(</span><span class="token class-name">InputStream</span> in<span class="token punctuation">)</span>     <span class="token comment">// 字节缓冲输入流</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">为什么构造方法需要的是字节流，而不是具体的文件或者路径呢?</p><ul><li>因为字节缓冲流<strong>仅仅提供缓冲区</strong>（默认为 8kb ），而真正的读写数据还得依靠基本的字节流对象进行操作</li><li>这种需要传递底层类对象的， 又称为包装类</li></ul></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BufferStreamDemo</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">{</span>
        <span class="token comment">// 字节缓冲输出流：</span>
        <span class="token class-name">FileOutputStream</span> fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">&quot;.\\\\data\\\\buffer\\\\buffer.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">BufferedOutputStream</span> bos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedOutputStream</span><span class="token punctuation">(</span>fos<span class="token punctuation">)</span><span class="token punctuation">;</span>
        bos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;Hello\\r\\n&quot;</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        bos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;World\\r\\n&quot;</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// bos.flush(); // 显式刷新缓冲区</span>
        bos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// close() 内会调用 flush() 方法</span>

        <span class="token comment">// 字节缓冲输入流：</span>
        <span class="token class-name">FileInputStream</span> fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">&quot;.\\\\data\\\\buffer\\\\buffer.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">BufferedInputStream</span> bis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedInputStream</span><span class="token punctuation">(</span>fis<span class="token punctuation">)</span><span class="token punctuation">;</span>
        bis<span class="token punctuation">.</span><span class="token function">mark</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 设置标记</span>

        <span class="token comment">// 一次读取一个字节：</span>
        <span class="token keyword">int</span> b<span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>b <span class="token operator">=</span> bis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// 将输入流的指针返回到设置标记的起始处</span>
        bis<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  

        <span class="token comment">// 一次读取一个字节数组：</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bys <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> len<span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> bis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>bys<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>bys<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        bis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p><code>BufferedInputStream</code>类在另一个输入流之上添加了缓冲功能。它内部维护了一个字节数组作为缓冲区。当从输入流中读取数据时，不是每次读取一个字节就进行一次底层I/O操作，而是尽可能多地预先读取数据到缓冲区中。这样，后续的读取操作就可以直接从缓冲区获取数据，减少了昂贵的I/O操作次数，提升了读取效率。此外，<code>BufferedInputStream</code>还支持<code>mark</code>和<code>reset</code>方法，允许在流中设置标记点并返回到这个标记点重新读取数据。</p></li><li><p><code>BufferedOutputStream</code>类则为输出操作提供了类似的缓冲机制。它同样使用一个内部缓冲区来暂存数据，当调用<code>write</code>方法时，数据并非立即写入到目标设备，而是先写入缓冲区。只有当缓冲区满或者显式调用<code>flush</code>或<code>close</code>方法时，数据才会一次性从缓冲区写出到目标文件或网络等输出设备，这大大减少了实际的I/O操作次数，提高了写入效率。</p></li></ul><h2 id="java字符流" tabindex="-1"><a class="header-anchor" href="#java字符流"><span>Java字符流</span></a></h2><p>Java字符流（Character Streams）是专门设计用于处理文本数据的I/O流，它们以字符（char，即16位Unicode字符）为基本单位进行读写操作，而不是字节。字符流主要用于处理文本文件或任何需要按字符编码进行转换的数据。与字节流相比，字符流更便于处理文本数据，因为它们内置了对字符编码的处理。</p><p>Java字符流的核心类位于<code>java.io</code>包中，主要包括Reader，Writer两个抽象基类及其子类：</p><p><strong>字符流特点</strong>：</p><ul><li><strong>字符编码</strong>：字符流在处理文本时会自动处理字符编码转换，例如，<code>FileReader/FileWriter</code>默认使用平台的字符编码，而可以通过指定编码构造函数来改变。</li><li><strong>缓冲</strong>：<code>BufferedReader</code>和<code>BufferedWriter</code>通过添加缓冲区减少实际的I/O操作次数，提高效率。</li><li><strong>转换流</strong>：为了桥接字节流和字符流，Java提供了<code>InputStreamReader</code>和<code>OutputStreamWriter</code>，可以将字节流转换为字符流，便于按字符编码读写数据。</li></ul><figure><img src="`+m+`" alt="Java字符流" tabindex="0" loading="lazy"><figcaption>Java字符流</figcaption></figure><p>字符流在处理文本数据时提供了更为方便和高效的操作方式，特别是在需要考虑字符编码和文本格式的场景下。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code> <span class="token comment">// 获取当前系统编码</span>
 <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">&quot;file.encoding&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="字符输入流" tabindex="-1"><a class="header-anchor" href="#字符输入流"><span>字符输入流</span></a></h3><p>Java的字符输入流体系主要基于<code>java.io.Reader</code>抽象类及其众多子类实现。</p><p><strong>Reader类</strong>：<br><code>Reader</code>作为抽象类,是所有字符输入流的基类，它定义了一系列用于读取字符数据的方法，比如<code>read()</code>方法读取单个字符，<code>read(char[])</code>读取字符数组等。</p><p><strong>Reader类中的read()方法</strong>：</p><table><thead><tr><th>方法名及返回值类型</th><th>说明</th></tr></thead><tbody><tr><td>int read()</td><td>从输入流中读取一个字符，并把它转换为 0~65535 的整数</td></tr><tr><td>int read(char[] cbuf)</td><td>从输入流中读取若干个字符，并把它们保存到指定的字符数组中</td></tr><tr><td>int read(char[] cbuf, int off, int len)</td><td>off 指定在字符数组中开始保存数据的起始下标，len 指定读取的字符数</td></tr></tbody></table><div class="hint-container info"><p class="hint-container-title">Reader常见子类</p><ul><li><p><strong>FileReader</strong>：用于从文件中读取字符数据。它直接继承自<code>InputStreamReader</code>，并根据系统默认的字符编码读取文件内容。</p></li><li><p><strong>BufferedReader</strong>：在另一个字符输入流（如<code>FileReader</code>）基础上添加了缓冲功能，提高了读取效率。特别是<code>readLine()</code>方法可以方便地读取整行文本。</p></li><li><p><strong>InputStreamReader</strong>：这是一个桥接字节流到字符流的类，允许指定字符编码来读取字节流中的字符数据。常用于将<code>InputStream</code>转换为按指定编码读取的字符流。</p></li><li><p><strong>StringReader</strong>：用于从字符串中读取字符数据，将字符串作为字符源。</p></li></ul></div><p><strong>使用场景</strong>：</p><ul><li><strong>文本文件处理</strong>：当需要逐字符或按行读取文本文件时，使用<code>FileReader</code>或<code>BufferedReader</code>配合<code>FileInputStream</code>是最常见的应用场景。</li><li><strong>内存数据读取</strong>：处理程序内部的字符串数据时，可以使用<code>StringReader</code>。</li><li><strong>网络和I/O操作</strong>：结合<code>InputStreamReader</code>，可以按指定编码读取网络数据或进行其他I/O操作中的字符数据读取。</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 使用FileReader读取文件</span>
<span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">FileReader</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">&quot;example.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> ch<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ch <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> ch<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>字符输入流简化了对文本数据的处理过程，特别是在需要考虑字符编码和文本行读取的场景下，提供了更加便捷和高效的API。</p><h3 id="字符输出流" tabindex="-1"><a class="header-anchor" href="#字符输出流"><span>字符输出流</span></a></h3><p>字符输出流在Java中是用来向输出目的地（如文件、网络连接、内存缓冲区等）写入字符数据的流对象。这类流基于<code>java.io.Writer</code>抽象类及其子类实现，专注于以字符为基本单位进行数据输出操作，非常适合处理文本信息。</p><p><code>Writer</code>是所有字符输出流的基类，它定义了一系列写入字符数据的方法，如<code>write(char[])</code>用于写入字符数组，<code>write(String str)</code>用于写入字符串等。此外，还提供了<code>flush()</code>方法用于刷新缓冲区，以及<code>close()</code>方法用于关闭流并释放系统资源。</p><div class="hint-container info"><p class="hint-container-title">常见子类</p><ul><li><strong>FileWriter</strong>：用于将字符数据写入文件。创建时可以指定是否追加模式，如果不指定，默认会覆盖原有文件内容。</li><li><strong>BufferedWriter</strong>：提供了一个带缓冲区的字符输出流，可以提高写入效率，特别是频繁写入小块数据时。它通常包装一个基本的字符输出流，如<code>FileWriter</code>。</li><li><strong>PrintWriter</strong>：除了基本的字符写入功能外，还提供了一些便捷的打印方法，如<code>println()</code>，可以自动添加换行符，适合于打印日志或简单文本输出。</li><li><strong>CharArrayWriter</strong>：将字符数据写入一个可增长的字符数组中，适用于需要将字符数据暂存于内存的情况。</li></ul></div><p><strong>Writer类中的write()方法和append()方法</strong>：</p><table><thead><tr><th>方法名及返回值类型</th><th>说明</th></tr></thead><tbody><tr><td>void write(int c)</td><td>向输出流中写入一个字符</td></tr><tr><td>void write(char[] cbuf)</td><td>把字符数组中的所有字符写到输出流中</td></tr><tr><td>void write(char[] cbuf,int off,int len)</td><td>off 指定 字符数组中的起始下标，len 表示元素个数</td></tr><tr><td>void write(String str)</td><td>向输出流中写入一个字符串</td></tr><tr><td>void write(String str, int off, int len)</td><td>off 指定字符串中的起 始偏移量，len 表示字符个数</td></tr><tr><td>append(char c)</td><td>将参数 c 指定的字符添加到输出流中</td></tr><tr><td>append(charSequence esq)</td><td>将参数 esq 指定的字符序列添加到输出流中</td></tr><tr><td>append(charSequence esq, int start, int end)</td><td>start 指第一个字符的索引，end 指最后一个字符后面的字符索引</td></tr></tbody></table><p><strong>使用步骤</strong>:</p><ol><li><strong>创建输出流对象</strong>：根据需要，创建相应的字符输出流子类实例。如使用<code>FileWriter</code>时，需要指定输出文件的路径。</li><li><strong>写入数据</strong>：使用流对象的<code>write()</code>方法将字符数据写入到流中。数据最初会被写入到内存缓冲区中。</li><li><strong>刷新缓冲区</strong>：调用<code>flush()</code>方法可以立即将缓冲区中的数据刷写到目标输出源，确保数据被立即写入。</li><li><strong>关闭流</strong>：操作完成后，使用<code>close()</code>方法关闭流，这也会隐式地执行一次<code>flush()</code>操作，确保所有缓冲数据被写出，并释放系统资源。</li></ol><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileWriter</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CharacterOutputStreamExample</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token comment">// 创建FileWriter对象，指定输出文件</span>
            <span class="token class-name">FileWriter</span> writer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span><span class="token string">&quot;output.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            
            <span class="token comment">// 写入字符数据</span>
            writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;这是一个使用FileWriter写入的示例文本。&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            
            <span class="token comment">// 刷新缓冲区（可选，在关闭前确保数据写入）</span>
            writer<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            
            <span class="token comment">// 关闭流</span>
            writer<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;数据已成功写入文件。&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>字符输出流为处理文本输出提供了灵活且高效的方式，尤其是在处理字符编码敏感的文本文件时更为方便。</p><p>字符输入输出流综合示例：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileReaderDemo</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">{</span>
        <span class="token class-name">FileReader</span> fr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">&quot;.\\\\data\\\\charstream\\\\a.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">FileWriter</span> fw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span><span class="token string">&quot;.\\\\data\\\\charstream\\\\a_copy.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// int ch;</span>
        <span class="token comment">// while ((ch = fr.read())!= -1){</span>
        <span class="token comment">//   fw.write(ch);</span>
        <span class="token comment">// }</span>

        <span class="token comment">// 按数组读写</span>
        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> len<span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>len<span class="token operator">=</span>fr<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>chs<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            fw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>chs<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        fr<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        fw<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="字符转换流" tabindex="-1"><a class="header-anchor" href="#字符转换流"><span>字符转换流</span></a></h3><p>字符转换流在Java中是用来在字节流和字符流之间进行转换的桥梁，主要用于处理文本数据时需要考虑字符编码的场合。它们使得开发者能够按字符读写数据，同时处理不同编码格式之间的转换问题。主要涉及两个核心类：<code>InputStreamReader</code>和<code>OutputStreamWriter</code>。</p><p><strong>InputStreamReader</strong>：</p><ul><li><strong>作用</strong>：<code>InputStreamReader</code>是一个连接字节流到字符流的桥梁，它将字节流解码为字符。这意味着它读取来自底层字节流的原始字节，并根据指定的字符编码将其转换为字符。这对于从字节流中正确读取文本数据特别有用，尤其是在处理非ASCII字符时。</li><li><strong>使用场景</strong>：当你需要从字节输入流（如<code>FileInputStream</code>、<code>ByteArrayInputStream</code>）中读取文本，并且关心文本的字符编码时，可以使用<code>InputStreamReader</code>并为其指定正确的字符编码。</li></ul><p><strong>OutputStreamWriter</strong>：</p><ul><li><strong>作用</strong>：与<code>InputStreamReader</code>相反，<code>OutputStreamWriter</code>是字符流到字节流的转换器，它负责将字符数据编码为字节并写入到字节流中。这在需要将字符数据（如字符串）写入到文件或网络时非常有用，因为它允许你控制字符数据的编码方式。</li><li><strong>使用场景</strong>：当你需要将字符数据写入到字节输出流（如<code>FileOutputStream</code>、<code>ByteArrayOutputStream</code>），并且希望控制输出的字符编码时，应使用<code>OutputStreamWriter</code>。</li></ul><p><strong>字符转换流特点</strong>：</p><ul><li><strong>编码灵活性</strong>：这两个类都允许你指定字符编码，如果不指定，则使用平台默认的字符编码。</li><li><strong>转换功能</strong>：它们不仅转换数据类型，还在必要时处理字符编码的转换，确保文本数据的正确读写。</li><li><strong>结合使用</strong>：通常，<code>InputStreamReader</code>和<code>OutputStreamWriter</code>会和文件或网络相关的字节流一起使用，形成完整的读写流程。</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 从字节流读取文本并转换字符编码</span>
<span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">InputStreamReader</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">&quot;input.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;UTF-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 读取操作</span>
<span class="token punctuation">}</span>

<span class="token comment">// 将字符流写入文件并指定编码</span>
<span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">OutputStreamWriter</span> writer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OutputStreamWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">&quot;output.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;UTF-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;你好，世界！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>字符转换流是Java I/O体系中处理字符编码转换的关键工具，尤其是在国际化应用开发中，能够确保文本数据的正确处理和显示。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CharStreamDemo</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token class-name">FileInputStream</span> fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">&quot;.\\\\data\\\\charstream\\\\a.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">FileOutputStream</span> fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">&quot;.\\\\data\\\\charstream\\\\a.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">InputStreamReader</span> isr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>fis<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">OutputStreamWriter</span> osw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OutputStreamWriter</span><span class="token punctuation">(</span>fos<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 多种写入方式</span>
        osw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token number">97</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment">//写入一个字符 a  相当于：osw.write(&#39;a&#39;);</span>
        osw<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token char">&#39;b&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        osw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;abc&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">// 写入字符串</span>
        osw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;uvwxyz&quot;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// off 指定字符串中的起始偏移量，len表示字符个数</span>
        osw<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//写入字符数组：</span>
        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chs <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token char">&#39;x&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;y&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;z&#39;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
        osw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>chs<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment">// 把字符数组中的所有字符写到输出流中</span>
        osw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>chs<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        osw<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//  一次读一个字符数据</span>
        <span class="token comment">/*int ch;
        while ((ch = isr.read()) != -1) {
            System.out.print((char) ch);
        }*/</span>

        <span class="token comment">// 一次读取一个字符数组数据</span>
        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chsArr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> len<span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> isr<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>chsArr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>chsArr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="字符缓冲流" tabindex="-1"><a class="header-anchor" href="#字符缓冲流"><span>字符缓冲流</span></a></h3><p><strong>BufferedReader和BufferedWriter</strong>：</p><p>【注】虽然字符流缓冲区大小和字节流缓冲区一样是一个 8192 的常量，但是真正存储数据的 数组的数据类型 并不相同</p><ul><li>字节流缓冲区的单位是 byte ，<code>protected volatile byte buf[]; </code> 故其缓冲区实际大小为 8kb</li><li>字符流缓冲区的单位是 char ，<code>private char cb[]; </code> 故其缓冲区实际大小为 16kb</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 构造函数</span>
<span class="token keyword">public</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token class-name">Reader</span> in<span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">BufferedWriter</span><span class="token punctuation">(</span><span class="token class-name">Writer</span> out<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BufferedReaderDemo</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">{</span>
        <span class="token class-name">FileWriter</span> fw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span><span class="token string">&quot;.\\\\data\\\\charstream\\\\b.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">BufferedWriter</span> bw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedWriter</span><span class="token punctuation">(</span>fw<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            bw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;Hello&quot;</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
            bw<span class="token punctuation">.</span><span class="token function">newLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 相当于 bw.write(&quot;\\r\\n&quot;);</span>
            <span class="token comment">// bw.flush();</span>
        <span class="token punctuation">}</span>
        bw<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">FileReader</span> fr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">&quot;.\\\\data\\\\charstream\\\\b.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">BufferedReader</span> br <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span>fr<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// int ch;</span>
        <span class="token comment">// while ((ch=br.read())!=-1){</span>
        <span class="token comment">//    System.out.print((char) ch);</span>
        <span class="token comment">// }</span>

        <span class="token comment">// char[] chs = new char[1024];</span>
        <span class="token comment">// int len;</span>
        <span class="token comment">// while ((len=br.read(chs))!=-1){</span>
        <span class="token comment">//    System.out.println(new String(chs, 0, len));</span>
        <span class="token comment">// }</span>

        <span class="token comment">// readLine() 读取一行数据（不包含换行符）</span>
        <span class="token class-name">String</span> line<span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>line <span class="token operator">=</span> br<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="缓冲流和flush" tabindex="-1"><a class="header-anchor" href="#缓冲流和flush"><span>缓冲流和flush</span></a></h3><p>缓冲字节流和字符流都使用了缓冲区，详细如下：</p><figure><img src="`+v+'" alt="image-20220219135347553" tabindex="0" loading="lazy"><figcaption>image-20220219135347553</figcaption></figure><p>【注】flush方法的使用说明：</p><ul><li><p>调用close()方法时会自动flush, 在不调用close()的情况下，缓冲区不满，又需要把缓冲区的内容写入到文件或通过网络发送到别的机器时，才需要调用flush();</p></li><li><p>FileInputStream的 flush()是继承于其父类OutputStream的，但是OutputStream类的flush()什么都没做。</p></li><li><p>当OutputStream是BufferedOutputStream时，BufferedOutputStream中重写了flush()方法，并在其中调用了flushBuffer()方法以及OutputStream的flush()方法</p></li></ul><h2 id="其他常用流" tabindex="-1"><a class="header-anchor" href="#其他常用流"><span>其他常用流</span></a></h2><h3 id="数据流-data" tabindex="-1"><a class="header-anchor" href="#数据流-data"><span>数据流(Data)</span></a></h3><figure><img src="'+b+`" alt="image-20220219150027978" tabindex="0" loading="lazy"><figcaption>image-20220219150027978</figcaption></figure><ul><li><p>DataOutputStream</p><p>数据输出流允许应用程序以适当方式将基本 Java 数据类型写入输出流中。然后，应用程序可以使用数据输入流将数据读入</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 构造方法</span>
<span class="token class-name">DataOutputStream</span><span class="token punctuation">(</span><span class="token class-name">OutputStream</span> out<span class="token punctuation">)</span>        <span class="token comment">// 创建一个新的数据输出流，将数据写入指定基础输出流</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 成员方法</span>
<span class="token comment">// 每个java基本数据类型 都有1个write方法与之对应 比如</span>
    <span class="token class-name">DataOutputStream</span> dos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">&quot;dos.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    dos<span class="token punctuation">.</span><span class="token function">writeByte</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    dos<span class="token punctuation">.</span><span class="token function">writeShort</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    dos<span class="token punctuation">.</span><span class="token function">writeInt</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    dos<span class="token punctuation">.</span><span class="token function">writeLong</span><span class="token punctuation">(</span><span class="token number">4000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    dos<span class="token punctuation">.</span><span class="token function">writeFloat</span><span class="token punctuation">(</span><span class="token number">12.34f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    dos<span class="token punctuation">.</span><span class="token function">writeDouble</span><span class="token punctuation">(</span><span class="token number">12.56</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    dos<span class="token punctuation">.</span><span class="token function">writeChar</span><span class="token punctuation">(</span><span class="token char">&#39;a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    dos<span class="token punctuation">.</span><span class="token function">writeBoolean</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    dos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>DataInputStream</p><p><strong>构造方法</strong></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">DataInputStream</span><span class="token punctuation">(</span><span class="token class-name">InputStream</span> in<span class="token punctuation">)</span>        <span class="token comment">// 使用指定的底层 InputStream 创建一个 DataInputStream</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>成员方法</strong></p><p>每个java基本数据类型都有1个read方法与之对应， 如 readInt()</p></li></ul><h3 id="打印流-print" tabindex="-1"><a class="header-anchor" href="#打印流-print"><span>打印流(Print)</span></a></h3><p>把java基本数据类型,转为相应的字符串,写到文件中</p><figure><img src="`+g+`" alt="image-20220219145810616" tabindex="0" loading="lazy"><figcaption>image-20220219145810616</figcaption></figure><ul><li><p><strong>字节打印流 PrintStream</strong></p><p><code>PrintStream</code> 为其他输出流添加了功能，使它们能够方便地打印各种数据值表示形式</p><table><thead><tr><th><em>构造方法</em></th></tr></thead><tbody><tr><td>PrintStream(File file) 创建具有指定文件且不带自动行刷新的新打印流。</td></tr><tr><td>PrintStream(OutputStream out) 创建新的打印流。</td></tr><tr><td>PrintStream(OutputStream out, boolean autoFlush) 创建新的打印流。</td></tr><tr><td>PrintStream(String fileName) 创建具有指定文件名称且不带自动行刷新的新打印流。</td></tr></tbody></table><p><em>成员方法</em></p><p>每个java基本数据类型都有1个print方法与之对应，比如 printInt(int i)</p></li><li><p><strong>字符打印流PrintWriter</strong></p><table><thead><tr><th><em>构造方法</em></th></tr></thead><tbody><tr><td>PrintWriter(File file) 使用指定文件创建不具有自动行刷新的新 PrintWriter。</td></tr><tr><td>PrintWriter(OutputStream out) 根据现有的 OutputStream 创建不带自动行刷新的新 PrintWriter。</td></tr><tr><td>PrintWriter(OutputStream out, boolean autoFlush) 通过现有的 OutputStream 创建新的 PrintWriter。</td></tr><tr><td>PrintWriter(String fileName) 创建具有指定文件名称且不带自动行刷新的新 PrintWriter。</td></tr><tr><td>PrintWriter(Writer out) 创建不带自动行刷新的新 PrintWriter。</td></tr><tr><td>PrintWriter(Writer out, boolean autoFlush) 创建新 PrintWriter。</td></tr></tbody></table><p><em>成员方法</em></p><p>每个java基本数据都有1个相对应的print方法</p></li><li><p>打印流的特点</p><ul><li><p>只能操作目的地，不能操作数据来源。即只有输出流,没有1个与之对应的输入流</p></li><li><p>可以操作任意类型的数据。把不同类型的数据转为字符串</p></li><li><p>如果启动了自动刷新，能够自动刷新（但只有在调用 <code>println</code>、<code>printf</code> 或 <code>format</code> 的其中一个方法时才可以）</p></li></ul></li><li><p><strong>系统流</strong>：每个 Java程序运行时都带有一个系统流，系统流对应的类为 java.lang.System</p><p>Sytem 类封装了 Java 程序运行时的 3 个系统流：</p><ul><li><code>System.in</code>：标准输入流，默认设备是键盘 （是 InputStream 类的一个对象）</li><li><code>System.out</code>：标准输出流，默认设备是控制台（屏幕）（是 PrintStream 类的对象）</li><li><code>System.err</code>：标准错误流，默认设备是控制台（屏幕）（是 PrintStream 类的对象）</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">InputStream</span> in <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">PrintStream</span> out <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">PrintStream</span> err <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="对象流-object" tabindex="-1"><a class="header-anchor" href="#对象流-object"><span>对象流(Object)</span></a></h3><p>对象流又称序列化、反序列化流。</p>`,96),j=n("li",null,[n("p",null,"序列化: 把对象数据,转为二进制数据,持久化存储的过程 （即把Java对象转换为字节序列的过程）")],-1),F=n("li",null,[n("p",null,"反序列化: 把二进制数据还原为对象数据 （即把字节序列恢复为Java对象的过程）")],-1),O=n("li",null,[n("p",null,"要实现Java对象的序列化，只要将类实现标识接口——Serializable接口即可，不需要重写任何方法"),n("p",null,[n("strong",null,"Serializable是1个空接口, 想要实现序列化功能, 须实现该接口 空接口, 起标记作用")])],-1),x=a(`<p>将不需要序列化的属性前添加关键字transient，序列化对象的时候，这个属性就不会序列化</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>
    <span class="token keyword">transient</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span> <span class="token comment">// 不会被序列化</span>
    <span class="token comment">// ... other fields</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),q=a('<figure><img src="'+f+`" alt="image-20220219145224024" tabindex="0" loading="lazy"><figcaption>image-20220219145224024</figcaption></figure><ul><li><p><strong>ObjectOutputStream</strong></p><p>ObjectOutputStream 将 Java 对象的基本数据类型和图形写入 OutputStream</p><p><em>构造方法</em></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span><span class="token class-name">OutputStream</span> out<span class="token punctuation">)</span>       <span class="token comment">// 创建写入指定 OutputStream 的 ObjectOutputStream</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><em>成员方法</em></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token function">writeObject</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span>       <span class="token comment">// 将指定的对象写入 ObjectOutputStream。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p><strong>ObjectInputStream</strong></p><p>ObjectInputStream 对以前使用 ObjectOutputStream 写入的基本数据和对象进行反序列化</p><p><em>构造方法</em></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span><span class="token class-name">InputStream</span> in<span class="token punctuation">)</span>      <span class="token comment">//  创建从指定 InputStream 读取的 ObjectInputStream</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><em>成员方法</em></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token comment">//  从 ObjectInputStream 读取对象</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><p>【注意】</p><ul><li><p>java.io.NotSerializableException 异常表示 对象没有实现Serializable接口</p></li><li><p>java.io.InvalidClassException: xxxxx local class incompatible: stream classdesc serialVersionUID = -8449572629204967338, local class serialVersionUID = 5807530389656511599</p><p><strong>serialVersionUID不匹配</strong> （一般是使用了不一样的类，或修改了相应的类定义 导致的） 可以可以通过显示声明方式解决</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">8449572629204967338l</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><p>【例】</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span><span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 对象序列化和反序列化工具类示例</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IOUtils</span> <span class="token punctuation">{</span>
	<span class="token comment">// Java序列化（将java对象序列化并存储到硬盘）</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">writeFile</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">,</span> <span class="token class-name">String</span> fileName<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">FileOutputStream</span> fileOutputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>
             <span class="token class-name">ObjectOutputStream</span> objectOutputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span>fileOutputStream<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            objectOutputStream<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
	<span class="token comment">// Java反序列化</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Object</span> <span class="token function">readFile</span><span class="token punctuation">(</span><span class="token class-name">String</span> fileName<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">FileInputStream</span> fileInputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>
             <span class="token class-name">ObjectInputStream</span> objectInputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span>fileInputStream<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> objectInputStream<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="io资源释放" tabindex="-1"><a class="header-anchor" href="#io资源释放"><span>IO资源释放</span></a></h2><p>方式一：直接释放（较为繁琐）</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">byteArrayTofile</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> src<span class="token punctuation">,</span><span class="token class-name">String</span> filePath<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">InputStream</span> is <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token class-name">FileOutputStream</span> os <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        is <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayInputStream</span><span class="token punctuation">(</span>src<span class="token punctuation">)</span><span class="token punctuation">;</span>
        os <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>dest<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">// 一系列的IO流操作 ...... </span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">FileNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">finally</span><span class="token punctuation">{</span>     
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">!=</span> os<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                os<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> 
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>方拾二：利用函数可变参数，可关闭多个流，更灵活</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">close2</span><span class="token punctuation">(</span><span class="token class-name">Closeable</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>ios<span class="token punctuation">)</span><span class="token punctuation">{</span>    
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Closeable</span> io<span class="token operator">:</span>ios<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token operator">!=</span>io<span class="token punctuation">)</span><span class="token punctuation">{</span>  
                io<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>方式三：try…with…resource</p><p>jdk1.7之后可以不用手动释放资源，将声明与初始化写入 try () 中，删去 finally { } ，自动释放系统资源</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">InputStream</span> is <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">&quot;abc.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token class-name">OutputStream</span> os <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">&quot;abc_copy.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 具体IO操作</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">FileNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="properties" tabindex="-1"><a class="header-anchor" href="#properties"><span>Properties</span></a></h2><p>Properties类主要用于读取Java的配置文件，在Java中，其配置文件常为.properties文件，格式为文本文件，文件的内容的格式是“键=值”的格式，文本注释信息可以用&quot;#&quot;来注释。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Properties</span> <span class="token keyword">extends</span> <span class="token class-name">Hashtable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>Properties是一个Map体系的集合类</li><li>Properties可以保存到流中或从流中加载</li><li>属性列表中的每个键及其对应的值都是一个字符串</li></ul><table><thead><tr><th>方法名称</th><th>说明</th></tr></thead><tbody><tr><td>getProperty ( String key)</td><td>获取key 所对应的 value</td></tr><tr><td>setProperty ( String key, String value)</td><td>调用 Hashtable 的put方法来设置键值对</td></tr><tr><td>load ( InputStream inStream)</td><td>从输入流中读取属性列表（键和元素对）</td></tr><tr><td>store ( OutputStream out, String comments)</td><td>将键值对写入到指定的文件中去</td></tr><tr><td>clear ()</td><td>清除所有的键值对</td></tr></tbody></table><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// Properties类的简单使用：</span>
<span class="token class-name">Properties</span> properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
properties<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">&quot;username&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;admin&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;password&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;123&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> keySet <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Object</span> key <span class="token operator">:</span> keySet<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>properties<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Properties和IO流相结合的方法</strong>：</p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>void load(InputStream inStream)</td><td>从输入字节流读取属性列表</td></tr><tr><td>void load(Reader reader)</td><td>从输入字符流读取属性列表</td></tr><tr><td>void store(OutputStream out, String comments)</td><td>适合于使用 load(InputStream)方法的格式写入输出字节流</td></tr><tr><td>void store(Writer writer, String comments)</td><td>适合使用 load(Reader)方法的格式写入输出字符流</td></tr></tbody></table><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Properties</span> prop <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">FileReader</span> fileReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">&quot;.\\\\data\\\\prop.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">FileWriter</span> fileWriter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span><span class="token string">&quot;.\\\\data\\\\prop.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

prop<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">&quot;username&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;admin&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
prop<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;password&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;123&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 写入文件</span>
prop<span class="token punctuation">.</span><span class="token function">store</span><span class="token punctuation">(</span>fileWriter<span class="token punctuation">,</span> <span class="token string">&quot;user&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
fileWriter<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 从文件中读取</span>
<span class="token class-name">Properties</span> properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
properties<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>fileReader<span class="token punctuation">)</span><span class="token punctuation">;</span>
fileReader<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>properties<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="randomaccessfile" tabindex="-1"><a class="header-anchor" href="#randomaccessfile"><span>RandomAccessFile</span></a></h2><p>RandomAccessFile 类支持 “随机访问” 的方式，RandomAccessFile 对象包含一个记录指针，用以标示当前读写处的位置，程序可以直接跳到文件的任意位置来读、写文件</p><table><thead><tr><th><em>构造方法</em></th></tr></thead><tbody><tr><td>RandomAccessFile(File file, String mode) 创建从中读取和向其中写入（可选）的随机访问文件流，该文件由 File 参数指定。</td></tr><tr><td>RandomAccessFile(String name, String mode) 创建从中读取和向其中写入（可选）的随机访问文件流，该文件具有指定名称。</td></tr></tbody></table><p>创建 RandomAccessFile 类实例需要指定一个 mode 参数，该参数指 定 RandomAccessFile 的访问模式(介绍2种常用的)：</p><ul><li><code>r</code>: 以只读方式打开(不会创建文件,读取已经存在的文件)</li><li><code>rw</code>:可读可写(文件不存在会创建,存在不会创建)</li></ul><p><em>成员方法</em>：</p><p>除了常规的read write方法外， RandomAccessFile 类对象还有自由移动记录指针的相关方法：</p><ul><li>long getFilePointer()：获取文件记录指针的当前位置</li><li>void seek(long pos)：将文件记录指针定位到 pos 位置</li></ul><p>随机读写示例：</p><div class="language-Java line-numbers-mode" data-ext="Java" data-title="Java"><pre class="language-Java"><code>package cn.itdrizzle.javase.p19.demo;

import java.io.IOException;
import java.io.RandomAccessFile;
import java.nio.charset.StandardCharsets;

/**
 * @Classname RandomAccessFileDemo
 * @Description 向文件中指定位置插入数据
 * @Date 2022/2/22 8:41
 * @Author idrizzle
 */
public class RandomAccessFileDemo {
    public static void main(String[] args) {
        try (final RandomAccessFile raf = new RandomAccessFile(&quot;temp\\\\test\\\\raf.txt&quot;, &quot;rw&quot;)) {
            // 先向文件中写入一些数据
            raf.write(&quot;abcdef&quot;.getBytes(StandardCharsets.UTF_8));
            System.out.println(&quot;写入数据后，FilePointer：&quot; + raf.getFilePointer());

            // 指定插入的位置
            raf.seek(3);
            System.out.println(&quot;指定插入位置后，FilePointer：&quot; + raf.getFilePointer());

            // 现将插入点后的数据暂存起来
            final StringBuffer temp = new StringBuffer();
            final byte[] bytes = new byte[1024];
            int len;
            while ((len = raf.read(bytes)) != -1) {
                temp.append(new String(bytes, 0, len));
            }
            System.out.println(&quot;读数据后，FilePointer：&quot; + raf.getFilePointer());

            // 移动指针到插入位置
            raf.seek(3);
            System.out.println(&quot;重新指定插入位置后，FilePointer：&quot; + raf.getFilePointer());
            // 插入新的数据
            raf.write(&quot;xyz2333&quot;.getBytes());
            // 之前的数据重写回
            raf.write(temp.toString().getBytes());
            System.out.println(&quot;最后的位置，FilePointer：&quot; + raf.getFilePointer());
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+h+'" alt="image-20220222085601424" tabindex="0" loading="lazy"><figcaption>image-20220222085601424</figcaption></figure><h2 id="file文件和目录" tabindex="-1"><a class="header-anchor" href="#file文件和目录"><span>File文件和目录</span></a></h2><p>File类是文件和目录路径名的抽象表示，文件和目录都可以通过File封装成对象，对于File而言，其封装的并不是一个真正存在的文件，仅仅是一个路径名而已。它可以是存在的，也可以是不存在的。将来可以通过具体的操作把这个路径的内容转换为具体存在</p>',37),I={href:"http://java.io",target:"_blank",rel:"noopener noreferrer"},R=n("li",null,"File 类不能访问文件内容本身，如果需要访问文件内容本身，则需要使用输入/输出流",-1),P=a(`<table><thead><tr><th>构造方法</th><th>说明</th></tr></thead><tbody><tr><td>File(String pathname)</td><td>通过将给定的路径名字符串转换为抽象路径名来创建新的File实例</td></tr><tr><td>File(String parent, String child)</td><td>从父路径名字符串和子路径名字符串创建新的File实例</td></tr><tr><td>File(File parent, String child)</td><td>从父抽象路径名和子路径名字符串创建新的File实例</td></tr></tbody></table><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">File</span> dataDir <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;.\\\\data&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">File</span> file1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>dataDir<span class="token punctuation">,</span> <span class="token string">&quot;a.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">File</span> file2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;.\\\\data\\\\b.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="file常用方法" tabindex="-1"><a class="header-anchor" href="#file常用方法"><span>File常用方法</span></a></h3><p><strong>创建、删除文件/目录</strong>：</p><table><thead><tr><th>方法名称</th><th>说明</th></tr></thead><tbody><tr><td>public boolean createNewFile()</td><td>当文件不存在时，创建一个空文件</td></tr><tr><td>boolean mkdir()</td><td>创建一个目录，它的路径名由当前 File 对象指定</td></tr><tr><td>boolean mkdirs()</td><td>创建一个目录，它的路径名由当前 File 对象指定</td></tr><tr><td>boolean delete()</td><td>删除当前对象指定的文件或空目录</td></tr><tr><td>boolean renameTo(File)</td><td>将当前 File 对象指定的文件更名为给定参数 File 指定的路径名（剪贴）</td></tr></tbody></table><ul><li>如果被重命名的文件已存在，那么renameTo()不会成功</li><li>renameTo()成功后，原文件会被删除</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>dataDir<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> dataDir<span class="token punctuation">.</span><span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>file1<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> file1<span class="token punctuation">.</span><span class="token function">createNewFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>File类相关判断方法</strong>：</p><table><thead><tr><th>方法名称</th><th>说明</th></tr></thead><tbody><tr><td>boolean exists()</td><td>测试当前 File 是否存在</td></tr><tr><td>boolean isAbsolute()</td><td>测试当前 File 对象表示的文件是否为一个绝对路径名</td></tr><tr><td>boolean isDirectory()</td><td>测试当前 File 对象表示的文件是否为一个路径</td></tr><tr><td>boolean isFile()</td><td>测试当前 File 对象表示的文件是否为一个“普通”文件</td></tr><tr><td>boolean canRead()</td><td>测试应用程序是否能从指定的文件中进行读取</td></tr><tr><td>boolean canWrite()</td><td>测试应用程序是否能写当前文件</td></tr></tbody></table><p><strong>File类相关的获取功能</strong>：</p><table><thead><tr><th>方法名称</th><th>说明</th></tr></thead><tbody><tr><td>String getAbsolutePath()</td><td>返回由该对象表示的文件的绝对路径名</td></tr><tr><td>String getPath()</td><td>返回构造file时候的路径</td></tr><tr><td>String getName()</td><td>返回表示当前对象的文件名或路径名（如果是路径，则返回最后一级子路径名）</td></tr><tr><td>String getParent()</td><td>返回当前 File 对象所对应目录（最后一级子目录）的父目录名</td></tr><tr><td>long lastModified()</td><td>返回当前 File 对象表示的文件最后修改的时间</td></tr><tr><td>long length()</td><td>返回当前 File 对象表示的文件长度</td></tr><tr><td>String[] list()</td><td>返回当前 File 对象指定的路径文件列表</td></tr><tr><td>String[] list(FilenameFilter)</td><td>返回当前 File 对象指定的目录中满足指定过滤器的文件列表</td></tr></tbody></table><p>【注】因为 <code>getPath()</code> 得到的是构造file的时候的路径，如果构造的时候就是全路径那直接返回全路径，如果构造的时候为相对路径，返回的就是构造file时候的路径</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileDemo</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;..\\\\temp\\\\a.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">File</span> file1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;E:\\\\WorkPlace\\\\Java\\\\Demo\\\\temp&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span> <span class="token operator">+</span> file1<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>file1<span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+w+`" alt="image-20220217202032863" tabindex="0" loading="lazy"><figcaption>image-20220217202032863</figcaption></figure><h3 id="文件过滤器" tabindex="-1"><a class="header-anchor" href="#文件过滤器"><span>文件过滤器</span></a></h3><p><strong>文件过滤器</strong> <code>FileFilter</code> 的三种应用方式：</p><ul><li>手写实现类</li><li>匿名内部类</li><li>lambda表达式</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 通过匿名内部类和Lambda表达式过滤文件</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ListFileDemo</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;app2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 匿名内部类</span>
        <span class="token class-name">File</span><span class="token punctuation">[</span><span class="token punctuation">]</span> f1 <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">listFiles</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">accept</span><span class="token punctuation">(</span><span class="token class-name">File</span> pathname<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// 仅留下文件夹名包括a的文件夹</span>
                <span class="token keyword">return</span> pathname<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> pathname<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// Lambda表达式, 仅留下.txt结尾的文本文件</span>
        <span class="token class-name">File</span><span class="token punctuation">[</span><span class="token punctuation">]</span> f2 <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">listFiles</span><span class="token punctuation">(</span>f <span class="token operator">-&gt;</span> f<span class="token punctuation">.</span><span class="token function">isFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> f<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">&quot;.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>【注】<strong>File 类中有以下两个常用常量</strong>：（File 类出现较早，当时并没有对命名规范有严格的要求）</p><ul><li><code>pathSeparator</code>：分隔连续多个路径字符串的分隔符</li><li><code>separator</code>：目录分隔符</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> pathSeparator <span class="token comment">//Windows下指\`;\`</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> separator     <span class="token comment">//Windows下指\`/\`</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,21);function W(_,B){const p=t("font"),o=t("ExternalLinkIcon");return l(),i("div",null,[S,n("ul",null,[j,F,O,n("li",null,[e(p,{color:"purple"},{default:u(()=>[s(" **transient** ")]),_:1}),s(" 关键字：用于指定不需要序列化的对象属性"),x])]),q,n("ul",null,[n("li",null,[s("File 类是 "),n("a",I,[s("java.io"),e(o)]),s(" 包中唯一代表磁盘文件本身的对象")]),R]),P])}const D=c(y,[["render",W],["__file","javaIO.html.vue"]]),T=JSON.parse('{"path":"/java/syntax/base/javaIO.html","title":"JavaIO","lang":"en-US","frontmatter":{"order":40,"title":"JavaIO","description":"Java流的分类 Java中所有数据都是使用流读写的, 流是一组有序的数据序列，将数据从一个地方带到另一个地方。 数据流是 Java 进行 I/O 操作的对象，它按照不同的标准可以分为不同的类别。 按照流的方向主要分为：输入（Input）流和输出（Output）流两种 image-20220217210243271image-2022021721024...","head":[["meta",{"property":"og:url","content":"https://x.app/notebook/java/syntax/base/javaIO.html"}],["meta",{"property":"og:site_name","content":"Notebook"}],["meta",{"property":"og:title","content":"JavaIO"}],["meta",{"property":"og:description","content":"Java流的分类 Java中所有数据都是使用流读写的, 流是一组有序的数据序列，将数据从一个地方带到另一个地方。 数据流是 Java 进行 I/O 操作的对象，它按照不同的标准可以分为不同的类别。 按照流的方向主要分为：输入（Input）流和输出（Output）流两种 image-20220217210243271image-2022021721024..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-06-03T16:18:48.000Z"}],["meta",{"property":"article:author","content":"Mr.Topple"}],["meta",{"property":"article:modified_time","content":"2024-06-03T16:18:48.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"JavaIO\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-06-03T16:18:48.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Topple\\",\\"url\\":\\"https://www.baidu.com\\"}]}"]]},"headers":[{"level":2,"title":"Java流的分类","slug":"java流的分类","link":"#java流的分类","children":[]},{"level":2,"title":"Java字节流","slug":"java字节流","link":"#java字节流","children":[{"level":3,"title":"字节输出流","slug":"字节输出流","link":"#字节输出流","children":[]},{"level":3,"title":"字节输入流","slug":"字节输入流","link":"#字节输入流","children":[]},{"level":3,"title":"字节缓冲流","slug":"字节缓冲流","link":"#字节缓冲流","children":[]}]},{"level":2,"title":"Java字符流","slug":"java字符流","link":"#java字符流","children":[{"level":3,"title":"字符输入流","slug":"字符输入流","link":"#字符输入流","children":[]},{"level":3,"title":"字符输出流","slug":"字符输出流","link":"#字符输出流","children":[]},{"level":3,"title":"字符转换流","slug":"字符转换流","link":"#字符转换流","children":[]},{"level":3,"title":"字符缓冲流","slug":"字符缓冲流","link":"#字符缓冲流","children":[]},{"level":3,"title":"缓冲流和flush","slug":"缓冲流和flush","link":"#缓冲流和flush","children":[]}]},{"level":2,"title":"其他常用流","slug":"其他常用流","link":"#其他常用流","children":[{"level":3,"title":"数据流(Data)","slug":"数据流-data","link":"#数据流-data","children":[]},{"level":3,"title":"打印流(Print)","slug":"打印流-print","link":"#打印流-print","children":[]},{"level":3,"title":"对象流(Object)","slug":"对象流-object","link":"#对象流-object","children":[]}]},{"level":2,"title":"IO资源释放","slug":"io资源释放","link":"#io资源释放","children":[]},{"level":2,"title":"Properties","slug":"properties","link":"#properties","children":[]},{"level":2,"title":"RandomAccessFile","slug":"randomaccessfile","link":"#randomaccessfile","children":[]},{"level":2,"title":"File文件和目录","slug":"file文件和目录","link":"#file文件和目录","children":[{"level":3,"title":"File常用方法","slug":"file常用方法","link":"#file常用方法","children":[]},{"level":3,"title":"文件过滤器","slug":"文件过滤器","link":"#文件过滤器","children":[]}]}],"git":{"createdTime":1717424415000,"updatedTime":1717431528000,"contributors":[{"name":"Neil","email":"msdrizzle@outlook.com","commits":2}]},"readingTime":{"minutes":28.49,"words":8548},"filePathRelative":"java/syntax/base/javaIO.md","localizedDate":"June 3, 2024","autoDesc":true}');export{D as comp,T as data};
