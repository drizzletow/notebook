import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as p,o as l,c as o,a,e as t,b as n}from"./app-DwcluZE3.js";const i={},c=t(`<h2 id="创建spring-mvc项目" tabindex="-1"><a class="header-anchor" href="#创建spring-mvc项目"><span>创建Spring MVC项目</span></a></h2><p>创建Spring MVC项目有多种方式，这里将详细介绍两种流行方法：手动创建和使用Spring Initializr。</p><h3 id="方法一-手动创建" tabindex="-1"><a class="header-anchor" href="#方法一-手动创建"><span>方法一：手动创建</span></a></h3><ol><li><p><strong>安装和配置JDK</strong></p><ul><li>下载并安装JDK。</li><li>设置环境变量<code>JAVA_HOME</code>并更新<code>PATH</code>。</li></ul></li><li><p><strong>安装Maven或Gradle</strong></p><ul><li>下载并安装Maven或Gradle。</li><li>设置环境变量<code>M2_HOME</code>（Maven）或<code>GRADLE_HOME</code>（Gradle）并更新<code>PATH</code>。</li></ul></li><li><p><strong>设置项目构建文件</strong></p><ul><li>创建一个新的目录作为项目根文件夹。</li><li>在该目录中创建构建配置文件：<code>pom.xml</code>（Maven）或<code>build.gradle</code>（Gradle）。</li><li>添加必要的Spring MVC依赖项及其他相关配置。</li></ul></li><li><p><strong>创建项目目录结构</strong></p><ul><li>创建以下目录结构：<div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>src
├── main
│   ├── java
│   ├── resources
│   └── webapp
│       └── WEB-INF
└── test
    ├── java
    └── resources
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li>项目代码将放在<code>src/main/java</code>，资源文件放在<code>src/main/resources</code>，而Web页面和JSP文件则放在<code>src/main/webapp</code>。</li></ul></li><li><p><strong>配置Web.xml</strong></p><ul><li>在<code>src/main/webapp/WEB-INF</code>目录中创建<code>web.xml</code>文件。</li><li>配置Spring的<code>DispatcherServlet</code>，它是Spring MVC的核心。</li></ul></li><li><p><strong>创建Spring配置文件</strong></p><ul><li>在<code>src/main/resources</code>中创建Spring配置文件，如<code>applicationContext.xml</code>。</li></ul></li><li><p><strong>编写控制器，视图和模型</strong></p><ul><li>创建Java类文件用作模型（Model），控制器（Controller），和服务层（Service）。</li><li>创建JSP/HTML文件作为视图（View）。</li></ul></li><li><p><strong>构建和运行</strong></p><ul><li>在命令行中，使用Maven或Gradle命令构建项目（例如：<code>mvn clean install</code>或<code>gradle build</code>）。</li><li>运行内置服务器或部署到外部Web服务器如Tomcat。</li></ul></li></ol><h3 id="方法二-使用spring-initializr" tabindex="-1"><a class="header-anchor" href="#方法二-使用spring-initializr"><span>方法二：使用Spring Initializr</span></a></h3><ol><li><p><strong>访问Spring Initializr</strong></p><ul><li>访问<code>https://start.spring.io/</code>。</li></ul></li><li><p><strong>选择项目配置</strong></p><ul><li>选择构建工具（Maven/Gradle）、Spring Boot版本、语言（Java/Kotlin/Groovy）、项目元信息（例如组名和项目名称）。</li></ul></li><li><p><strong>添加依赖项</strong></p><ul><li>添加<code>Spring Web</code>和其他所需依赖。</li></ul></li><li><p><strong>生成项目</strong></p><ul><li>点击生成，下载生成的zip文件。</li></ul></li><li><p><strong>解压并打开项目</strong></p><ul><li>解压下载的zip文件，并使用IDE（如IntelliJ IDEA或Eclipse）打开。</li></ul></li><li><p><strong>编写代码</strong></p><ul><li>创建新的控制器，服务和存储库类，编写业务逻辑。</li></ul></li><li><p><strong>运行应用程序</strong></p><ul><li>在IDE中运行主应用程序类，或在命令行使用相应的构建工具命令（如<code>mvn spring-boot:run</code>或<code>gradle bootRun</code>）来启动项目。</li></ul></li></ol><p>使用Spring Initializr的好处是，它自动处理了许多配置问题，并提供了一个即用型的项目结构，极大地简化了初始化过程。基本上，你需要的只是选择合适的依赖项和配置，其余工作Initializr都会帮你完成。</p><h2 id="配置开发springmvc项目" tabindex="-1"><a class="header-anchor" href="#配置开发springmvc项目"><span>配置开发SpringMVC项目</span></a></h2><h3 id="配置web-xml" tabindex="-1"><a class="header-anchor" href="#配置web-xml"><span>配置Web.xml</span></a></h3><p>在Spring MVC项目中，<code>web.xml</code>文件位于应用的<code>WEB-INF</code>目录下，它是Java EE Web应用的部署描述文件。尽管Spring Boot项目通常不需要<code>web.xml</code>文件（因为它采用了自动配置的方式），但在传统的Spring MVC项目中，你可能需要手动配置它。</p><p>以下是配置<code>web.xml</code>文件来设置<code>DispatcherServlet</code>的步骤：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span> <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>3.1<span class="token punctuation">&quot;</span></span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://xmlns.jcp.org/xml/ns/javaee<span class="token punctuation">&quot;</span></span>
         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">&quot;</span></span>
         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://xmlns.jcp.org/xml/ns/javaee
                             http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>

    <span class="token comment">&lt;!-- DispatcherServlet的配置 --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>dispatcher<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">&gt;</span></span>org.springframework.web.servlet.DispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">&gt;</span></span>
        <span class="token comment">&lt;!-- 应用上下文配置文件的位置 --&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">&gt;</span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">&gt;</span></span>/WEB-INF/spring-dispatcher-config.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">&gt;</span></span>
        <span class="token comment">&lt;!-- 启动级别，数值越低，servlet越早启动 --&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>load-on-startup</span><span class="token punctuation">&gt;</span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>load-on-startup</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">&gt;</span></span>

    <span class="token comment">&lt;!-- 将所有请求映射到DispatcherServlet --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>dispatcher<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">&gt;</span></span>/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span>
    
    <span class="token comment">&lt;!-- 如果项目中含有JSP文件，需要一个JspServlet来处理JSP --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>jsp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">&gt;</span></span>org.apache.jasper.servlet.JspServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>load-on-startup</span><span class="token punctuation">&gt;</span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>load-on-startup</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>jsp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">&gt;</span></span>*.jsp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span>

    <span class="token comment">&lt;!-- 更多配置... --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>解释一下配置中的每个部分：</p><ol><li><p><strong><code>&lt;web-app&gt;</code></strong> 标签定义了文件的根元素，包括XML命名空间和schema位置。</p></li><li><p><strong>DispatcherServlet 配置</strong>：</p><ul><li><strong><code>&lt;servlet&gt;</code></strong> 定义一个servlet元素，并给它命名为<code>dispatcher</code>。</li><li><strong><code>&lt;servlet-class&gt;</code></strong> 指定Spring的<code>DispatcherServlet</code>类。</li><li><strong><code>&lt;init-param&gt;</code></strong> 设置初始化参数，这里是指定Spring配置文件的位置（<code>contextConfigLocation</code>），通常是Spring的XML配置文件。</li><li><strong><code>&lt;load-on-startup&gt;</code></strong> 指定servlet的加载顺序。一般推荐设置为 1，这意味着应用启动时<code>DispatcherServlet</code>会随即加载。</li></ul></li><li><p><strong>Servlet映射</strong>：</p><ul><li><strong><code>&lt;servlet-mapping&gt;</code></strong> 连接servlet名与URL模式。在这个例子中，所有的URL请求都被映射到<code>DispatcherServlet</code>。</li></ul></li><li><p><strong>JSP Servlet 配置</strong>（如果你的应用需要JSP）：</p><ul><li><strong><code>&lt;servlet&gt;</code></strong> 配置用于处理JSP文件的内置servlet，通常是Tomcat的<code>JspServlet</code>。</li><li><strong><code>&lt;servlet-mapping&gt;</code></strong> 为JSP文件定义URL模式，一般是<code>*.jsp</code>。</li></ul></li></ol><p>除了以上基础配置，<code>web.xml</code>可能还包括filter（过滤器）、listener（监听器）和context-param（上下文参数）等其他配置。这取决于具体应用的需求以及你希望如何定制Spring的行为。</p><h3 id="编写一个简单的controller" tabindex="-1"><a class="header-anchor" href="#编写一个简单的controller"><span>编写一个简单的Controller</span></a></h3><p>创建一个简单的控制器（Controller）涉及到使用<code>@Controller</code>注解标识类，并通过<code>@RequestMapping</code>注解将HTTP请求映射到具体的方法。以下是一个简单的控制器示例，它处理请求并返回一个视图名称。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>web</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Controller</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>ui<span class="token punctuation">.</span></span><span class="token class-name">Model</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">GetMapping</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RequestParam</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Controller</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GreetingController</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/greeting&quot;</span><span class="token punctuation">)</span> <span class="token comment">// 或者使用@RequestMapping(method = RequestMethod.GET)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">greeting</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> required<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">,</span> defaultValue<span class="token operator">=</span><span class="token string">&quot;World&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">Model</span> model<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 添加属性到模型中，可以在视图中使用</span>
        model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 返回视图的名称（在实际情况中，对应的视图可能是一个JSP或HTML文件，例如&quot;greeting.jsp&quot;或&quot;greeting.html&quot;）</span>
        <span class="token keyword">return</span> <span class="token string">&quot;greeting&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的Java类中，<code>GreetingController</code>是一个标准的Spring MVC控制器。下面详细解释它的组成部分：</p><ol><li><p><strong>类级别的<code>@Controller</code>注解</strong>：这个注解声明这个类是一个Spring MVC控制器。</p></li><li><p><strong><code>\\@GetMapping(&quot;/greeting&quot;)</code>注解</strong>：标识该方法响应对<code>/greeting</code>路径的HTTP GET请求。这是<code>@RequestMapping(method = RequestMethod.GET)</code>注解的便捷版本。</p></li><li><p><strong>方法参数</strong>：</p><ul><li><strong><code>@RequestParam</code>注解</strong>：表明<code>name</code>参数的值应该来自于请求中名为<code>name</code>的请求参数。如果请求中没有该参数，则使用默认值<code>World</code>。</li><li><strong><code>Model</code></strong>：是一个接口，允许控制器向视图（如JSP）传递信息。在这个例子中，模型对象被添加了一个属性<code>name</code>。</li></ul></li><li><p><strong>方法的返回值</strong>：</p><ul><li>方法返回的是一个String，表示视图的名称。根据Spring MVC的配置，这个名称会被视图解析器用来找到并渲染最终的页面。</li></ul></li><li><p><strong>业务逻辑</strong>：</p><ul><li>可以在方法中添加任何业务逻辑，例如数据库交互、调用服务类等。在这个简单的例子中，业务逻辑只是简单的将参数<code>name</code>添加到视图模型中。</li></ul></li></ol><p>请注意，根据你的项目设置，返回的视图名称 &quot;greeting&quot; 应与实际视图文件对应。如果你使用的是Thymeleaf作为模板引擎，应用将会寻找<code>src/main/resources/templates/greeting.html</code>。如果你是使用JSP，那么它将会尝试寻找<code>src/main/webapp/WEB-INF/views/greeting.jsp</code>（这里假设你的视图解析器被设置为将视图名称解析为<code>WEB-INF/views/&lt;viewName&gt;.jsp</code>）。</p><h3 id="创建view模板-thymeleaf" tabindex="-1"><a class="header-anchor" href="#创建view模板-thymeleaf"><span>创建View模板（Thymeleaf）</span></a></h3><p>在Spring Boot和Spring MVC中，Thymeleaf是一个流行的模板引擎，用于渲染HTML页面。要使用Thymeleaf创建视图模板，请按照以下步骤操作：</p><ol><li><p><strong>添加Thymeleaf依赖</strong></p><p>如果您使用的是Maven构建工具，请在<code>pom.xml</code>中添加以下依赖：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-thymeleaf<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果您使用的是Gradle构建工具，在<code>build.gradle</code>文件中添加以下依赖：</p><div class="language-groovy line-numbers-mode" data-ext="groovy" data-title="groovy"><pre class="language-groovy"><code>implementation <span class="token string">&#39;org.springframework.boot:spring-boot-starter-thymeleaf&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p><strong>创建View模板</strong></p><p>在Spring Boot项目中，Thymeleaf视图模板通常放置在<code>src/main/resources/templates</code>目录。创建一个HTML文件，例如<code>greeting.html</code>。接下来，在该HTML文件内部，您可以使用Thymeleaf的语法来绑定模型数据和执行其他模板相关逻辑。</p><p>以下是<code>greeting.html</code>文件的示例内容：</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>th</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.thymeleaf.org<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Greeting Page<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token punctuation">&#39;</span>Hello, &#39; + \${name} + &#39;!&#39;<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Hello, World!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!-- 如果name变量不存在，将显示默认文本&#39;Hello, World!&#39; --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的模板中，<code>th:text</code>属性被Thymeleaf处理，用来显示传递给视图模型<code>Model</code>中的<code>name</code>属性的值。如果<code>name</code>变量不存在，将显示标签体中的默认文本&#39;Hello, World!&#39;。</p></li><li><p><strong>配置Thymeleaf（可选）</strong></p><p>Thymeleaf的默认配置通常适合大多数项目的需求。如果您需要自定义配置，可以在<code>application.properties</code>或<code>application.yml</code>中设置属性值。例如：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code># application.properties
spring.thymeleaf.prefix=classpath:/templates/
spring.thymeleaf.suffix=.html
# 设置为false以便在生产中使用缓存
spring.thymeleaf.cache=false
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>在控制器中返回模板名称</strong></p><p>确保您的控制器返回的视图名称与模板文件的名称匹配。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Controller</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GreetingController</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/greeting&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">greeting</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> required<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">,</span> defaultValue<span class="token operator">=</span><span class="token string">&quot;World&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">Model</span> model<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token string">&quot;greeting&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的控制器方法返回字符串<code>&quot;greeting&quot;</code>作为视图名称，它将被Thymeleaf视图解析器解析，并且与<code>src/main/resources/templates/greeting.html</code>模板文件进行匹配。</p></li></ol><p>这样就创建了一个Thymeleaf模板，您的应用将能够处理<code>/greeting</code>的请求，并返回带有渲染数据的响应HTML页面。</p><h3 id="运行并测试web应用" tabindex="-1"><a class="header-anchor" href="#运行并测试web应用"><span>运行并测试Web应用</span></a></h3><p>运行和测试Web应用通常涉及以下步骤：</p><ol><li><p><strong>运行应用程序</strong></p><p>在IDE（例如IntelliJ IDEA、Eclipse等）中，您可以通过找到带有<code>@SpringBootApplication</code>注解的主类，并运行该类作为Java应用程序来启动您的Spring Boot Web应用程序。</p><p>如果使用的是命令行工具，可以使用Maven或Gradle命令来运行应用：</p><ul><li>对于Maven项目：<div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>mvn spring-boot:run
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li>对于Gradle项目：<div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>gradle bootRun
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul></li><li><p><strong>访问应用程序</strong></p><p>在本地启动应用程序之后，您可以通过Web浏览器访问它。默认情况下，Spring Boot应用程序运行在<code>8080</code>端口。如果Controller中有一个映射到<code>/greeting</code>路径的方法，您可以在浏览器中输入：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>http://localhost:8080/greeting
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果您希望传入参数，例如<code>name=John</code>，您可以这样做：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>http://localhost:8080/greeting?name=John
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p><strong>测试应用程序</strong></p><p>编写测试是确保您的应用正常工作的好方法。Spring Boot支持与JUnit、Mockito、Spring Test等框架集成以方便测试。以下是一个简单的Web层测试的例子：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@WebMvcTest</span><span class="token punctuation">(</span><span class="token class-name">GreetingController</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GreetingControllerTest</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">MockMvc</span> mockMvc<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">shouldReturnDefaultMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>mockMvc<span class="token punctuation">.</span><span class="token function">perform</span><span class="token punctuation">(</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;/greeting&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">andExpect</span><span class="token punctuation">(</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isOk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">andExpect</span><span class="token punctuation">(</span><span class="token function">content</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token function">containsString</span><span class="token punctuation">(</span><span class="token string">&quot;Hello, World!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">shouldReturnCustomMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>mockMvc<span class="token punctuation">.</span><span class="token function">perform</span><span class="token punctuation">(</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;/greeting&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">param</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;John&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">andExpect</span><span class="token punctuation">(</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isOk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">andExpect</span><span class="token punctuation">(</span><span class="token function">content</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token function">containsString</span><span class="token punctuation">(</span><span class="token string">&quot;Hello, John!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上述测试中，使用<code>MockMvc</code>来模拟HTTP请求和断言响应。<code>@WebMvcTest</code>注解用于自动配置<code>MockMvc</code>。您可以使用<code>perform</code>方法发送请求，并通过<code>andExpect</code>链式调用来断言结果。</p><p>应该在项目的<code>src/test/java</code>目录下创建测试类。</p></li><li><p><strong>使用Postman或curl等工具测试</strong></p><p>还可以使用Postman这样的API开发环境工具，或者使用<code>curl</code>命令行工具对Web应用进行测试。这些工具允许您发送HTTP请求并查看响应，而无需通过浏览器。例如，使用<code>curl</code>测试访问<code>/greeting</code>：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">curl</span> http://localhost:8080/greeting
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>或者使用参数：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">curl</span> http://localhost:8080/greeting?name<span class="token operator">=</span>John
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ol><p>确保在进行任何部署或发布之前，在不同的环境和用例下进行彻底的测试，以确保应用的稳定性和可靠性。</p><h2 id="springmvc架构概述" tabindex="-1"><a class="header-anchor" href="#springmvc架构概述"><span>SpringMVC架构概述</span></a></h2><p>Spring MVC（Model-View-Controller）是一个建立在Spring Framework上的Web框架，提供了一种分离关注点的方法来开发Web应用程序。</p><div class="hint-container info"><p class="hint-container-title">SpringMVC特性</p><ul><li><strong>灵活性：</strong> Spring MVC允许灵活的URL映射和视图解析。</li><li><strong>可扩展性：</strong> 可以引入拦截器、全局异常处理等。</li><li><strong>易于测试：</strong> 可以通过Mock对象对Controller进行单元测试。</li></ul><p>Spring MVC的设计允许您清晰地分离应用程序逻辑，控制器逻辑和渲染逻辑，繁重的工作交由DispatcherServlet来处理，您只需要关注您的应用程序特有的业务逻辑。它是一个成熟的MVC框架，广泛用于企业级Java应用程序。</p></div><p>SpringMVC核心组件和工作流程如下所述：</p><h3 id="springmvc核心组件" tabindex="-1"><a class="header-anchor" href="#springmvc核心组件"><span>SpringMVC核心组件</span></a></h3><p><strong>1. DispatcherServlet</strong><br> Spring MVC的前端控制器（Front Controller）。它是一个servlet，拦截所有应用的请求，并将这些请求委托给相应的处理器。</p><p><strong>2. HandlerMapping</strong><br> 负责根据请求URL查找对应的Handler（Controller），然后将请求路由到该Handler。</p><p><strong>3. Controller</strong><br> 控制器处理由DispatcherServlet转发的请求。它接受用户的输入并调用相应的服务类来处理业务逻辑。</p><p><strong>4. ModelAndView</strong><br> 包含模型数据和视图信息的对象，由Controller返回，模型数据代表表单或需要显示的信息，视图是用来渲染模型数据的JSP或者其他类型的模板。</p><p><strong>5. ViewResolver</strong><br> 根据控制器返回的视图名来解析实际的视图页面，例如将逻辑视图名解析为JSP路径。</p><p><strong>6. View</strong><br> 将模型数据展现给用户的组件，通常是JSP、Freemarker、Thymeleaf等模板。</p><h3 id="传统开发模式下的工作流程" tabindex="-1"><a class="header-anchor" href="#传统开发模式下的工作流程"><span>传统开发模式下的工作流程</span></a></h3><div class="hint-container tip"><p class="hint-container-title">SpringMVC在传统开发模式下的工作流程</p><ol><li>用户发起请求到服务器。</li><li>DispatcherServlet接收到请求，并调用HandlerMapping来找到处理该请求的Controller。</li><li>HandlerMapping返回一个HandlerExecutionChain（包含Handler和一系列拦截器）给DispatcherServlet。</li><li>如果有任何拦截器，它们可以进行预处理，并决定是否继续执行（比如检查用户是否登录）。</li><li>Controller处理请求后，返回一个ModelAndView对象给DispatcherServlet，其中包含模型数据和视图信息。</li><li>DispatcherServlet调用ViewResolver来解析Controller指定的视图名。</li><li>ViewResolver返回一个具体的View实例给DispatcherServlet。</li><li>DispatcherServlet将模型数据渲染到视图中。</li><li>响应被返回给用户。</li></ol></div>`,42),r=t('<h3 id="前后端分离架构下的springmvc" tabindex="-1"><a class="header-anchor" href="#前后端分离架构下的springmvc"><span>前后端分离架构下的SpringMVC</span></a></h3><p>在前后端分离的开发模式中，Spring MVC 主要构成了后端的一部分，而前端可以是任何类型的客户端：例如一个单页应用（SPA）、移动应用或者其它使用HTTP API进行通信客户端应用。在这种架构下，Spring MVC 不直接返回 JSP 页面，而是返回数据，通常是 JSON 或者 XML 格式，以供前端应用进行处理和显示。</p><h4 id="_1-dispatcherservlet-前端控制器" tabindex="-1"><a class="header-anchor" href="#_1-dispatcherservlet-前端控制器"><span>1. DispatcherServlet (前端控制器)</span></a></h4><p>作为整个框架的入口，接收所有的请求，并将其转发给相应的Controller。</p><h4 id="_2-controller-控制器" tabindex="-1"><a class="header-anchor" href="#_2-controller-控制器"><span>2. Controller (控制器)</span></a></h4><p>处理请求并返回一个响应体，该响应体通常会是JSON或XML格式的数据。</p><h4 id="_3-service-服务层" tabindex="-1"><a class="header-anchor" href="#_3-service-服务层"><span>3. Service (服务层)</span></a></h4><p>实际处理业务逻辑的地方；Controller将具体的业务逻辑处理委托给Service层。</p><h4 id="_4-data-access-object-dao-repository" tabindex="-1"><a class="header-anchor" href="#_4-data-access-object-dao-repository"><span>4. Data Access Object (DAO) / Repository</span></a></h4><p>负责与数据库进行通信和数据持久化相关的操作。</p><h4 id="_5-model-模型" tabindex="-1"><a class="header-anchor" href="#_5-model-模型"><span>5. Model (模型)</span></a></h4><p>通常是一个简单的POJO，包含数据以及对数据的操作，Model 可以被Controller返回给前端，并转换成JSON或XML格式。</p><h4 id="_6-rest-api" tabindex="-1"><a class="header-anchor" href="#_6-rest-api"><span>6. Rest API</span></a></h4><p>Spring MVC控制器中的方法通过特定的注解（比如 <code>@GetMapping</code>, <code>@PostMapping</code> 等）映射到特定的HTTP请求上。</p><p>在前后端分离架构中，前端应用通常使用JavaScript框架或者库（例如React, Angular, Vue等）构建，它们通过网络请求与Spring MVC后端进行交互，获取JSON格式的数据并渲染到用户的界面上。</p><p>前后端分离的架构提供了更大的灵活性，可以让开发者专注于各自的领域专长，同时也便于项目的管理和扩展。此外，这种模式支持跨平台的客户端，增强了解耦合和可测试性，并且可以更容易地实现前后端的并行开发与部署。</p><h3 id="前后端分离时的工作流程" tabindex="-1"><a class="header-anchor" href="#前后端分离时的工作流程"><span>前后端分离时的工作流程</span></a></h3><div class="hint-container tip"><p class="hint-container-title">SpringMVC在前后端分离开发模式下的工作流程</p><ol><li>用户在前端应用上发起一个HTTP请求。</li><li>DispatcherServlet 接收到请求，并询问 HandlerMapping 找到对应处理请求的 Controller。</li><li>Controller 处理请求，访问 Service 层处理业务逻辑。</li><li>Service 层可能会使用 DAO 来操作数据库并返回数据。</li><li>Controller 接收到数据后，构建响应体（通常是JSON或XML格式），并将其返回。</li><li>DispatcherServlet 将响应转发给客户端。</li></ol></div>',18),u=n("h2",{id:"mvc设计模式原理与优势",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#mvc设计模式原理与优势"},[n("span",null,"MVC设计模式原理与优势")])],-1),d=n("p",null,"MVC设计模式是一种用来组织代码以实现用户界面分离业务逻辑的方法。MVC代表“模型(Model)”、“视图(View)”和“控制器(Controller)”，是一种设计模式，主要用于实现用户界面与应用程序数据分离的目的。MVC使得应用程序的输入、处理和输出分开，简化了应用程序结构管理和维护。",-1),g=t('<h3 id="模型-model" tabindex="-1"><a class="header-anchor" href="#模型-model"><span>模型（Model）</span></a></h3><p>模型代表应用程序的专业知识，包含数据和与数据相关的状态以及逻辑。它的责任是管理数据、逻辑和业务规则。在MVC应用中，模型独立于视图和控制器，并对它们一无所知。</p><h3 id="视图-view" tabindex="-1"><a class="header-anchor" href="#视图-view"><span>视图（View）</span></a></h3><p>视图负责呈现模型数据，通常是用户界面的一部分。视图仅展现数据，并不直接修改数据。在Web应用中，视图通常是通过HTML和CSS来构建，决定了用户界面看起来和感觉怎么样。</p><h3 id="控制器-controller" tabindex="-1"><a class="header-anchor" href="#控制器-controller"><span>控制器（Controller）</span></a></h3><p>控制器是模型与视图之间的中介。它监听视图上的输入并处理它们，可能包含与用户交互有关的逻辑。但它通常会将业务逻辑委托给模型组件并从模型获取数据，然后选择哪个视图来展示。</p><h3 id="mvc的优势" tabindex="-1"><a class="header-anchor" href="#mvc的优势"><span>MVC的优势</span></a></h3><ol><li><p><strong>分离关注点</strong>：MVC将应用程序分成三个核心组件，使管理和维护更易处理。例如，UI开发人员可以专注于视图，而后端开发人员可以专注于控制器和模型。</p></li><li><p><strong>提高灵活性和可维护性</strong>：由于MVC促进了责任分离，因此应用程序成为更容易修改和扩展的模块化结构。你可以更改视图而不影响模型，反之亦然。</p></li><li><p><strong>可重用性</strong>：在MVC中，特别是模型可以在不同应用程序之间重用，而不需要重用视图和控制器。</p></li><li><p><strong>独立开发</strong>：在MVC中，由于分离了数据和业务逻辑，多个开发人员可以独立工作在模型、视图或控制器上。</p></li><li><p><strong>测试便利</strong>：分离了前端的视图和后端数据，使得编写单元测试和维持代码质量变得容易。</p></li><li><p><strong>应用广泛</strong>：MVC模式被广泛支持，许多框架和库（如Ruby on Rails, Django, Spring MVC）都以这种模式为核心构建。</p></li></ol><p>要正确实施MVC模式，需要确保这三个组件互相之间保持松散耦合。这样不仅可以得到上述提到的所有好处，而且还能保证代码库的整体健康。</p>',9);function k(v,m){const s=p("Mermaid");return l(),o("div",null,[c,a(s,{id:"mermaid-629",code:"eJyNkDFPwkAYhnd+xZe42kUmOpjAFaiJRAKEpWE4y1e4eGnr3QGadNDEjYG4Kok6mPAHjCaiv4bC35BeWmCz2+V73ufeu88wjIJiiqMJ7VAwf9Dokni+WC1fN98v8fIunj2uF2/xcrb6mm6eHuLP99XPfP1xv1lM4+ffQqIPBA2H0LEKAFB2CGfoqx4YxmlkdzpNaOH1CKWKoOJYTIZUuUMUbRRjjqqXOJUkC8Qhga9EwDkKPSb6CkI5hyTNXIzActKjTlg6URlJ5qOUcB4MmBtB1bHKF5pXNbeoopdUIpz5CgV1FQv8CGpONj+INoI+ckjAtmrfcDgm+6c1g3DEqULQPIK602U4aaEM+Dj9Q10H0xEkOAJbxzS2U+z3UaS0XEiAVLcct4vxGOfmkVfyjuV2NVdoHhWLxfRsTFhfDc2T8GZvkNRw3byGlXXkNqpZh5fXqO06SjmN+q7DzWnYWYf3T8cf1/4A0Q=="}),r,a(s,{id:"mermaid-715",code:"eJyNj7FLw0AUxvf8FQ+6msVOZhDaSxepCq24hA7hfGkPjyTeXdVCBgURpWh11S4OSsHBSRSs/jW95t8wiVczttvje9/ve9+zbdtSTHF0oB0LFna394keT/T1jb67TV/f9NVl+vKlp2d6dD+fPOnpaPY5TB8u9Mfz7Hs8fz9PJ0P9+GPlOV3hxz3Ycy0AqHmEMwxVB2x7M2nhUR+lgq327k4Cdc9lMvYV7aFoozjmqDo5U8+9QDwShUpEnKMoZFJEEJ9zyN2MYgKuZ0Zo+gPjcwtfvS9ZiFJCM+oymkDDc33lQ43SQvx3N0wx1RehhNyTpZYxfwujk7JGC2UchRLNKzUrX0k14JjVDxjnTiXYCNZk9sAhOpVqtWpm+4QdqJ6zHp+WBDEEpasS7uLGykRjcSNYQvwCdze5XQ=="}),u,d,a(s,{id:"mermaid-722",code:"eJyNjzFOwzAUhvec4kld8UKkSsnAkixIBKRI8WJlMPUztbCSEDsq3dl7AKZKDEw9AEK9TUuPQeymYSTb0/u/z78fISSwymqMIaPJabc/7bbHz+3he/Pz8XV82xze94FjnlreLOEuDwCgYIXBtgRCIMeXDo3txxugjCpclY6gLnMQ3FZNd44TltSVbWute9dBiYcawS16IGNZLVD7LHPZfW2VXJ/fHpcpt9yvUubGR26wDMbOHCuBLQp46OyluPCxsWuNUIBUWsczGc2vTP+ZZ4xnYRgOM1kpYZfxdfP6Z9CLsZhqJIMRLeREIxuMuYwmGul4xz8dv/Kmmcc="}),g])}const M=e(i,[["render",k],["__file","hello.html.vue"]]),S=JSON.parse('{"path":"/java/spring/springmvc/hello.html","title":"SpringMVC快速上手","lang":"en-US","frontmatter":{"order":1,"title":"SpringMVC快速上手","description":"创建Spring MVC项目 创建Spring MVC项目有多种方式，这里将详细介绍两种流行方法：手动创建和使用Spring Initializr。 方法一：手动创建 安装和配置JDK 下载并安装JDK。 设置环境变量JAVA_HOME并更新PATH。 安装Maven或Gradle 下载并安装Maven或Gradle。 设置环境变量M2_HOME（Ma...","head":[["meta",{"property":"og:url","content":"https://x.app/notebook/java/spring/springmvc/hello.html"}],["meta",{"property":"og:site_name","content":"Notebook"}],["meta",{"property":"og:title","content":"SpringMVC快速上手"}],["meta",{"property":"og:description","content":"创建Spring MVC项目 创建Spring MVC项目有多种方式，这里将详细介绍两种流行方法：手动创建和使用Spring Initializr。 方法一：手动创建 安装和配置JDK 下载并安装JDK。 设置环境变量JAVA_HOME并更新PATH。 安装Maven或Gradle 下载并安装Maven或Gradle。 设置环境变量M2_HOME（Ma..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-05-07T15:59:24.000Z"}],["meta",{"property":"article:author","content":"Mr.Topple"}],["meta",{"property":"article:modified_time","content":"2024-05-07T15:59:24.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"SpringMVC快速上手\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-05-07T15:59:24.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Topple\\",\\"url\\":\\"https://www.baidu.com\\"}]}"]]},"headers":[{"level":2,"title":"创建Spring MVC项目","slug":"创建spring-mvc项目","link":"#创建spring-mvc项目","children":[{"level":3,"title":"方法一：手动创建","slug":"方法一-手动创建","link":"#方法一-手动创建","children":[]},{"level":3,"title":"方法二：使用Spring Initializr","slug":"方法二-使用spring-initializr","link":"#方法二-使用spring-initializr","children":[]}]},{"level":2,"title":"配置开发SpringMVC项目","slug":"配置开发springmvc项目","link":"#配置开发springmvc项目","children":[{"level":3,"title":"配置Web.xml","slug":"配置web-xml","link":"#配置web-xml","children":[]},{"level":3,"title":"编写一个简单的Controller","slug":"编写一个简单的controller","link":"#编写一个简单的controller","children":[]},{"level":3,"title":"创建View模板（Thymeleaf）","slug":"创建view模板-thymeleaf","link":"#创建view模板-thymeleaf","children":[]},{"level":3,"title":"运行并测试Web应用","slug":"运行并测试web应用","link":"#运行并测试web应用","children":[]}]},{"level":2,"title":"SpringMVC架构概述","slug":"springmvc架构概述","link":"#springmvc架构概述","children":[{"level":3,"title":"SpringMVC核心组件","slug":"springmvc核心组件","link":"#springmvc核心组件","children":[]},{"level":3,"title":"传统开发模式下的工作流程","slug":"传统开发模式下的工作流程","link":"#传统开发模式下的工作流程","children":[]},{"level":3,"title":"前后端分离架构下的SpringMVC","slug":"前后端分离架构下的springmvc","link":"#前后端分离架构下的springmvc","children":[]},{"level":3,"title":"前后端分离时的工作流程","slug":"前后端分离时的工作流程","link":"#前后端分离时的工作流程","children":[]}]},{"level":2,"title":"MVC设计模式原理与优势","slug":"mvc设计模式原理与优势","link":"#mvc设计模式原理与优势","children":[{"level":3,"title":"模型（Model）","slug":"模型-model","link":"#模型-model","children":[]},{"level":3,"title":"视图（View）","slug":"视图-view","link":"#视图-view","children":[]},{"level":3,"title":"控制器（Controller）","slug":"控制器-controller","link":"#控制器-controller","children":[]},{"level":3,"title":"MVC的优势","slug":"mvc的优势","link":"#mvc的优势","children":[]}]}],"git":{"createdTime":1715097564000,"updatedTime":1715097564000,"contributors":[{"name":"Neil","email":"msdrizzle@outlook.com","commits":1}]},"readingTime":{"minutes":16.69,"words":5008},"filePathRelative":"java/spring/springmvc/hello.md","localizedDate":"May 7, 2024","autoDesc":true}');export{M as comp,S as data};
