import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as l,c as r,b as n,a as e,d as a,e as t}from"./app-BzBj7VWg.js";const c={},i=n("p",null,"常用构建工具 (Build Tools)：",-1),u={href:"https://webpack.docschina.org/concepts/",target:"_blank",rel:"noopener noreferrer"},d=n("strong",null,"Webpack",-1),k={href:"https://cn.rollupjs.org/",target:"_blank",rel:"noopener noreferrer"},m=n("strong",null,"Rollup",-1),h={href:"https://parceljs.org/docs/",target:"_blank",rel:"noopener noreferrer"},v=n("strong",null,"Parcel",-1),b={href:"http://gulpjs.com",target:"_blank",rel:"noopener noreferrer"},g=n("strong",null,"Gulp",-1),_={href:"https://gruntjs.com",target:"_blank",rel:"noopener noreferrer"},y=n("strong",null,"Grunt",-1),f=t('<div class="hint-container info"><p class="hint-container-title">使用建议</p><ul><li><p><strong>小型项目或快速原型</strong>：<strong>Parcel</strong> 是一个很好的选择，它的零配置特性和快速启动能力可以让你迅速搭建并运行项目，无需花费大量时间在配置构建工具上。</p></li><li><p><strong>中型项目</strong>：<strong>Webpack</strong> 或 <strong>Rollup</strong> 可能更适合。如果你的项目依赖关系复杂，需要代码拆分和优化，Webpack 提供了丰富的配置选项和强大的生态支持。而对于库的开发或者对最终包体积有严格要求的项目，<strong>Rollup</strong> 的“树摇”能力将非常有用。</p></li><li><p><strong>大型项目</strong>：<strong>Webpack</strong> 通常是首选，尤其是在需要高度定制化的构建流程、优化资源加载策略或实现复杂的代码拆分时。它的灵活性和扩展性能够满足大型应用的复杂需求。</p></li><li><p><strong>特定需求或习惯</strong>：<strong>Gulp</strong> 和 <strong>Grunt</strong> 仍然有其应用场景，特别是对于那些已经习惯了这些工具的团队，或是项目中特定任务需要高度定制化处理时。Gulp 的流式处理特别适合处理大量文件转换任务。</p></li></ul></div><h2 id="webpack" tabindex="-1"><a class="header-anchor" href="#webpack"><span>Webpack</span></a></h2>',2),x={href:"https://webpack.docschina.org/concepts/",target:"_blank",rel:"noopener noreferrer"},S=n("strong",null,"Webpack",-1),G=t(`<p>随着时间发展，Webpack 成为了现代前端项目标配，支持代码拆分、加载器和插件系统，极大地增强了前端构建的灵活性和性能。虽然学习曲线较陡峭，但它提供的功能和优化策略对于构建大型SPA（单页应用）至关重要。</p><div class="hint-container info"><p class="hint-container-title">出现时期及流行时期</p><p>Webpack 最初于2012年首次发布, 2014年开始在前端社区普遍使用，当时的主要亮点是其独特的代码分割和懒加载功能。</p><p>随着React, Angular, Vue等现代前端框架的兴起，Webpack也被广泛采用作为模块打包器。到现在，Webpack依然是主流的前端构建工具之一。</p></div><p>Webpack配置文件通常是项目的根目录下一个名为 <code>webpack.config.js</code> 的文件，该文件是一个Node.js模块，返回一个配置对象，Webpack根据这个对象进行打包构建：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">// 入口文件，路径相对于本文件所在的位置，可以直接使用模块名称，模块解析方式跟 Node.js 一样</span>
  <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token string">&#39;./app/index.js&#39;</span><span class="token punctuation">,</span> 

  <span class="token comment">// 输出配置</span>
  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span> 
    <span class="token comment">// 输出文件，路径相对于本文件所在的位置</span>
    <span class="token literal-property property">path</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;dist&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> 
    <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&#39;bundle.js&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>

  <span class="token comment">// 模块加载器配置</span>
  <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span> 
    <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">{</span>
        <span class="token comment">// 对于.js文件使用babel-loader进行转码，presets定义语法</span>
        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
        <span class="token literal-property property">exclude</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">node_modules</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
        <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">&#39;babel-loader&#39;</span><span class="token punctuation">,</span>
          <span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token literal-property property">presets</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;@babel/preset-env&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
          <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>

  <span class="token comment">// 插件配置</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> 

  <span class="token comment">// 开发服务器配置</span>
  <span class="token literal-property property">devServer</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>

  <span class="token comment">// 解析模块请求的选项</span>
  <span class="token literal-property property">resolve</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> 
  
  <span class="token comment">// 优化配置，如模块拆分、压缩等</span>
  <span class="token literal-property property">optimization</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这只是webpack的基础配置，webpack的配置非常灵活，可以根据具体需求配置各种loader和plugin，实现各种功能，如处理CSS，处理图片，处理字体文件等。</p><h2 id="rollup" tabindex="-1"><a class="header-anchor" href="#rollup"><span>Rollup</span></a></h2>`,6),j={href:"https://cn.rollupjs.org/",target:"_blank",rel:"noopener noreferrer"},W=n("strong",null,"Rollup",-1),w=n("p",null,"Rollup强调代码的“树摇”（tree shaking），即只打包实际用到的代码，从而生成更小的输出文件。Rollup 适合那些不需要复杂的运行时加载逻辑，追求极致体积优化的项目。",-1),R=n("div",{class:"hint-container info"},[n("p",{class:"hint-container-title"},"出现时期及流行时期"),n("p",null,"Webpack 最初于2012年首次发布, 2014年开始在前端社区普遍使用，当时的主要亮点是其独特的代码分割和懒加载功能。"),n("p",null,"随着React, Angular, Vue等现代前端框架的兴起，Webpack也被广泛采用作为模块打包器。到现在，Webpack依然是主流的前端构建工具之一。")],-1),P=n("h2",{id:"parcel",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#parcel"},[n("span",null,"Parcel")])],-1),T={href:"https://parceljs.org/docs/",target:"_blank",rel:"noopener noreferrer"},N=n("strong",null,"Parcel",-1),E=n("p",null,"Parcel 内置了对热门技术的支持，如React、Vue等，且具有较快的打包速度，非常适合快速原型开发或小型到中型项目。",-1),V=n("div",{class:"hint-container info"},[n("p",{class:"hint-container-title"},"出现时期及流行时期"),n("p",null,"Rollup 最初于2015年左右推出, 2016年开始热度渐盛。其专注于ES模块打包，产出结果更加精简，尤其对库和组件的打包十分友好。未来几年，随着ES模块的广泛应用，Rollup的使用会更加理想。")],-1),B=n("h2",{id:"gulp",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#gulp"},[n("span",null,"Gulp")])],-1),C={href:"http://gulpjs.com",target:"_blank",rel:"noopener noreferrer"},J=n("strong",null,"Gulp",-1),z=n("p",null,"Gulp 利用Node.js的流技术，使得文件在处理过程中无需频繁地写入磁盘，这对于大型项目而言是一个显著的性能提升。Gulp 的配置更加简洁，鼓励代码重用，受到许多开发者的喜爱。",-1),A=n("div",{class:"hint-container info"},[n("p",{class:"hint-container-title"},"出现时期及流行时期"),n("p",null,"Gulp 最初于2013年发布，2014年开始广泛被使用，提供了一种新颖的基于流的代码处理方式，用户可以通过编写简洁的代码定义任务并处理文件。但随着 webpack 等工具的流行，Gulp 的使用频率有所下降。")],-1),M=n("h2",{id:"grunt",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#grunt"},[n("span",null,"Grunt")])],-1),Z={href:"https://gruntjs.com",target:"_blank",rel:"noopener noreferrer"},D=n("strong",null,"Grunt",-1),I=n("p",null,"Grunt采用配置优先的方式，通过定义任务和加载插件来自动化各种构建任务。但随着时间的推移，其基于文件的操作方式和相对较低的执行效率成为了一些大型项目中的瓶颈。",-1),L=n("div",{class:"hint-container info"},[n("p",{class:"hint-container-title"},"出现时期及流行时期"),n("p",null,"Grunt 最初于2012年发布，并在2013-2015年期间被大量使用，是最早的一批前端自动化构建工具。然而，由于配置较为繁琐，随着新一代构建工具（如webpack）的出现，Grunt 的使用率大大降低。")],-1);function U(q,O){const s=o("ExternalLinkIcon");return l(),r("div",null,[i,n("ol",null,[n("li",null,[n("p",null,[n("a",u,[d,e(s)]),a(" - 一种流行的模块打包器，能够处理各种资源文件（如JS、CSS、图片等），支持代码分割、热模块替换等高级功能，适用于构建复杂的前端应用。")])]),n("li",null,[n("p",null,[n("a",k,[m,e(s)]),a(" - 专注于ES模块打包，适用于库和一些更关注体积优化的项目。")])]),n("li",null,[n("p",null,[n("a",h,[v,e(s)]),a(" - 零配置的打包工具，开箱即用，自动处理各种资源类型。")])]),n("li",null,[n("p",null,[n("a",b,[g,e(s)]),a(" - 基于流的自动化任务运行器，通过可读性强的代码处理文件，如压缩、合并、编译等。")])]),n("li",null,[n("p",null,[n("a",_,[y,e(s)]),a(" - 另一款成熟的任务自动化工具，通过配置文件定义各种任务。")])])]),f,n("p",null,[n("a",x,[S,e(s)]),a("：起初作为一个模块打包器，Webpack 专为解决JavaScript模块化问题而生，特别是在需要处理大量依赖和模块的复杂应用中。")]),G,n("p",null,[n("a",j,[W,e(s)]),a("：相比Webpack，Rollup 更专注于ES模块的打包，尤其是库的打包。")]),w,R,P,n("p",null,[n("a",T,[N,e(s)]),a("：作为新一代的打包工具，Parcel 强调零配置，即开即用。它自动处理各种资源，包括代码转换、优化和热更新，极大地简化了开发者的工作。")]),E,V,B,n("p",null,[n("a",C,[J,e(s)]),a("：Gulp 几乎与Grunt同期出现，它主打的是基于流的处理方式，提高了构建速度和效率。")]),z,A,M,n("p",null,[n("a",Z,[D,e(s)]),a("：作为早期的自动化构建工具，Grunt 凭借其强大的插件生态和易用性，在前端社区迅速流行起来。")]),I,L])}const H=p(c,[["render",U],["__file","build.html.vue"]]),K=JSON.parse('{"path":"/web/core/tool/build.html","title":"常用构建工具","lang":"en-US","frontmatter":{"order":10,"title":"常用构建工具","description":"常用构建工具 (Build Tools)： Webpack - 一种流行的模块打包器，能够处理各种资源文件（如JS、CSS、图片等），支持代码分割、热模块替换等高级功能，适用于构建复杂的前端应用。 Rollup - 专注于ES模块打包，适用于库和一些更关注体积优化的项目。 Parcel - 零配置的打包工具，开箱即用，自动处理各种资源类型。 Gulp ...","head":[["meta",{"property":"og:url","content":"https://x.app/notebook/web/core/tool/build.html"}],["meta",{"property":"og:site_name","content":"Notebook"}],["meta",{"property":"og:title","content":"常用构建工具"}],["meta",{"property":"og:description","content":"常用构建工具 (Build Tools)： Webpack - 一种流行的模块打包器，能够处理各种资源文件（如JS、CSS、图片等），支持代码分割、热模块替换等高级功能，适用于构建复杂的前端应用。 Rollup - 专注于ES模块打包，适用于库和一些更关注体积优化的项目。 Parcel - 零配置的打包工具，开箱即用，自动处理各种资源类型。 Gulp ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-05-31T06:27:16.000Z"}],["meta",{"property":"article:author","content":"Mr.Topple"}],["meta",{"property":"article:modified_time","content":"2024-05-31T06:27:16.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"常用构建工具\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-05-31T06:27:16.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Topple\\",\\"url\\":\\"https://www.baidu.com\\"}]}"]]},"headers":[{"level":2,"title":"Webpack","slug":"webpack","link":"#webpack","children":[]},{"level":2,"title":"Rollup","slug":"rollup","link":"#rollup","children":[]},{"level":2,"title":"Parcel","slug":"parcel","link":"#parcel","children":[]},{"level":2,"title":"Gulp","slug":"gulp","link":"#gulp","children":[]},{"level":2,"title":"Grunt","slug":"grunt","link":"#grunt","children":[]}],"git":{"createdTime":1717136836000,"updatedTime":1717136836000,"contributors":[{"name":"Neil","email":"msdrizzle@outlook.com","commits":1}]},"readingTime":{"minutes":5.83,"words":1748},"filePathRelative":"web/core/tool/build.md","localizedDate":"May 31, 2024","autoDesc":true}');export{H as comp,K as data};
