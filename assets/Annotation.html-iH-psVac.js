import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,e as t}from"./app-DsZR3byf.js";const e={},p=t(`<h1 id="annotation注解" tabindex="-1"><a class="header-anchor" href="#annotation注解"><span>Annotation注解</span></a></h1><p>Java 注解（Annotation）又称 Java 标注，是 JDK5.0 引入的一种注释机制、 Java 语言中的类、方法、变量、参数和包等都可以被标注</p><ul><li>和注释不同，Java 标注可以通过反射获取标 注内容</li><li>在编译器生成类文件时，标注可以被嵌入到字节码中、Java 虚拟机可以保留标注内容，在运行 时可以获取到标注内容</li><li>当然它也支持自定义 Java 标注（注解）</li></ul><h2 id="_1-内置注解" tabindex="-1"><a class="header-anchor" href="#_1-内置注解"><span>1. 内置注解</span></a></h2><p>Java中有三种常用的内置注解，这些注解用来为编译器提供指令（ java7和java8又新增了三种）</p><table><thead><tr><th>Java内置注解</th><th>说明</th></tr></thead><tbody><tr><td><code>@Override</code></td><td>检查该方法是否是重写方法。如果发现其父类，或者是引用的接口中并没有该方法时，会报编译错误</td></tr><tr><td><code>@Deprecated</code></td><td>标记过时方法。如果使用该方法，会报编译警告</td></tr><tr><td><code>@SuppressWarnings</code></td><td>指示编译器去忽略注解中声明的警告</td></tr><tr><td><code>@SafeVarargs</code></td><td>忽略任何使用参数为泛型变量的方法或构造函数调用产生的警告（ Java 7 ）</td></tr><tr><td><code>@FunctionalInterface</code></td><td>标识一个匿名函数或函数式接口 （ Java 8 ）</td></tr><tr><td><code>@Repeatable</code></td><td>标识某注解可以在同一个声明上使用多次 （ Java 8）</td></tr></tbody></table><p>SuppressWarnings：抑制编译时的警告信息、常用使用方式：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">&quot;unchecked&quot;</span><span class="token punctuation">)</span>            <span class="token comment">// 抑制单类型的警告 </span>

<span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">&quot;unchecked&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;rawtypes&quot;</span><span class="token punctuation">)</span> <span class="token comment">// 抑制多类型的警告</span>

<span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">&quot;all&quot;</span><span class="token punctuation">)</span>                  <span class="token comment">// 抑制所有类型的警告</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><table><thead><tr><th>SuppressWarnings的参数</th><th>用途</th></tr></thead><tbody><tr><td>all</td><td>抑制所有警告</td></tr><tr><td>boxing</td><td>抑制装箱、拆箱操作时候的警告</td></tr><tr><td>cast</td><td>抑制映射相关的警告</td></tr><tr><td>dep-ann</td><td>抑制启用注释的警告</td></tr><tr><td>deprecation</td><td>抑制过期方法警告</td></tr><tr><td>fallthrough</td><td>抑制确在switch中缺失breaks的警告</td></tr><tr><td>finally</td><td>抑制finally模块没有返回的警告</td></tr><tr><td>hiding</td><td>抑制相对于隐藏变量的局部变量的警告</td></tr><tr><td>incomplete-switch</td><td>忽略没有完整的switch语句</td></tr><tr><td>nls</td><td>忽略非nls格式的字符</td></tr><tr><td>null</td><td>忽略对null的操作</td></tr><tr><td>rawtypes</td><td>使用generics时忽略没有指定相应的类型</td></tr><tr><td>restriction</td><td>抑制禁止使用劝阻或禁止引用的警告</td></tr><tr><td>serial</td><td>忽略在serializable类中没有声明serialVersionUID变量</td></tr><tr><td>static-access</td><td>抑制不正确的静态访问方式警告</td></tr><tr><td>synthetic-access</td><td>抑制子类没有按最优方法访问内部类的警告</td></tr><tr><td>unchecked</td><td>抑制没有进行类型检查操作的警告</td></tr><tr><td>unqualified-field-access</td><td>抑制没有权限访问的域的警告</td></tr><tr><td>unused</td><td>抑制没被使用过的代码的警告</td></tr></tbody></table><h2 id="_2-元注解" tabindex="-1"><a class="header-anchor" href="#_2-元注解"><span>2. 元注解</span></a></h2><p>meta-annotation（元注解）：用来对注解类型进行注解的注解</p><table><thead><tr><th>Java元注解</th><th>说明</th></tr></thead><tbody><tr><td><code>@Retention(RetentionPolicy.RUNTIME)</code></td><td>表示注解信息保留到什么时候，是只在代码中，还是编入class文件中，或者是在运行时可以通过反射访问</td></tr><tr><td><code>@Documented</code></td><td>标记这些注解是否包含在用户文档中</td></tr><tr><td><code>@Target(ElementType.TYPE)</code></td><td>标记这个注解适用于哪种 Java 成员</td></tr><tr><td><code>@Inherited</code></td><td>标记这个注解是继承于哪个注解类 (默认 注解并没有继承于任何子类)</td></tr></tbody></table><p>ElementType(注解的适用类型）：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// ElementType 源码分析</span>
    <span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">ElementType</span> <span class="token punctuation">{</span>
    <span class="token constant">TYPE</span><span class="token punctuation">,</span>             <span class="token comment">/* 类、接口（包括注释类型）或枚举声明 */</span>
    <span class="token constant">FIELD</span><span class="token punctuation">,</span>            <span class="token comment">/* 字段声明（包括枚举常量） */</span>
    <span class="token constant">METHOD</span><span class="token punctuation">,</span>           <span class="token comment">/* 方法声明 */</span>
    <span class="token constant">PARAMETER</span><span class="token punctuation">,</span>        <span class="token comment">/* 参数声明 */</span>
    <span class="token constant">CONSTRUCTOR</span><span class="token punctuation">,</span>      <span class="token comment">/* 构造方法声明 */</span>
    <span class="token constant">LOCAL_VARIABLE</span><span class="token punctuation">,</span>   <span class="token comment">/* 局部变量声明 */</span>
    <span class="token constant">ANNOTATION_TYPE</span><span class="token punctuation">,</span>  <span class="token comment">/* 注释类型声明 */</span>
    <span class="token constant">PACKAGE</span>           <span class="token comment">/* 包声明 */</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>RetentionPolicy（注解作用域策略、或者说保留级别）：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// RetentionPolicy 源码分析：</span>
<span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">RetentionPolicy</span> <span class="token punctuation">{</span>
    <span class="token constant">SOURCE</span><span class="token punctuation">,</span>  <span class="token comment">/* Annotation信息仅存在于编译器处理期间，编译器处理完之后就没有该Annotation信息了 */</span>
    <span class="token constant">CLASS</span><span class="token punctuation">,</span>   <span class="token comment">/* 编译器将Annotation存储于类对应的.class文件中（默认行为） */</span>
    <span class="token constant">RUNTIME</span>  <span class="token comment">/* 编译器将Annotation存储于class文件中，并且可由JVM读入 */</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-自定义注解" tabindex="-1"><a class="header-anchor" href="#_3-自定义注解"><span>3. 自定义注解</span></a></h2><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 自定义注解格式</span>
<span class="token annotation punctuation">@Documented</span>
<span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">TYPE</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">MyAnnotation1</span> <span class="token punctuation">{</span>
    参数类型 参数名<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> 默认值<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意事项：</p><ul><li><p>定义 Annotation 时，@interface 是必须的、定义的注解，自动继承了java.lang.annotation.Annotation接口</p></li><li><p>可以为注解定义一些参数，定义的方式是在注解内定义一些方法（返回值类型表示参数的类型）</p></li><li><p>注解内参数的类型不是什么都可以的，合法的类型有基本类型、String、Class、枚举、注解，以及这些类型的数组</p></li><li><p>参数定义时可以使用default指定一个默认值、如果定义了参数且没有提供默认值，在使用注解时必须提供具体的值，不能为null</p><p>（常使用空字符串、0作为默认值，下例定义了一个包含默认值参数的注解：）</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token constant">METHOD</span><span class="token punctuation">,</span> <span class="token constant">CONSTRUCTOR</span><span class="token punctuation">,</span> <span class="token constant">FIELD</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Documented</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">InjectAnnotation</span> <span class="token punctuation">{</span>
    <span class="token keyword">boolean</span> <span class="token function">optional</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>当只有一个参数，且名称为value时，提供参数值时可以省略 &quot;value=&quot;</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">&quot;deprecation&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;unused&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// 可以省略&quot;value=&quot; ，如下：</span>
<span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&quot;deprecation&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;unused&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="_4-查看注解信息" tabindex="-1"><a class="header-anchor" href="#_4-查看注解信息"><span>4. 查看注解信息</span></a></h2><p>创建了注解，就可以在程序中使用，注解指定的目标，提供需要的参数，但这还是不会影响到程序的运行。要影响程序，我们要先能查看这些信息。我们主要考虑 <code>@Retention</code> 为 <code>RetentionPolicy.RUNTIME</code> 的注解，利用反射机制在运行时进行查看和利用这些信息。</p><p><strong>反射相关类中与注解有关的方法</strong>，Class、Field、Method、Constructor中都有如下方法:</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">//获取所有的注解</span>
<span class="token keyword">public</span> <span class="token class-name">Annotation</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getAnnotations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//获取所有本元素上直接声明的注解，忽略inherited来的</span>
<span class="token keyword">public</span> <span class="token class-name">Annotation</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getDeclaredAnnotations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//获取指定类型的注解，没有返回null</span>
<span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">A</span> <span class="token keyword">extends</span> <span class="token class-name">Annotation</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">A</span> <span class="token function">getAnnotation</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">A</span><span class="token punctuation">&gt;</span></span> annotationClass<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//判断是否有指定类型的注解</span>
<span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isAnnotationPresent</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Annotation</span><span class="token punctuation">&gt;</span></span> annotationClass<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于Method和Contructor，它们都有方法参数，而参数也可以有注解，所以它们都有如下方法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">Annotation</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getParameterAnnotations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_5-实现di容器" tabindex="-1"><a class="header-anchor" href="#_5-实现di容器"><span>5. 实现DI容器</span></a></h2><p>使用注解和反射，实现简单的DI容器</p><ul><li><p>定义两个注解，注解<code>@SimpleInject</code>修饰类中字段，表达依赖关系，<code>@SimpleSingleton</code>用于修饰类，表示类型是单例</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">FIELD</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">SimpleInject</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * @Classname SimpleSingleton
 * @Description 修饰类，表示类型是单例
 * @Date 2022/2/26 11:30
 * @Author idrizzle
 */</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">TYPE</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">SimpleSingleton</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><p>​</p><ul><li><p>定义两个简单的服务ServiceA、ServiceB和测试类, ServiceA依赖于ServiceB</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">final</span> <span class="token class-name">ServiceA</span> serviceA <span class="token operator">=</span> <span class="token class-name">SimpleContainer</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token class-name">ServiceA</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        serviceA<span class="token punctuation">.</span><span class="token function">callB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">ServiceA</span> <span class="token punctuation">{</span>
        <span class="token comment">// ServiceA使用 @SimpleInject表达对ServiceB的依赖</span>
        <span class="token annotation punctuation">@SimpleInject</span>
        <span class="token class-name">ServiceB</span> b<span class="token punctuation">;</span>

        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">callB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            b<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@SimpleSingleton</span>
    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">ServiceB</span> <span class="token punctuation">{</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;I&#39;m ServiceB&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>创建DI容器类</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SimpleContainer</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Class</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> instances <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/***
     * <span class="token keyword">@param</span> <span class="token parameter">cls</span> Class对象
     * <span class="token keyword">@author</span> itdrizzle
     * <span class="token keyword">@date</span> 2022/2/26 11:26
     * <span class="token keyword">@return</span> <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">T</span></span><span class="token punctuation">}</span>
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">T</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> cls<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token keyword">boolean</span> singleton <span class="token operator">=</span> cls<span class="token punctuation">.</span><span class="token function">isAnnotationPresent</span><span class="token punctuation">(</span><span class="token class-name">SimpleSingleton</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 首先检查类型是否是单例，如果不是，就直接调用createInstance创建对象。</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>singleton<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token function">createInstance</span><span class="token punctuation">(</span>cls<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token comment">// 检查缓存，如果有，直接返回</span>
            <span class="token class-name">Object</span> obj <span class="token operator">=</span> instances<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>cls<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">)</span> obj<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token comment">// 调用createInstance创建对象，并放入缓存中</span>
            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>cls<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                obj <span class="token operator">=</span> instances<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>cls<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    obj <span class="token operator">=</span> <span class="token function">createInstance</span><span class="token punctuation">(</span>cls<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    instances<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">)</span> obj<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/***
     * 创建需要的对象
     * <span class="token keyword">@param</span> <span class="token parameter">cls</span> Class对象
     * <span class="token keyword">@author</span> itdrizzle
     * <span class="token keyword">@date</span> 2022/2/26 11:35
     * <span class="token keyword">@return</span> <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">T</span></span><span class="token punctuation">}</span>
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">T</span> <span class="token function">createInstance</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> cls<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token class-name">T</span> obj <span class="token operator">=</span> cls<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Field</span><span class="token punctuation">[</span><span class="token punctuation">]</span> fields <span class="token operator">=</span> cls<span class="token punctuation">.</span><span class="token function">getDeclaredFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Field</span> f <span class="token operator">:</span> fields<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">isAnnotationPresent</span><span class="token punctuation">(</span><span class="token class-name">SimpleInject</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>f<span class="token punctuation">.</span><span class="token function">isAccessible</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    f<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> fieldCls <span class="token operator">=</span> f<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                f<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token function">getInstance</span><span class="token punctuation">(</span>fieldCls<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> obj<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul>`,31),c=[p];function o(l,i){return s(),a("div",null,c)}const k=n(e,[["render",o],["__file","Annotation.html.vue"]]),r=JSON.parse('{"path":"/java/syntax/senior/Annotation.html","title":"Annotation注解","lang":"en-US","frontmatter":{"order":10,"description":"Annotation注解 Java 注解（Annotation）又称 Java 标注，是 JDK5.0 引入的一种注释机制、 Java 语言中的类、方法、变量、参数和包等都可以被标注 和注释不同，Java 标注可以通过反射获取标 注内容 在编译器生成类文件时，标注可以被嵌入到字节码中、Java 虚拟机可以保留标注内容，在运行 时可以获取到标注内容 当然...","head":[["meta",{"property":"og:url","content":"https://x.app/notebook/java/syntax/senior/Annotation.html"}],["meta",{"property":"og:site_name","content":"Notebook"}],["meta",{"property":"og:title","content":"Annotation注解"}],["meta",{"property":"og:description","content":"Annotation注解 Java 注解（Annotation）又称 Java 标注，是 JDK5.0 引入的一种注释机制、 Java 语言中的类、方法、变量、参数和包等都可以被标注 和注释不同，Java 标注可以通过反射获取标 注内容 在编译器生成类文件时，标注可以被嵌入到字节码中、Java 虚拟机可以保留标注内容，在运行 时可以获取到标注内容 当然..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-04-15T09:06:58.000Z"}],["meta",{"property":"article:author","content":"Mr.Topple"}],["meta",{"property":"article:modified_time","content":"2024-04-15T09:06:58.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Annotation注解\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-04-15T09:06:58.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Topple\\",\\"url\\":\\"https://www.baidu.com\\"}]}"]]},"headers":[{"level":2,"title":"1. 内置注解","slug":"_1-内置注解","link":"#_1-内置注解","children":[]},{"level":2,"title":"2. 元注解","slug":"_2-元注解","link":"#_2-元注解","children":[]},{"level":2,"title":"3. 自定义注解","slug":"_3-自定义注解","link":"#_3-自定义注解","children":[]},{"level":2,"title":"4. 查看注解信息","slug":"_4-查看注解信息","link":"#_4-查看注解信息","children":[]},{"level":2,"title":"5. 实现DI容器","slug":"_5-实现di容器","link":"#_5-实现di容器","children":[]}],"git":{"createdTime":1713172018000,"updatedTime":1713172018000,"contributors":[{"name":"Neil","email":"msdrizzle@outlook.com","commits":1}]},"readingTime":{"minutes":6.14,"words":1842},"filePathRelative":"java/syntax/senior/Annotation.md","localizedDate":"April 15, 2024","autoDesc":true}');export{k as comp,r as data};
