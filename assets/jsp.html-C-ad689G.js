import{_ as l}from"./image-20211101170023815-C2q8dhp2.js";import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as d,c as r,b as t,d as e,a as s,e as a}from"./app-CWK6jW3V.js";const p={},c=a(`<p>JSP全名为Java Server Pages，中⽂名叫java服务器⻚⾯，其根本是⼀个简化的Servlet设计</p><p>一个JSP页面由<strong>元素</strong>和<strong>模板数据</strong>组成。元素是必须由JSP容器处理的部分，而模板数据（HTML）是JSP容器不处理的部分</p><p>注释：在JSP页面中，可以使用两种类型的注释</p><ul><li>一种是HTML注释，这种注释可以在客户端看到</li><li>一种是为JSP页面本身所做的注释，通常是给程序员看的，我们称之为JSP注释</li></ul><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token comment">&lt;!-- HTML注释 --&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-jsp line-numbers-mode" data-ext="jsp" data-title="jsp"><pre class="language-jsp"><code>&lt;%-- JSP注释 --%&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><br><h2 id="_1-jsp运行机制" tabindex="-1"><a class="header-anchor" href="#_1-jsp运行机制"><span>1. JSP运行机制</span></a></h2><p>JSP是一种建立在Servlet规范功能之上的动态网页技术、JSP文件在用户第一次请求时，会被编译成Servlet，然后再由这个Servlet处理用户的请求，所以JSP也可以被看成是运行时的Servlet。（Web容器和JSP容器是同义的）</p><figure><img src="`+l+`" alt="image-20211101170023815" tabindex="0" loading="lazy"><figcaption>image-20211101170023815</figcaption></figure><p>JSP容器管理JSP页面生命周期的两个阶段：</p><ul><li><p>转换阶段（translation phase）：当有一个对JSP页面的客户请求到来时，JSP容器检验JSP页面的语法是否正确，将JSP页面转换为Servlet源文件，然后调用javac工具类编译Servlet源文件生成字节码文件</p></li><li><p>执行阶段（execution phase）：Servlet容器加载转换后的Servlet类，实例化一个对象处理客户端的请求，在请求处理完成后，响应对象被JSP容器接收，容器将HTML格式的响应信息发送到客户端</p></li></ul><p>Note：</p><ul><li><p>当第一次加载JSP页面时，因为要将JSP文件转换为Servlet类，所以响应速度较慢</p></li><li><p>当再次请求时，JSP容器就会直接执行第一次请求时产生的Servlet，而不会重新转换JSP文件，所以其执行速度和原始的Servlet执行速度几乎相同</p></li><li><p>在JSP执行期间，JSP容器会检查JSP文件，看是否有更新或修改。如果有更新或修改，则JSP容器会再次编译JSP或Servlet；如果没有更新或修改，就直接执行前面产生的Servlet，这也是JSP相对于Servlet的好处之一</p></li></ul><br><h2 id="_2-jsp指令元素" tabindex="-1"><a class="header-anchor" href="#_2-jsp指令元素"><span>2. JSP指令元素</span></a></h2><p>指令元素（directive element）：主要用于为转换阶段提供整个JSP页面的相关信息，指令不会产生任何输出到当前的输出流中</p><p>三大指令: page指令、include指令和taglib指令</p><div class="language-jsp line-numbers-mode" data-ext="jsp" data-title="jsp"><pre class="language-jsp"><code>&lt;%--1. page指令  (要注意的是，在page指令中只有import属性可以重复设置)--%&gt;
&lt;%@page import=&quot;javax.servlet.*, java.util.Vector&quot; %&gt;
&lt;%@page import=&quot;java.util.Random&quot; %&gt;

&lt;%-- page指令不常用的属性：
language：当前JSP编译后的语言！默认为java，当前也只能选择java
info：当前JSP的说明信息,可以通过调用Servlet接口的getServletInfo()方法来得到
isThreadSafe：当前JSP是否执行只能单线程访问，默认为false，表示支持并发访问
session：当前页面是否可以使用session，默认为false，表示在JSP页面中可以使用隐含的session对象
extends：指定JSP编译的servlet的父类！ 
--%&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><table><thead><tr><th>page指令常用属性</th><th>默认值</th><th>作用</th></tr></thead><tbody><tr><td>import=&quot;importList&quot;</td><td></td><td>指定在脚本环境中可以使用的Java类</td></tr><tr><td>buffer=&quot;none|size kb&quot;</td><td>8kb</td><td>指定out对象（类型为JspWriter）使用的缓冲区大小，如果设置为none，则将不使用缓冲区</td></tr><tr><td>autoFlush=&quot;true|false&quot;</td><td>true</td><td>当缓冲区满的时候，缓存的输出是否应该自动刷新</td></tr><tr><td>errorPage=&quot;error_url&quot;</td><td></td><td>当JSP页面发生异常时，将转向哪一个错误处理页面。如果一个页面通过使用该属性定义了错误页面，那么在web.xml文件中定义的任何错误页面将不会被使用</td></tr><tr><td>isErrorPage=&quot;true|false&quot;</td><td>false</td><td>用于指定当前的JSP页面是否是另一个JSP页面的错误处理页面</td></tr><tr><td>pageEncoding=&quot;peinfo&quot;</td><td></td><td>指定JSP页面使用的字符编码。如果没有设置这个属性，则JSP页面使用contentType属性指定的字符集，如果这两个属性都没有指定，则使用字符集“ISO-8859-1”</td></tr><tr><td>contentType=&quot;ctinfo&quot;</td><td></td><td>用于响应的JSP页面的MIME类型和字符编码</td></tr><tr><td>isELIgnored=&quot;true|false&quot;</td><td>false</td><td>在JSP页面中是否执行或忽略EL表达式(Servlet 2.3或之前版本的格式，则默认值是true)</td></tr><tr><td>deferredSyntaxAllowedAsLiteral=&quot;true|false&quot;</td><td></td><td>JSP页面的模板文本中是否允许出现字符序列<code>#{</code></td></tr><tr><td>trimDirectiveWhitespaces=&quot;true|false&quot;</td><td>false</td><td>指示模板中的空白应该如何处理(默认值是false，即不删除空白)</td></tr></tbody></table><div class="language-jsp line-numbers-mode" data-ext="jsp" data-title="jsp"><pre class="language-jsp"><code>
&lt;%--2. include指令 --%&gt;
&lt;%--用于在JSP页面中静态包含一个文件，该文件可以是JSP页面、HTML网页、文本文件或一段Java代码--%&gt;
&lt;%@include file=&quot;demo.jsp&quot;%&gt;

&lt;%-- 3. taglib指令是用来在当前jsp页面中导入第三方的标签库--%&gt;
&lt;%@ taglib prefix=&quot;c&quot; uri=&quot;http://java.sun.com/jsp/jstl/core&quot; %&gt;
prefix：指定标签前缀，这个东西可以随意起名
uri：   指定第三方标签库的uri（唯一标识）

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h2 id="_3-jsp脚本元素" tabindex="-1"><a class="header-anchor" href="#_3-jsp脚本元素"><span>3. JSP脚本元素</span></a></h2><p>脚本元素（scripting element）包括：声明（declaration）、脚本段（scriptlet）、表达式（expression）</p><p>JSP 2.0增加了EL表达式，作为脚本元素的另一个选择</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">--</span>脚本元素（scripting element）<span class="token operator">--</span><span class="token operator">%</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">--</span><span class="token number">1.</span> 声明（declaration）：用于在<span class="token constant">JSP</span>页面中声明合法的变量和方法。以“<span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">!</span>”开始，以“<span class="token operator">%</span><span class="token operator">&gt;</span>”结束 <span class="token operator">--</span><span class="token operator">%</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">!</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getTodaysDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token operator">%</span><span class="token operator">&gt;</span>

<span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">--</span><span class="token number">2.</span> 脚本（scripts）：合法的<span class="token class-name">Java</span>代码。以“<span class="token operator">&lt;</span><span class="token operator">%</span>”开始，以“<span class="token operator">%</span><span class="token operator">&gt;</span>”结束。<span class="token operator">--</span><span class="token operator">%</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">%</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Enumeration</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> e <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeaderNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> e<span class="token punctuation">.</span><span class="token function">hasMoreElements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">String</span> header <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">nextElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>header <span class="token operator">+</span> <span class="token string">&quot;: &quot;</span> <span class="token operator">+</span> request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span>header<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;&lt;br /&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token class-name">String</span> message <span class="token operator">=</span> <span class="token string">&quot;Thank you&quot;</span><span class="token punctuation">;</span>
<span class="token operator">%</span><span class="token operator">&gt;</span>

<span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">--</span><span class="token number">3.</span> 表达式（expression）：计算表达式的值，并使用隐式对象out将结果以字符串的形式输出 <span class="token operator">--</span><span class="token operator">%</span><span class="token operator">&gt;</span>
<span class="token class-name">Today</span> is <span class="token operator">&lt;</span><span class="token operator">%=</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>Calendar</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span><span class="token operator">&gt;</span>
<span class="token class-name">Today</span> is
<span class="token operator">&lt;</span><span class="token operator">%</span>
    out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>Calendar</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">%</span><span class="token operator">&gt;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h2 id="_4-jsp动作元素" tabindex="-1"><a class="header-anchor" href="#_4-jsp动作元素"><span>4. JSP动作元素</span></a></h2><p>动作元素（action element）：动作元素为请求处理阶段提供信息</p><ul><li><p>与JSP指令元素不同的是，JSP动作元素在请求处理阶段起作用。JSP动作元素是用XML语法写成的</p></li><li><p>利用JSP动作可以动态地插入文件、重用JavaBean组件、把用户重定向到另外的页面、为Java插件生成HTML代码</p></li><li><p>动作元素基本上都是预定义的函数，JSP规范定义了一系列的标准动作，它用JSP作为前缀，可用的标准动作元素如下</p></li></ul><table><thead><tr><th>语法</th><th>描述</th></tr></thead><tbody><tr><td>jsp:include</td><td>在页面被请求的时候引入一个文件</td></tr><tr><td>jsp:useBean</td><td>寻找或者实例化一个JavaBean</td></tr><tr><td>jsp:setProperty</td><td>设置JavaBean的属性</td></tr><tr><td>jsp:getProperty</td><td>输出某个JavaBean的属性</td></tr><tr><td>jsp:forward</td><td>把请求转到一个新的页面</td></tr><tr><td>jsp:plugin</td><td>根据浏览器类型为Java插件生成OBJECT或EMBED标记</td></tr><tr><td>jsp:element</td><td>定义动态XML元素</td></tr><tr><td>jsp:attribute</td><td>设置动态定义的XML元素属性</td></tr><tr><td>jsp:body</td><td>设置动态定义的XML元素内容</td></tr><tr><td>jsp:text</td><td>在JSP页面和文档中使用写入文本的模板</td></tr></tbody></table><div class="language-jsp line-numbers-mode" data-ext="jsp" data-title="jsp"><pre class="language-jsp"><code>
&lt;jsp:useBean id=&quot;test&quot; class=&quot;com.example.main.TestBean&quot; /&gt;

&lt;jsp:setProperty name=&quot;test&quot; property=&quot;message&quot; value=&quot;hehe...&quot; /&gt;
&lt;jsp:getProperty name=&quot;test&quot; property=&quot;message&quot; /&gt;

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestBean</span> <span class="token punctuation">{</span>
   <span class="token keyword">private</span> <span class="token class-name">String</span> message<span class="token punctuation">;</span>
 
   <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMessage</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>message <span class="token operator">=</span> message<span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h2 id="_5-jsp隐含对象" tabindex="-1"><a class="header-anchor" href="#_5-jsp隐含对象"><span>5. JSP隐含对象</span></a></h2><p>在JSP中一共有9个隐含对象，这个9个对象我可以在JSP中直接使用</p><table><thead><tr><th>隐含对象</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>request</td><td>javax.servlet.http.HttpServletRequest</td><td>可以获取用户发送的请求信息</td></tr><tr><td>response</td><td>javax.servlet.http.HttpScrvletResponse</td><td>向浏览器发送响应信息</td></tr><tr><td>pageContext</td><td>javax.scrvlet.jsp.PageContext</td><td>当前页面的上下文</td></tr><tr><td>session</td><td>javax.scrvlet.http.HttpSession</td><td>域对象，用来共享数据</td></tr><tr><td>application</td><td>javax.servlet.ServletContext</td><td>代表整个WEB应用，是JavaWeb中最大的域对象</td></tr><tr><td>out</td><td>javax.servlet.jsp.JspWriter</td><td>向页面输出内容</td></tr><tr><td>config</td><td>javax.servlet.ServletConfig</td><td>当前JSP的配置信息(初始化参数)</td></tr><tr><td>page</td><td>java.lang.Object</td><td>代表当前JSP的对象</td></tr><tr><td>exception</td><td>java.lang.Throwable</td><td>页面中的异常</td></tr></tbody></table><br><h1 id="六-el表达式和jstl" tabindex="-1"><a class="header-anchor" href="#六-el表达式和jstl"><span>六 EL表达式和JSTL</span></a></h1><h2 id="_6-el表达式语言" tabindex="-1"><a class="header-anchor" href="#_6-el表达式语言"><span>6. EL表达式语言</span></a></h2><p>表达式语言（Expression Language，简称EL）语法简单，使用方便。所有的EL表达式都是以 <code>\${</code> 开始，以 <code>}</code> 结束</p><p>当EL表达式作为标签的属性值时，还可以使用<code>#{expr}</code>语法，这是在JSP 2.1版本中引入的延迟表达式（Deferred Expression）的语法</p><table><thead><tr><th style="text-align:center;">EL基础操作符</th><th style="text-align:center;"><strong>描述</strong></th></tr></thead><tbody><tr><td style="text-align:center;">.</td><td style="text-align:center;">访问一个Bean属性或者一个映射条目</td></tr><tr><td style="text-align:center;">[]</td><td style="text-align:center;">访问一个数组或者链表的元素</td></tr><tr><td style="text-align:center;">( )</td><td style="text-align:center;">组织一个子表达式以改变优先级</td></tr><tr><td style="text-align:center;">+</td><td style="text-align:center;">加</td></tr><tr><td style="text-align:center;">-</td><td style="text-align:center;">减或负</td></tr><tr><td style="text-align:center;">*</td><td style="text-align:center;">乘</td></tr><tr><td style="text-align:center;">/ or div</td><td style="text-align:center;">除</td></tr><tr><td style="text-align:center;">% or mod</td><td style="text-align:center;">取模</td></tr><tr><td style="text-align:center;">== or eq</td><td style="text-align:center;">测试是否相等</td></tr><tr><td style="text-align:center;">!= or ne</td><td style="text-align:center;">测试是否不等</td></tr><tr><td style="text-align:center;">&lt; or lt</td><td style="text-align:center;">测试是否小于</td></tr><tr><td style="text-align:center;">&gt; or gt</td><td style="text-align:center;">测试是否大于</td></tr><tr><td style="text-align:center;">&lt;= or le</td><td style="text-align:center;">测试是否小于等于</td></tr><tr><td style="text-align:center;">&gt;= or ge</td><td style="text-align:center;">测试是否大于等于</td></tr><tr><td style="text-align:center;">&amp;&amp; or and</td><td style="text-align:center;">测试逻辑与</td></tr><tr><td style="text-align:center;">|| or or</td><td style="text-align:center;">测试逻辑或</td></tr><tr><td style="text-align:center;">! or not</td><td style="text-align:center;">测试取反</td></tr><tr><td style="text-align:center;">empty</td><td style="text-align:center;">测试是否空值</td></tr></tbody></table><div class="language-jsp line-numbers-mode" data-ext="jsp" data-title="jsp"><pre class="language-jsp"><code>
&lt;!--使用表达式及操作符--&gt;
Box Perimeter is: \${2*box.width + 2*box.height}

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><table><thead><tr><th style="text-align:left;">EL隐含对象</th><th style="text-align:left;"><strong>描述</strong></th></tr></thead><tbody><tr><td style="text-align:left;">pageScope</td><td style="text-align:left;">page 作用域</td></tr><tr><td style="text-align:left;">requestScope</td><td style="text-align:left;">request 作用域</td></tr><tr><td style="text-align:left;">sessionScope</td><td style="text-align:left;">session 作用域</td></tr><tr><td style="text-align:left;">applicationScope</td><td style="text-align:left;">application 作用域</td></tr><tr><td style="text-align:left;">param</td><td style="text-align:left;">Request 对象的参数，字符串</td></tr><tr><td style="text-align:left;">paramValues</td><td style="text-align:left;">Request对象的参数，字符串集合</td></tr><tr><td style="text-align:left;">header</td><td style="text-align:left;">HTTP 信息头，字符串</td></tr><tr><td style="text-align:left;">headerValues</td><td style="text-align:left;">HTTP 信息头，字符串集合</td></tr><tr><td style="text-align:left;">initParam</td><td style="text-align:left;">上下文初始化参数</td></tr><tr><td style="text-align:left;">cookie</td><td style="text-align:left;">Cookie值</td></tr><tr><td style="text-align:left;">pageContext</td><td style="text-align:left;">当前页面的pageContext</td></tr></tbody></table><p>pageScope，requestScope，sessionScope，applicationScope变量用来访问存储在各个作用域层次的变量</p><div class="language-jsp line-numbers-mode" data-ext="jsp" data-title="jsp"><pre class="language-jsp"><code>
&lt;!-- 脚本元素和表达式取值对比 --&gt;
&lt;%=pageContext.getAttribute(&quot;address1&quot;) %&gt;
&lt;%=pageContext.getAttribute(&quot;address&quot;, PageContext.REQUEST_SCOPE) %&gt;
&lt;%=pageContext.getAttribute(&quot;address&quot;, PageContext.SESSION_SCOPE) %&gt;
&lt;%=pageContext.getAttribute(&quot;address&quot;, pageContext.APPLICATION_SCOPE) %&gt;

\${pageScope.address1 }
\${requestScope.address }
\${sessionScope.address }
\${applicationScope.address }

&lt;!-- 需求2: 通过el表达式 从不确定域中获取数据 --&gt;
&lt;%=pageContext.findAttribute(&quot;address&quot;) %&gt;

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当表达式没有指定变量或者对象的范围时， 那么容器会依次从 <code>pageContext—&gt;request—&gt;session—&gt;application</code> 中查找该变量或对象</p><p><strong>注意：</strong></p><ol><li><p>EL表达式只可以从四大域中获取数据，但不可以存放数据</p></li><li><p>EL表达式中的内容会显示到浏览器上</p></li><li><p>使用pageContext的getAttribute方法或者findAttribute方法从4个范围中取出数据的时候、如果指定的key不存在、会返回null，而使用el表达式取出的时候指定的key不存在，页面上什么都不会显示</p></li></ol><br><h2 id="_7-jsp标准标签库" tabindex="-1"><a class="header-anchor" href="#_7-jsp标准标签库"><span>7. JSP标准标签库</span></a></h2><p>JSP标准标签库（JavaServer Pages Standard Tag Library，JSTL）是一个JSP标签集合，它封装了JSP应用的通用核心功能</p><p>JSTL 库安装：</p>`,56),u={href:"http://tomcat.apache.org/taglibs/",target:"_blank",rel:"noopener noreferrer"},v={href:"http://static.runoob.com/download/jakarta-taglibs-standard-1.1.2.tar.gz",target:"_blank",rel:"noopener noreferrer"},g=a(`<p>maven引入：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>javax.servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>jstl<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
<span class="token comment">&lt;!--  jstl-1.2之后可不再使用standard.jar--&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br>`,3),m=t("thead",null,[t("tr",null,[t("th",null,"JSTL标签分类"),t("th",null,"引用语法"),t("th")])],-1),b=t("td",null,"核心标签",-1),k={href:"http://java.sun.com/jsp/jstl/core",target:"_blank",rel:"noopener noreferrer"},h=t("td",null,null,-1),j=t("td",null,"格式化标签",-1),q={href:"http://java.sun.com/jsp/jstl/fmt",target:"_blank",rel:"noopener noreferrer"},S=t("td",null,null,-1),x=t("td",null,"SQL标签",-1),f={href:"http://java.sun.com/jsp/jstl/sql",target:"_blank",rel:"noopener noreferrer"},y=t("td",null,null,-1),J=t("td",null,"XML标签",-1),P={href:"http://java.sun.com/jsp/jstl/xml",target:"_blank",rel:"noopener noreferrer"},_=t("td",null,null,-1),T=t("td",null,"JSTL函数",-1),L={href:"http://java.sun.com/jsp/jstl/functions",target:"_blank",rel:"noopener noreferrer"},w=t("td",null,null,-1),E=a(`<br><h2 id="_8-jstl核心标签" tabindex="-1"><a class="header-anchor" href="#_8-jstl核心标签"><span>8. JSTL核心标签</span></a></h2><p>Core标签库主要包括了<code>一般用途的标签</code>、<code>条件标签</code>、<code>迭代标签</code>和<code>与URL相关的标签 </code></p><div class="language-jsp line-numbers-mode" data-ext="jsp" data-title="jsp"><pre class="language-jsp"><code>
&lt;!-- 在JSP页面中使用Core标签库，要使用taglib指令，指定引用的标签库 --&gt;
&lt;%@taglib prefix=&quot;c&quot; uri=&quot;http://java.sun.com/jsp/jstl/core&quot; %&gt;

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><p>一般用途的标签有：<code>&lt;c:out&gt;</code>、<code>&lt;c:set&gt;</code>、<code>&lt;c:remove&gt;</code>和<code>&lt;c:catch&gt;</code></p><div class="language-jsp line-numbers-mode" data-ext="jsp" data-title="jsp"><pre class="language-jsp"><code>
&lt;%-- 1. &lt;c:out&gt;: 类似于JSP的表达式&lt;%=expression%&gt;，或者EL表达式\${el-expression} --%&gt;
&lt;c:out value=&quot;hello&quot;&gt;&lt;/c:out&gt;

&lt;%-- 2. &lt;c:set&gt;: 用于设置范围变量（即范围属性）的值或者JavaBean对象的属性 --%&gt;
&lt;c:set var=&quot;width&quot; value=&quot;25&quot; scope=&quot;page&quot; /&gt;
&lt;c:out value=&quot;width: \${width}&quot; /&gt; &lt;br/&gt;

&lt;%-- 3. &lt;c:remove&gt;: 用于移除指定范围的某个变量 --%&gt;
&lt;C:remove var=&quot;width&quot; scope=&quot;page&quot; /&gt;

&lt;%-- 4. &lt;c:catch&gt;用于捕获在其中嵌套的操作所抛出的异常对象，并将异常信息保存到变量中 --%&gt;
&lt;c:catch var=&quot;exception&quot;&gt;
    &lt;%
        int temp = 5/0;
    %&gt;
&lt;/c:catch&gt;
&lt;c:out value=&quot;exception: \${exception}&quot; /&gt;

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><p>条件标签包括<code>&lt;c:if&gt;</code>、<code>&lt;c:choose&gt;</code>、<code>&lt;c:when&gt;</code>和<code>&lt;c:otherwise&gt;</code></p><div class="language-jsp line-numbers-mode" data-ext="jsp" data-title="jsp"><pre class="language-jsp"><code>
&lt;%-- 1. &lt;c:if&gt; 用于实现Java语言中if语句的功能 --%&gt;
&lt;c:if test=&quot;\${3 &gt; 0}&quot;&gt;
    显示: 3&gt;0为true &lt;br/&gt;
&lt;/c:if&gt;

&lt;%-- 2. &lt;c:choose&gt;、&lt;c:when&gt;和&lt;c:otherwise&gt;一起实现互斥条件的执行，类似于Java语言的if/else if/else语句 --%&gt;
&lt;c:set var=&quot;username&quot; value=&quot;admin&quot; scope=&quot;application&quot; /&gt;
&lt;c:choose&gt;
    &lt;c:when test=&quot;\${username == &#39;zhangsan&#39;}&quot;&gt;
        \${username} 是一个普通用户！ &lt;br/&gt;
    &lt;/c:when&gt;
    &lt;c:when test=&quot;\${username == &#39;admin&#39;}&quot;&gt;
        \${username} 是管理员！ &lt;br/&gt;
    &lt;/c:when&gt;
    &lt;c:otherwise&gt;
        \${username} 是一个临时访客！ &lt;br/&gt;
    &lt;/c:otherwise&gt;
&lt;/c:choose&gt;

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><p>迭代标签有<code>&lt;c:forEach&gt;</code>和<code>&lt;c:forTokens&gt;</code></p><div class="language-jsp line-numbers-mode" data-ext="jsp" data-title="jsp"><pre class="language-jsp"><code>
&lt;%-- 1. &lt;c:forEach&gt;用于对包含了多个对象的集合进行迭代 --%&gt;
&lt;c:forEach var=&quot;i&quot; begin=&quot;1&quot; end=&quot;5&quot;&gt;
    Item &lt;c:out value=&quot;\${i}&quot;/&gt;&lt;br/&gt;
&lt;/c:forEach&gt;

&lt;%
    Map&lt;String, Object&gt; map = new HashMap&lt;&gt;();
    map.put(&quot;key1&quot;, &quot;value1&quot;);
    map.put(&quot;key2&quot;, &quot;value2&quot;);
    map.put(&quot;key3&quot;, &quot;value3&quot;);
    request.setAttribute(&quot;testMap&quot;, map);
%&gt;
&lt;c:forEach items=&quot;\${requestScope.testMap}&quot; var=&quot;entry&quot;&gt;
    \${entry} &lt;br/&gt;  &lt;%--  等同于： \${entry.key} = \${entry.value} &lt;br/&gt;  --%&gt;
&lt;/c:forEach&gt;

&lt;%-- 2. &lt;c:forTokens&gt;用于迭代字符串中由分隔符分隔的各成员 --%&gt;
&lt;c:forTokens items=&quot;zhangsan:lisi:wangwu&quot; delims=&quot;:&quot; var=&quot;name&quot;&gt;
    \${name} &lt;br/&gt;
&lt;/c:forTokens&gt;

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><p>超链接、页面的包含和重定向是Web应用中常用的功能，在JSTL中，也提供了相应的标签来完成这些功能，</p><p>这些标签包括<code>&lt;c:import&gt;</code>、<code>&lt;c:url&gt;</code>、<code>&lt;c:redirect&gt;</code>和<code>&lt;c:param&gt;</code></p><ul><li><code>&lt;c:import&gt;</code> 用于导入一个基于URL的资源</li><li><code>&lt;c:url&gt;</code> 使用正确的URL重写规则构造一个URL</li><li><code>&lt;c:param&gt;</code> 为一个URL添加请求参数</li><li><code>&lt;c:redirect&gt;</code> 将客户端的请求重定向到另一个资源</li></ul><div class="language-jsp line-numbers-mode" data-ext="jsp" data-title="jsp"><pre class="language-jsp"><code>
&lt;%-- 1. &lt;c:import&gt;标签类似于 &lt;jsp:include&gt;动作元素 --%&gt;
&lt;c:import url=&quot;demo.jsp&quot;/&gt;

&lt;%-- 2.  &lt;c:url&gt;和&lt;c:param&gt;用于构造一个URL、&lt;c:redirect&gt;遵循和&lt;c:url&gt;同样的重写规则 --%&gt;
&lt;c:url value=&quot;http://localhost:8080/login&quot; var=&quot;loginUrl&quot;&gt;
    &lt;c:param name=&quot;username&quot; value=&quot;admin&quot;/&gt;
    &lt;c:param name=&quot;password&quot; value=&quot;admin&quot;/&gt;
&lt;/c:url&gt;
&lt;a href=&quot;\${loginUrl}&quot; &gt;登录&lt;/a&gt;

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h2 id="_9-jstl其他标签" tabindex="-1"><a class="header-anchor" href="#_9-jstl其他标签"><span>9. JSTL其他标签</span></a></h2><p>格式化标签包括<code>&lt;fmt:timeZone&gt;</code>、<code>&lt;fmt:setTimeZone&gt;</code>、<code>&lt;fmt:formatNumber&gt;</code>、<code>&lt;fmt:parseNumber&gt;</code>、<code>&lt;fmt:formatDate&gt;</code>和<code>&lt;fmt:parseDate&gt;</code></p><div class="language-jsp line-numbers-mode" data-ext="jsp" data-title="jsp"><pre class="language-jsp"><code>
&lt;%-- &lt;fmt:formatDate&gt;标签用于使用不同的方式格式化日期 --%&gt;
&lt;c:set var=&quot;now&quot; value=&quot;&lt;%=new Date() %&gt;&quot;/&gt;
&lt;fmt:formatDate value=&quot;\${now}&quot; type=&quot;both&quot; dateStyle=&quot;long&quot; timeStyle=&quot;long&quot;/&gt;&lt;br/&gt;
&lt;fmt:formatDate value=&quot;\${now}&quot; pattern=&quot;yyyy-MM-dd HH:mm:ss&quot;/&gt; &lt;br/&gt;

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br>`,23);function M(C,$){const n=o("ExternalLinkIcon");return d(),r("div",null,[c,t("ul",null,[t("li",null,[e("官方下载地址："),t("a",u,[e("http://tomcat.apache.org/taglibs/"),s(n)])]),t("li",null,[e("菜鸟下载地址："),t("a",v,[e("jakarta-taglibs-standard-1.1.2.zip"),s(n)])])]),g,t("table",null,[m,t("tbody",null,[t("tr",null,[b,t("td",null,[e('<%@ taglib prefix="c" uri="'),t("a",k,[e("http://java.sun.com/jsp/jstl/core"),s(n)]),e('" %>')]),h]),t("tr",null,[j,t("td",null,[e('<%@ taglib prefix="fmt" uri="'),t("a",q,[e("http://java.sun.com/jsp/jstl/fmt"),s(n)]),e('" %>')]),S]),t("tr",null,[x,t("td",null,[e('<%@ taglib prefix="sql" uri="'),t("a",f,[e("http://java.sun.com/jsp/jstl/sql"),s(n)]),e('" %>')]),y]),t("tr",null,[J,t("td",null,[e('<%@ taglib prefix="x" uri="'),t("a",P,[e("http://java.sun.com/jsp/jstl/xml"),s(n)]),e('" %>')]),_]),t("tr",null,[T,t("td",null,[e('<%@ taglib prefix="fn" uri="'),t("a",L,[e("http://java.sun.com/jsp/jstl/functions"),s(n)]),e('" %>')]),w])])]),E])}const A=i(p,[["render",M],["__file","jsp.html.vue"]]),D=JSON.parse('{"path":"/java/Javaee/jsp.html","title":"Java Server Pages","lang":"en-US","frontmatter":{"order":25,"title":"Java Server Pages","shortTitle":"JSP简介","description":"JSP全名为Java Server Pages，中⽂名叫java服务器⻚⾯，其根本是⼀个简化的Servlet设计 一个JSP页面由元素和模板数据组成。元素是必须由JSP容器处理的部分，而模板数据（HTML）是JSP容器不处理的部分 注释：在JSP页面中，可以使用两种类型的注释 一种是HTML注释，这种注释可以在客户端看到 一种是为JSP页面本身所做的注...","head":[["meta",{"property":"og:url","content":"https://x.app/notebook/java/Javaee/jsp.html"}],["meta",{"property":"og:site_name","content":"Notebook"}],["meta",{"property":"og:title","content":"Java Server Pages"}],["meta",{"property":"og:description","content":"JSP全名为Java Server Pages，中⽂名叫java服务器⻚⾯，其根本是⼀个简化的Servlet设计 一个JSP页面由元素和模板数据组成。元素是必须由JSP容器处理的部分，而模板数据（HTML）是JSP容器不处理的部分 注释：在JSP页面中，可以使用两种类型的注释 一种是HTML注释，这种注释可以在客户端看到 一种是为JSP页面本身所做的注..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-04-15T09:06:58.000Z"}],["meta",{"property":"article:author","content":"Mr.Topple"}],["meta",{"property":"article:modified_time","content":"2024-04-15T09:06:58.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java Server Pages\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-04-15T09:06:58.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Topple\\",\\"url\\":\\"https://www.baidu.com\\"}]}"]]},"headers":[{"level":2,"title":"1. JSP运行机制","slug":"_1-jsp运行机制","link":"#_1-jsp运行机制","children":[]},{"level":2,"title":"2. JSP指令元素","slug":"_2-jsp指令元素","link":"#_2-jsp指令元素","children":[]},{"level":2,"title":"3. JSP脚本元素","slug":"_3-jsp脚本元素","link":"#_3-jsp脚本元素","children":[]},{"level":2,"title":"4. JSP动作元素","slug":"_4-jsp动作元素","link":"#_4-jsp动作元素","children":[]},{"level":2,"title":"5. JSP隐含对象","slug":"_5-jsp隐含对象","link":"#_5-jsp隐含对象","children":[]},{"level":2,"title":"6. EL表达式语言","slug":"_6-el表达式语言","link":"#_6-el表达式语言","children":[]},{"level":2,"title":"7. JSP标准标签库","slug":"_7-jsp标准标签库","link":"#_7-jsp标准标签库","children":[]},{"level":2,"title":"8. JSTL核心标签","slug":"_8-jstl核心标签","link":"#_8-jstl核心标签","children":[]},{"level":2,"title":"9. JSTL其他标签","slug":"_9-jstl其他标签","link":"#_9-jstl其他标签","children":[]}],"git":{"createdTime":1713172018000,"updatedTime":1713172018000,"contributors":[{"name":"Neil","email":"msdrizzle@outlook.com","commits":1}]},"readingTime":{"minutes":11.24,"words":3371},"filePathRelative":"java/Javaee/jsp.md","localizedDate":"April 15, 2024","autoDesc":true}');export{A as comp,D as data};
