import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as c,c as l,b as n,a as t,d as s,e as p}from"./app-CWK6jW3V.js";const i={},u=n("h2",{id:"日期和时间处理",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#日期和时间处理"},[n("span",null,"日期和时间处理")])],-1),r=n("p",null,"在JavaScript中，日期和时间通常通过Date对象来处理。但Date对象本身在格式化等方面使用不方便，通常都会用一些第三方库：",-1),k={href:"https://momentjs.cn/docs/#/-project-status/future/",target:"_blank",rel:"noopener noreferrer"},d=n("code",null,"moment.js",-1),m={href:"https://luxon.nodejs.cn/",target:"_blank",rel:"noopener noreferrer"},v=n("code",null,"Luxon",-1),g={href:"https://day.nodejs.cn/",target:"_blank",rel:"noopener noreferrer"},b=n("code",null,"Day.js",-1),h={href:"https://date-fns.org/",target:"_blank",rel:"noopener noreferrer"},f=n("code",null,"date-fns",-1),y=p(`<h3 id="date常用方法" tabindex="-1"><a class="header-anchor" href="#date常用方法"><span>Date常用方法</span></a></h3><p>在JavaScript中，日期和时间通常通过<code>Date</code>对象来处理。下面是一些使用<code>Date</code>对象处理日期和时间的常用方式：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 获取当前日期和时间</span>
<span class="token keyword">const</span> now <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 创建特定的日期和时间（月份是从0开始计数的，所以1代表2月）</span>
<span class="token keyword">const</span> specificDate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token number">2024</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">58</span><span class="token punctuation">,</span> <span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>获取日期和时间的部分</strong>：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> now <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> year <span class="token operator">=</span> now<span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 获取年份</span>
<span class="token keyword">const</span> month <span class="token operator">=</span> now<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>   <span class="token comment">// 获取月份（月份是从0开始的，所以实际月份需要加1）</span>
<span class="token keyword">const</span> date <span class="token operator">=</span> now<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// 获取日期</span>

<span class="token keyword">const</span> hours <span class="token operator">=</span> now<span class="token punctuation">.</span><span class="token function">getHours</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// 获取小时</span>
<span class="token keyword">const</span> minutes <span class="token operator">=</span> now<span class="token punctuation">.</span><span class="token function">getMinutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 获取分钟</span>
<span class="token keyword">const</span> seconds <span class="token operator">=</span> now<span class="token punctuation">.</span><span class="token function">getSeconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 获取秒</span>

<span class="token keyword">const</span> milliseconds <span class="token operator">=</span> now<span class="token punctuation">.</span><span class="token function">getMilliseconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 获取毫秒</span>

<span class="token keyword">const</span> dayOfWeek <span class="token operator">=</span> now<span class="token punctuation">.</span><span class="token function">getDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment">// 获取星期几 从星期日(0)到星期六(6)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>设置日期和时间的部分</strong>：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> now <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

now<span class="token punctuation">.</span><span class="token function">setFullYear</span><span class="token punctuation">(</span><span class="token number">2025</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// 设置年份</span>
now<span class="token punctuation">.</span><span class="token function">setMonth</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment">// 设置月份（同样，月份是从0开始的）0 表示1月</span>
now<span class="token punctuation">.</span><span class="token function">setDate</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment">// 设置日期</span>

now<span class="token punctuation">.</span><span class="token function">setHours</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 设置小时</span>
now<span class="token punctuation">.</span><span class="token function">setMinutes</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">// 设置分钟</span>
now<span class="token punctuation">.</span><span class="token function">setSeconds</span><span class="token punctuation">(</span><span class="token number">45</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">// 设置秒</span>
now<span class="token punctuation">.</span><span class="token function">setMilliseconds</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 设置毫秒</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="操作时间戳" tabindex="-1"><a class="header-anchor" href="#操作时间戳"><span>操作时间戳</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 获取当前时间的时间戳（以毫秒为单位）</span>
<span class="token keyword">const</span> timestamp <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 也可以从一个Date对象获取时间戳</span>
<span class="token keyword">const</span> now <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> sameTimestamp <span class="token operator">=</span> now<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 和Date.now()的结果一样</span>

<span class="token comment">// 使用Date对象的构造函数将一个时间戳（通常是以毫秒为单位的整数）转换为日期</span>
<span class="token keyword">const</span> timestamp <span class="token operator">=</span> <span class="token number">1673740800000</span><span class="token punctuation">;</span> <span class="token comment">// 这是一个时间戳（毫秒）</span>
<span class="token keyword">const</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>timestamp<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 创建一个新的日期对象，</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>比较日期</strong></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> date1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token number">2024</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> date2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token number">2024</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 日期的比较是通过比较时间戳来实现的</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>date1 <span class="token operator">&lt;</span> date2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;date1 is before date2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;date1 is the same or after date2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="格式化日期和时间" tabindex="-1"><a class="header-anchor" href="#格式化日期和时间"><span>格式化日期和时间</span></a></h3><p><strong>日期的解析和转换</strong></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 将日期字符串解析为日期对象</span>
<span class="token keyword">const</span> dateFromString <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token string">&#39;2024-02-14T11:58:48Z&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 将日期对象转换为字符串</span>
<span class="token keyword">const</span> dateString <span class="token operator">=</span> dateFromString<span class="token punctuation">.</span><span class="token function">toISOString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// toISOString()方法返回的字符串格式为：YYYY-MM-DDTHH:mm:ss.sssZ</span>
<span class="token comment">// T是一个时间分隔符，用于分隔日期和时间部分。  Z 代表UTC时间。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>JavaScript原生的<code>Date</code>对象提供的格式化方法非常有限。你通常需要手动组合相应的日期和时间部分来创建自定义格式。例如：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> now <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> year <span class="token operator">=</span> now<span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> month <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">&#39;0&#39;</span> <span class="token operator">+</span> <span class="token punctuation">(</span>now<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> date <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">&#39;0&#39;</span> <span class="token operator">+</span> now<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> hours <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">&#39;0&#39;</span> <span class="token operator">+</span> now<span class="token punctuation">.</span><span class="token function">getHours</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> minutes <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">&#39;0&#39;</span> <span class="token operator">+</span> now<span class="token punctuation">.</span><span class="token function">getMinutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> seconds <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">&#39;0&#39;</span> <span class="token operator">+</span> now<span class="token punctuation">.</span><span class="token function">getSeconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> formattedDateTime <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>year<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>month<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>date<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>hours<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>minutes<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>seconds<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
<span class="token comment">// 输出格式: &quot;YYYY-MM-DD HH:MM:SS&quot;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>formattedDateTime<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,16),j={href:"https://luxon.nodejs.cn/",target:"_blank",rel:"noopener noreferrer"},x=n("code",null,"Luxon",-1),w=n("code",null,"Day.js",-1),q=n("code",null,"date-fns",-1),S=p(`<h3 id="时区划分与表示" tabindex="-1"><a class="header-anchor" href="#时区划分与表示"><span>时区划分与表示</span></a></h3><p>在互联网中对时间的表示涉及到多种时区。时区是地球表面分割成的标准时间区域，由于地球自转，不同地区的时间有所不同。主要时区包括：</p><ul><li>UTC（协调世界时，前称格林威治标准时间GMT）：作为时间标准，不受夏令时调整影响。</li><li>EST（美国东部标准时间）：UTC - 5小时。</li><li>CST（美国中部标准时间）：UTC - 6小时。</li><li>PST（美国太平洋标准时间）：UTC - 8小时。</li><li>IST（印度标准时间）：UTC + 5小时30分钟。</li><li>CST（中国标准时间）：UTC + 8小时。</li><li>JST（日本标准时间）：UTC + 9小时。</li></ul><h4 id="如何表示时区" tabindex="-1"><a class="header-anchor" href="#如何表示时区"><span>如何表示时区</span></a></h4><p>时区通常在时间后加上相应的缩写。例如，UTC + 8小时表示为<code>2024-02-14T13:58:48+08:00</code>或附上时区名称<code>2024-02-14T13:58:48 CST</code>。</p><h4 id="时间戳与时区" tabindex="-1"><a class="header-anchor" href="#时间戳与时区"><span>时间戳与时区</span></a></h4><p>时间戳表示从1970年1月1日00:00:00 UTC到当前时间的总毫秒数。时间戳是全球统一的，不受时区影响。因此，不同地区在相同时间戳下的本地时间可能不同，但所代表的瞬间是相同的。</p><h4 id="时间戳换算" tabindex="-1"><a class="header-anchor" href="#时间戳换算"><span>时间戳换算</span></a></h4><p>要将时间戳转换为不同时区的时间，你可以使用<code>Date</code>对象和相关的方法来处理。以下是一个将相同时间戳转换为多个时区时间的示例：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> timestamp <span class="token operator">=</span> <span class="token number">1673740800000</span><span class="token punctuation">;</span> <span class="token comment">// 示例时间戳</span>

<span class="token comment">// 创建一个Date对象</span>
<span class="token keyword">const</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>timestamp<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//转换为UTC时间</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;UTC时间: &quot;</span><span class="token punctuation">,</span> date<span class="token punctuation">.</span><span class="token function">toISOString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 转换为不同的时区，并显示其时区信息</span>
<span class="token keyword">function</span> <span class="token function">convertTZ</span><span class="token punctuation">(</span><span class="token parameter">date<span class="token punctuation">,</span> tzString</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> date <span class="token operator">===</span> <span class="token string">&quot;string&quot;</span> <span class="token operator">?</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span> <span class="token operator">:</span> date<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLocaleString</span><span class="token punctuation">(</span><span class="token string">&quot;en-US&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">timeZone</span><span class="token operator">:</span> tzString <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 使用toLocaleString 替代 toString 来显示时区信息</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;美国东部时间(EST): &quot;</span><span class="token punctuation">,</span> <span class="token function">convertTZ</span><span class="token punctuation">(</span>date<span class="token punctuation">,</span> <span class="token string">&quot;America/New_York&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLocaleString</span><span class="token punctuation">(</span><span class="token string">&quot;en-US&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">timeZone</span><span class="token operator">:</span> <span class="token string">&quot;America/New_York&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">timeZoneName</span><span class="token operator">:</span> <span class="token string">&quot;long&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;中国标准时间(CST): &quot;</span><span class="token punctuation">,</span> <span class="token function">convertTZ</span><span class="token punctuation">(</span>date<span class="token punctuation">,</span> <span class="token string">&quot;Asia/Shanghai&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLocaleString</span><span class="token punctuation">(</span><span class="token string">&quot;en-US&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">timeZone</span><span class="token operator">:</span> <span class="token string">&quot;Asia/Shanghai&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">timeZoneName</span><span class="token operator">:</span> <span class="token string">&quot;long&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;日本标准时间(JST): &quot;</span><span class="token punctuation">,</span> <span class="token function">convertTZ</span><span class="token punctuation">(</span>date<span class="token punctuation">,</span> <span class="token string">&quot;Asia/Tokyo&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLocaleString</span><span class="token punctuation">(</span><span class="token string">&quot;en-US&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">timeZone</span><span class="token operator">:</span> <span class="token string">&quot;Asia/Tokyo&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">timeZoneName</span><span class="token operator">:</span> <span class="token string">&quot;long&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个示例中，<code>convertTZ</code>函数接受一个<code>Date</code>对象和时区标识符，然后根据指定的时区返回一个新的<code>Date</code>对象，表示该时区下的时间。</p><h2 id="常用数学运算" tabindex="-1"><a class="header-anchor" href="#常用数学运算"><span>常用数学运算</span></a></h2><h3 id="math常用方法" tabindex="-1"><a class="header-anchor" href="#math常用方法"><span>Math常用方法</span></a></h3><p>在JavaScript中，与数学计算相关的操作大多可以通过内置的<code>Math</code>对象来完成。<code>Math</code>对象提供了一系列的属性和方法用于执行常见的数学任务。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>Math<span class="token punctuation">.</span><span class="token constant">PI</span><span class="token punctuation">;</span> <span class="token comment">// π的值</span>
Math<span class="token punctuation">.</span><span class="token constant">E</span><span class="token punctuation">;</span>  <span class="token comment">// 自然对数的底数e</span>

Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 返回10，绝对值函数</span>
Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 返回8，幂运算，同 2**3</span>
Math<span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 返回4，开平方根</span>
Math<span class="token punctuation">.</span><span class="token function">cbrt</span><span class="token punctuation">(</span><span class="token number">27</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 返回3，开立方根</span>
Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token number">0.9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 返回1，四舍五入</span>
Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 返回1，向上取整</span>
Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token number">0.9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 返回0，向下取整</span>
Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 返回2，最大值</span>
Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 返回1，最小值</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li><p><strong>三角函数</strong></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>Math<span class="token punctuation">.</span><span class="token function">sin</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token constant">PI</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回1，正弦函数</span>
Math<span class="token punctuation">.</span><span class="token function">cos</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token constant">PI</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 返回-1，余弦函数</span>
Math<span class="token punctuation">.</span><span class="token function">tan</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token constant">PI</span> <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回1，正切函数</span>
<span class="token comment">// 反三角函数也可以使用，例如 Math.asin(), Math.acos(), Math.atan()</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>对数函数</strong></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>Math<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token constant">E</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 返回1，自然对数</span>
Math<span class="token punctuation">.</span><span class="token function">log10</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 返回2，以10为底的对数</span>
Math<span class="token punctuation">.</span><span class="token function">log2</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 返回3，以2为底的对数</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="随机数生成" tabindex="-1"><a class="header-anchor" href="#随机数生成"><span>随机数生成</span></a></h3><p>在JavaScript中，生成随机数主要依赖于<code>Math.random()</code>方法，它返回一个0（包含）至1（不包含）之间的伪随机浮点数。可以基于这个方法来创建多种随机数生成函数</p><p>以下是一些生成不同类型随机数的方法和例子：</p><ol><li><p><strong>生成一个基本的随机浮点数</strong></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> random <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 返回 一个 0-1 之间的浮点数</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>random<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">// 例如 0.123456789</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>生成一个随机整数</strong></p><p>假如你想要得到一个从0到<code>max</code> (不包括<code>max</code>)的随机整数，你可以使用下面这种方式：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">getRandomInt</span><span class="token punctuation">(</span><span class="token parameter">max</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>max<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> randomInt <span class="token operator">=</span> <span class="token function">getRandomInt</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>randomInt<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 会输出0到9之间的整数</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>生成指定范围内的随机整数</strong></p><p>如果你需要的是一个在<code>min</code>和<code>max</code>之间的随机整数（包括<code>min</code>且不包括<code>max</code>），你可以通过下面的函数实现：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">getRandomIntInRange</span><span class="token punctuation">(</span><span class="token parameter">min<span class="token punctuation">,</span> max</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  min <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span>min<span class="token punctuation">)</span><span class="token punctuation">;</span>
  max <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>max<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>max <span class="token operator">-</span> min<span class="token punctuation">)</span> <span class="token operator">+</span> min<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> randomIntInRange <span class="token operator">=</span> <span class="token function">getRandomIntInRange</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>randomIntInRange<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出5到9之间的整数</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果你想包含<code>max</code>值，改变函数如下：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">getRandomIntInclusive</span><span class="token punctuation">(</span><span class="token parameter">min<span class="token punctuation">,</span> max</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  min <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span>min<span class="token punctuation">)</span><span class="token punctuation">;</span>
  max <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>max<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>max <span class="token operator">-</span> min <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> min<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> randomIntInclusive <span class="token operator">=</span> <span class="token function">getRandomIntInclusive</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>randomIntInclusive<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出5到10之间的整数</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>生成指定范围的随机浮点数</strong></p><p>要得到一个更加精确的、在<code>min</code>和<code>max</code>之间的随机浮点数，可以如下操作：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">getRandomFloatInRange</span><span class="token punctuation">(</span><span class="token parameter">min<span class="token punctuation">,</span> max</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>max <span class="token operator">-</span> min<span class="token punctuation">)</span> <span class="token operator">+</span> min<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> randomFloatInRange <span class="token operator">=</span> <span class="token function">getRandomFloatInRange</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>randomFloatInRange<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出5到10之间的随机浮点数</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><p>这些方法都是基于<code>Math.random()</code>的，因此它们生成的是伪随机数，对于大多数非安全性要求的应用来说是足够的。但如果你需要密码学上安全的随机数，你应该使用Web Crypto API中的<code>crypto.getRandomValues()</code>方法，它比<code>Math.random()</code>提供更好的随机性。</p><h3 id="准确的小数计算" tabindex="-1"><a class="header-anchor" href="#准确的小数计算"><span>准确的小数计算</span></a></h3><p>JavaScript中的小数计算可能不准确，因为它使用IEEE 754浮点数进行计算，这会导致一些精度问题。例如：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token number">0.1</span> <span class="token operator">+</span> <span class="token number">0.2</span><span class="token punctuation">;</span> <span class="token comment">// 返回0.30000000000000004</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>为了进行精确的小数计算，可以使用以下方法：</p><p><strong>使用整数进行计算</strong><br> 先将小数转换为整数，进行计算后再转回小数。<br><code>javascript (0.1 * 10 + 0.2 * 10) / 10; // 返回0.3 </code></p><p><strong>使用第三方库</strong></p><p>如<code>decimal.js</code>、<code>big.js</code>或者<code>bignumber.js</code>等，这些库专为精确小数计算设计。</p><p>以<code>decimal.js</code>为例，以下是如何在JavaScript中使用它进行精确的数值运算：</p><ol><li><p><strong>首先，你需要安装<code>decimal.js</code></strong>: 如果你使用npm，可以运行：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> decimal.js
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p><strong>基本用法</strong>: 引入<code>decimal.js</code>并创建<code>Decimal</code>实例来进行操作：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 引入Decimal</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Decimal <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;decimal.js&#39;</span><span class="token punctuation">;</span>

<span class="token comment">// 使用Decimal进行计算</span>
<span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Decimal</span><span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">plus</span><span class="token punctuation">(</span><span class="token number">0.2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 加法运算</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：&#39;0.3&#39;</span>

<span class="token keyword">const</span> result2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Decimal</span><span class="token punctuation">(</span><span class="token number">0.7</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">times</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 乘法运算</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result2<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：&#39;2.1&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>链式调用</strong>: <code>decimal.js</code>也支持链式调用来进行复杂的计算：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Decimal</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">plus</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">minus</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">times</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">div</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出计算结果</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>比较和逻辑运算</strong>: 可以使用<code>decimal.js</code>进行比较和逻辑运算：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Decimal</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Decimal</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;a 和 b 相等&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>配置</strong>: <code>decimal.js</code>允许配置全局参数，比如设置全局的小数点精度：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>Decimal<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">precision</span><span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token literal-property property">rounding</span><span class="token operator">:</span> <span class="token number">4</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Decimal</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">div</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 根据设置的精度输出结果</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h2 id="数组和数组高阶函数" tabindex="-1"><a class="header-anchor" href="#数组和数组高阶函数"><span>数组和数组高阶函数</span></a></h2><p>JavaScript中的数组是一种特殊类型的对象，用于存储多个值的集合，这些值可以是任何类型，且不需要类型统一。数组的元素通过索引来访问，索引是从0开始的</p><h3 id="数组的定义和使用" tabindex="-1"><a class="header-anchor" href="#数组的定义和使用"><span>数组的定义和使用</span></a></h3><p>JavaScript中定义数组有多种方式：<br> 数组初始化通常在定义时完成，可以通过静态初始化（直接给出元素值）或动态初始化（指定数组长度）。</p><ol><li><p><strong>字面量定义</strong>：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> array <span class="token operator">=</span> <span class="token punctuation">[</span>element0<span class="token punctuation">,</span> element1<span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">,</span> elementN<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>例如：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> fruits <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;apple&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;banana&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;cherry&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p><strong>构造函数定义</strong>：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>element0<span class="token punctuation">,</span> element1<span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">,</span> elementN<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>或</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>例如：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> numbers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> emptyArray <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 创建一个长度为3的空数组</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><div class="hint-container tip"><p class="hint-container-title">空数组元素的默认值是什么</p><p>在JavaScript中，通过<code>let arr = new Array(3);</code>创建的数组，其元素并不会被初始化为<code>null</code>或<code>undefined</code>。实际上，这个数组的元素会被创建为&quot;空位&quot;（empty slots）。这些空位是特殊的，因为它们实际上并不是数组中的真实元素。</p><p>当你尝试访问一个包含空位的数组元素时，JavaScript会将其视为未定义（<code>undefined</code>），但这并不完全等同于数组元素直接被设置为<code>undefined</code>。</p><p>例如：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: undefined</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>尽管访问这个位置的结果是<code>undefined</code>，但实际上这个位置是一个空位。数组方法和迭代器的行为在遇到空位时会有些差异。例如，<code>map()</code>方法会跳过空位，而不会调用提供的函数。</p><p>一个简单的例子来说明这个差异：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 包含3个空位的数组</span>
<span class="token keyword">let</span> mappedArr <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>mappedArr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: [ &lt;3 empty items&gt; ]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，尽管原数组<code>arr</code>包含3个空位，<code>map()</code>函数并没有被调用，所以映射后的数组<code>mappedArr</code>也包含3个空位，而不是三个<code>1</code>。<br> 如果明确将三个元素设置为<code>undefined</code>，如：<code>let arr = [undefined, undefined, undefined];</code>, 那么输出结果将是<code>[ 1, 1, 1 ]</code></p><p>因此，虽然通过访问获取的结果是<code>undefined</code>，但要清楚<code>new Array(3)</code>创建的数组元素是空位，这与数组元素被直接设置为<code>undefined</code>是有区别的。</p></div><h4 id="数组常用方法" tabindex="-1"><a class="header-anchor" href="#数组常用方法"><span><strong>数组常用方法</strong>：</span></a></h4><ol><li><p><strong>访问和修改元素</strong>：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 访问</span>
array<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> newValue<span class="token punctuation">;</span> <span class="token comment">// 修改</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>获取长度</strong>：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> length <span class="token operator">=</span> array<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p><strong>添加/删除元素</strong>：</p><ul><li><strong>push</strong>: 在数组末尾添加元素<div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>array<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><strong>pop</strong>: 删除并返回数组的最后一个元素<div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> lastElement <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><strong>unshift</strong>: 在数组开头添加元素<div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>array<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><strong>shift</strong>: 删除并返回数组的第一个元素<div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> firstElement <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul></li><li><p><strong>查找元素</strong>：</p><ul><li><strong>indexOf</strong>: 返回元素在数组中的索引，未找到返回-1<div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> index <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>searchElement<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul></li><li><p><strong>排序与反转</strong>：</p><ul><li><strong>sort</strong>: 对数组元素进行排序，默认按字符串Unicode点排序<div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>array<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><strong>reverse</strong>: 反转数组中的元素顺序<div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>array<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul></li></ol><h3 id="遍历数组" tabindex="-1"><a class="header-anchor" href="#遍历数组"><span>遍历数组</span></a></h3><p>在JavaScript中，遍历数组是常见需求。不同的遍历方法适用于不同的场景和需求。下面详细介绍了几种常见方法：</p><p><strong>1. 使用传统的<code>for</code>循环</strong></p><ul><li><strong>特点</strong>: 最基础的遍历方式，可以在任何时候中断循环（使用<code>break</code>或<code>continue</code>）。<div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;Apple&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Banana&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Cherry&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><p><strong>2. 使用<code>forEach</code>方法</strong></p><ul><li><strong>特点</strong>: Array的原生方法，适用于无需中断遍历的场景。不能使用<code>break</code>或<code>continue</code>，也不能从中返回值。<div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;Apple&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Banana&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Cherry&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><p><strong>3. 使用<code>for...of</code>循环</strong></p><ul><li><strong>特点</strong>: 可以直接获取数组的每个元素的值，简洁明了。与<code>for</code>循环一样，可以用<code>break</code>、<code>continue</code>和<code>return</code>。<div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;Apple&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Banana&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Cherry&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> item <span class="token keyword">of</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><p><strong>4. 使用迭代器（<code>Iterator</code>）</strong></p><ul><li><strong>特点</strong>: 使用<code>Symbol.iterator</code>属性，创建一个迭代器对象来访问集合的元素。<div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;Apple&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Banana&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Cherry&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> iterator <span class="token operator">=</span> arr<span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> result <span class="token operator">=</span> iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>result<span class="token punctuation">.</span>done<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
  result <span class="token operator">=</span> iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="数组高阶函数" tabindex="-1"><a class="header-anchor" href="#数组高阶函数"><span>数组高阶函数</span></a></h3><table><thead><tr><th style="text-align:center;">函数名</th><th style="text-align:left;">功能描述</th><th style="text-align:left;">示例</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:center;">map</td><td style="text-align:left;">映射：一一对应，遍历数组的所有元素，并对每一个元素执行指定的操作，返回一个新的数组</td><td style="text-align:left;"><code>const newArr = arr.map(x =&gt; x * 2);</code></td><td style="text-align:left;">对数组中的每个元素进行操作，并生成新的数组返回，原数组不会被改变。</td></tr><tr><td style="text-align:center;">reduce</td><td style="text-align:left;">累积： 每次计算的结果和数组中下一个元素再次计算，最后合并成一个结果返回</td><td style="text-align:left;"><code>const sum = arr.reduce((acc, cur) =&gt; acc + cur, 0);</code></td><td style="text-align:left;">这是一个非常强大的函数，可以将数组中的元素通过特定操作累积成单个输出值，这在聚合、组合或累加值的情况下非常有用。</td></tr><tr><td style="text-align:center;">filter</td><td style="text-align:left;">过滤：创建一个新的数组，新数组所有的元素都符合某种条件</td><td style="text-align:left;"><code>const filteredArr = arr.filter(num =&gt; num &gt; 0);</code></td><td style="text-align:left;">它返回一个新数组，该数组包含通过提供的函数实现的测试的所有元素。这对于筛选出满足条件的元素非常有用。</td></tr></tbody></table><h4 id="_1-map-方法" tabindex="-1"><a class="header-anchor" href="#_1-map-方法"><span>1. <code>map</code> 方法</span></a></h4><ul><li><code>map</code>函数会对数组里每一个元素按照指定的函数进行处理/映射，然后返回一个新的数组。这个过程不会改变原始数组。</li><li>注意<code>map</code>方法总是返回与原数组相同长度的新数组，即使某些元素在映射过程中没被修改或返回<code>undefined</code>。</li><li><strong>使用场景</strong>: 当需要将数组中的每个元素转换成其他值时使用，例如: 数字数组转为字符串数组、计算数组每个元素的平方等。<div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> squares <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">num</span> <span class="token operator">=&gt;</span> num <span class="token operator">*</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>squares<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 [1, 4, 9, 16]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h4 id="_2-reduce-方法" tabindex="-1"><a class="header-anchor" href="#_2-reduce-方法"><span>2. <code>reduce</code> 方法</span></a></h4><ul><li><code>reduce</code> 方法对数组中的每个元素执行一个由你提供的“reducer”函数（升序执行），将其结果汇总为单个返回值。</li><li>调用<code>reduce</code>时可以提供一个初始值作为第二个参数，如果不提供，则数组的第一个元素将作为初始值。如果数组为空且没有提供初始值，会抛出TypeError。</li><li><strong>使用场景</strong>: 对数组中的所有元素进行累加、累乘、连接字符串、将数组转换成对象格式、查找数组中的最大/最小值等场景。<div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> sum <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">acc<span class="token punctuation">,</span> cur</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> acc <span class="token operator">+</span> cur<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 10</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h4 id="_3-filter-方法" tabindex="-1"><a class="header-anchor" href="#_3-filter-方法"><span>3. <code>filter</code> 方法</span></a></h4><ul><li><code>filter</code> 方法创建一个新数组，其包含通过所提供函数实现的测试的所有元素。这个方法不会改变原数组。</li><li><strong>注意事项</strong>: 只有为数组中的每个元素调用的函数返回<code>true</code>时，该元素才会包含在返回的数组中。如果所有元素都返回<code>false</code>，结果就是一个空数组。</li><li><strong>使用场景</strong>: 当需要从原始数组中筛选出符合特定条件的元素时使用，例如过滤掉不满足条件的元素、根据条件筛选对象数组等。<div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> mixedNumbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> positiveNumbers <span class="token operator">=</span> mixedNumbers<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">number</span> <span class="token operator">=&gt;</span> number <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>positiveNumbers<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 [1, 2, 3]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="es6对数组的改进" tabindex="-1"><a class="header-anchor" href="#es6对数组的改进"><span>ES6对数组的改进</span></a></h3><p>ECMAScript 2015（也称为ES6）引入了多项改进和新功能，大大增强了JavaScript处理数组的能力。以下是ES6对数组进行的一些重要改进：</p><h4 id="_1-array-from" tabindex="-1"><a class="header-anchor" href="#_1-array-from"><span>1. <code>Array.from()</code></span></a></h4><p>这个方法可以从类数组或可迭代对象创建一个新的数组实例。</p><ul><li>将类数组对象（如函数的<code>arguments</code>或<code>document.querySelectorAll</code>返回的结果）转换成数组。</li><li>使用场景：与<code>map</code>函数结合，进行元素的转换。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 类数组对象转换为数组</span>
<span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: [1, 2, 3]</span>

<span class="token comment">// 字符串拆分成字符数组</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: [&#39;f&#39;, &#39;o&#39;, &#39;o&#39;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">注意</p><p><code>arguments</code>是JavaScript中的一个预定义的局部变量，它在函数内部自动可用。即使你没有在参数列表中定义它，它也存在于每个函数的作用域中。<code>arguments</code>是一个类数组对象，它包含了调用函数时传递给函数的所有参数。</p><p>这就是为什么在函数<code>f</code>中即使没有定义参数，也能够通过<code>arguments</code>访问到传递进来的参数，并且能够使用<code>Array.from(arguments)</code>将其转换成一个真正的数组。</p><p><code>arguments</code>对象有类似数组的特性，比如<code>length</code>属性，和能通过索引来访问各个元素，但它并不是一个真正的数组，所以它没有数组的方法，比如<code>map</code>、<code>filter</code>或者<code>reduce</code>。因此，如果你想要使用这些数组方法，你首先需要将<code>arguments</code>对象转换为一个真正的数组，这正是<code>Array.from()</code>方法的用武之地。这也是为什么上述<code>f</code>函数能够正常工作并返回一个数组的原因。</p></div><h4 id="_2-array-of" tabindex="-1"><a class="header-anchor" href="#_2-array-of"><span>2. <code>Array.of()</code></span></a></h4><p>这个方法创建一个具有可变数量参数的新数组实例，而不考虑参数的数量或类型。</p><ul><li>使用场景：创建数组时避免<code>new Array()</code>的一些陷阱。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// 输出: [7]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: [1, 2, 3]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">new Array()创建数组的不一致行为</p><p>使用<code>new Array()</code>构造函数创建数组时，主要的陷阱在于<code>new Array()</code>对待传入参数的方式不同，具体取决于参数的数量和类型。</p><h4 id="_1-单个数值参数" tabindex="-1"><a class="header-anchor" href="#_1-单个数值参数"><span>1. 单个数值参数</span></a></h4><p>当你向<code>new Array()</code>传递一个单独的数值参数时，它会创建一个指定长度的数组，而不是包含该数值的数组。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: [ &lt;3 empty items&gt; ]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: 3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，<code>arr</code>是一个长度为3的空数组，而不是包含一个元素3的数组。</p><h4 id="_2-多个参数或非数值单个参数" tabindex="-1"><a class="header-anchor" href="#_2-多个参数或非数值单个参数"><span>2. 多个参数或非数值单个参数</span></a></h4><p>如果传递给<code>new Array()</code>的是非数值的单个参数，或者是多个参数，它则会创建一个包含这些参数的数组。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> arr1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: [3, 2]</span>

<span class="token keyword">let</span> arr2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token string">&#39;3&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: [&#39;3&#39;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在第一个例子中，<code>arr1</code>是一个包含两个元素（3和2）的数组。在第二个例子中，<code>arr2</code>是一个包含单个字符串元素<code>&#39;3&#39;</code>的数组。</p><h4 id="如何避免这些陷阱" tabindex="-1"><a class="header-anchor" href="#如何避免这些陷阱"><span>如何避免这些陷阱</span></a></h4><p>这些不一致的行为可能会导致混乱，特别是对于初学者。为了避免这些陷阱，ECMAScript 2015 (ES6) 引入了<code>Array.of()</code>方法。<code>Array.of()</code>无论参数的数量或类型如何，都会创建一个包含所有传递给它的参数的数组。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> arr <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: [3]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，使用<code>Array.of(3)</code>清晰且明确地创建了一个包含单个元素3的数组。这就避免了使用<code>new Array()</code>时可能出现的混乱。<code>Array.of()</code>提供了一种更直观、更一致的方式来创建数组，无论你希望数组包含什么类型的元素，或者是多少个元素。</p></div><h4 id="_3-find-和-findindex" tabindex="-1"><a class="header-anchor" href="#_3-find-和-findindex"><span>3. <code>find()</code> 和 <code>findIndex()</code></span></a></h4><ul><li><p><code>find()</code>方法返回数组中满足提供函数的第一个元素的值，否则返回<code>undefined</code>。</p></li><li><p><code>findIndex()</code>方法返回数组中满足提供测试函数的第一个元素的索引。不存在，则返回-1。</p></li><li><p>使用场景：在数组中查找元素或元素的索引。</p></li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;Apple&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&quot;fruit&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;Potato&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&quot;vegetable&quot;</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>array<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> item<span class="token punctuation">.</span>name <span class="token operator">===</span> <span class="token string">&quot;Apple&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: {name: &quot;Apple&quot;, type: &quot;fruit&quot;}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>array<span class="token punctuation">.</span><span class="token function">findIndex</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> item<span class="token punctuation">.</span>name <span class="token operator">===</span> <span class="token string">&quot;Potato&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: 1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-扩展运算符-spread-operator" tabindex="-1"><a class="header-anchor" href="#_4-扩展运算符-spread-operator"><span>4. 扩展运算符 (Spread operator) <code>...</code></span></a></h4><p>扩展运算符<code>...</code>允许一个数组表达式或字符串在需要多个参数（函数调用）或多个元素（数组字面量）的地方展开。</p><p><strong>使用场景</strong>：</p><ul><li>合并数组。</li><li>将字符串转换成字符数组。</li><li>在函数调用时使用数组作为参数。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 合并数组</span>
<span class="token keyword">const</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> combinedArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>arr1<span class="token punctuation">,</span> <span class="token operator">...</span>arr2<span class="token punctuation">]</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>combinedArr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: [1, 2, 3, 4, 5, 6]</span>

<span class="token comment">// 函数参数展开</span>
<span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> x <span class="token operator">+</span> y <span class="token operator">+</span> z<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token operator">...</span>numbers<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: 6</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5-array-prototype-includes" tabindex="-1"><a class="header-anchor" href="#_5-array-prototype-includes"><span>5. <code>Array.prototype.includes()</code></span></a></h4><p>这个方法用来判断一个数组是否包含一个指定的值，根据情况，如果包含则返回<code>true</code>，否则返回<code>false</code>。</p><ul><li>使用场景：检查数组中是否包含某个元素。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> pets <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;cat&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;dog&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;bat&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>pets<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">&#39;cat&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出: true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>pets<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">&#39;at&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 输出: false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这些是ES6中对数组的部分改进，它们为开发人员提供了更强大，更灵活的工具来处理数组数据。</p><h2 id="网络请求与数据传输" tabindex="-1"><a class="header-anchor" href="#网络请求与数据传输"><span>网络请求与数据传输</span></a></h2><p>在JavaScript中发起网络请求主要有几种方式：通过原生的AJAX、Fetch API，以及使用第三方库比如axios等。</p><h3 id="ajax" tabindex="-1"><a class="header-anchor" href="#ajax"><span>AJAX</span></a></h3><p>AJAX（Asynchronous JavaScript And XML）是最传统的发送网络请求的方法之一。虽然名字中包含XML，但现在JSON是更常用的数据格式。</p><p><strong>GET请求示例:</strong></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;GET&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;https://api.example.com/data&quot;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
xhr<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token number">4</span> <span class="token operator">&amp;&amp;</span> xhr<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>POST请求示例（带参数）:</strong></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;POST&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;https://api.example.com/data&quot;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
xhr<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token string">&quot;Content-Type&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;application/json;charset=UTF-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
xhr<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token number">4</span> <span class="token operator">&amp;&amp;</span> xhr<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string-property property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;John&quot;</span><span class="token punctuation">,</span> <span class="token string-property property">&quot;age&quot;</span><span class="token operator">:</span> <span class="token number">30</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="fetch-api" tabindex="-1"><a class="header-anchor" href="#fetch-api"><span>Fetch API</span></a></h3><p>Fetch API提供了一个更现代、更强大而且更灵活的方法来进行网络请求。</p><p><strong>GET请求示例:</strong></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&quot;https://api.example.com/data&quot;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">response</span> <span class="token operator">=&gt;</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// 解析响应为JSON</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">data</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">error</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&#39;Error:&#39;</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>POST请求示例（带参数）:</strong></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&quot;https://api.example.com/data&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&quot;POST&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token string-property property">&quot;Content-Type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;application/json&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">body</span><span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string-property property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;John&quot;</span><span class="token punctuation">,</span> <span class="token string-property property">&quot;age&quot;</span><span class="token operator">:</span> <span class="token number">30</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">response</span> <span class="token operator">=&gt;</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">data</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">error</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&#39;Error:&#39;</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="axios" tabindex="-1"><a class="header-anchor" href="#axios"><span>Axios</span></a></h3>`,96),A={href:"https://axios-http.com/",target:"_blank",rel:"noopener noreferrer"},_=p(`<ul><li><p><strong>转换请求和响应数据</strong>：自动将请求数据转换为JSON格式，反之亦然。</p></li><li><p><strong>自动转换JSON数据</strong>：当发送请求或接收响应时，Axios会自动将JSON数据进行序列化和反序列化。</p></li><li><p><strong>客户端支持防御CSRF</strong>：Axios包含了多种安全措施，比如可以配置一个CSRF token以防跨站请求伪造。</p></li><li><p><strong>提供在请求时设置基础URL的能力</strong>：方便进行API调用时不必每次都写完整的URL。</p></li><li><p><strong>超时设置</strong>：你可以指定在放弃请求前需要等待的毫秒数。</p></li><li><p><strong>支持取消请求</strong>：你可以使用cancel token取消进行中的请求。</p></li></ul><p>Axios的小巧体积和简单易用的接口，加上它基于Promise的处理方式，使其成为开发现代web应用的流行选择。</p><p><strong>GET请求示例:</strong></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;https://api.example.com/data&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>POST请求示例（带参数）:</strong></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">&#39;https://api.example.com/data&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;John&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">30</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="json" tabindex="-1"><a class="header-anchor" href="#json"><span>JSON</span></a></h3><p>JSON(JavaScript Object Notation) 是一种轻量级的数据交换格式，易于人阅读和编写，也易于机器解析和生成。</p><p><strong>序列化（Stringify）</strong>：</p><p>将JavaScript对象转换为JSON字符串。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;John&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">30</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> myJSON <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myJSON<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出字符串{&quot;name&quot;:&quot;John&quot;,&quot;age&quot;:30}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>反序列化（Parse）</strong>：</p><p>将JSON字符串转换为JavaScript对象。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> myJSON <span class="token operator">=</span> <span class="token string">&#39;{&quot;name&quot;:&quot;John&quot;, &quot;age&quot;:30}&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>myJSON<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出JavaScript对象{name: &quot;John&quot;, age: 30}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="regex-id" tabindex="-1"><a class="header-anchor" href="#regex-id"><span>Regex正则表达式</span></a></h2><p>JavaScript中的正则表达式（Regular Expressions，简称regex）是一个强大的字符串匹配工具，它使用一种特殊的文本字符串来描述一个搜索模式，可用于字符串搜索、替换、测试等操作。</p><h3 id="regex的创建和使用" tabindex="-1"><a class="header-anchor" href="#regex的创建和使用"><span>Regex的创建和使用</span></a></h3><ol><li><p><strong>创建正则表达式</strong>: 有两种方式可以创建一个正则表达式：</p><ul><li><p>使用字面量语法：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> regex <span class="token operator">=</span> <span class="token operator">/</span>pattern<span class="token operator">/</span>flags<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>使用<code>RegExp</code>构造函数：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> regex <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">&#39;pattern&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;flags&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul></li></ol><div class="hint-container info"><p class="hint-container-title">正则表达式的组成</p><ul><li><strong>模式</strong>：包含了各种字符和元字符（有特殊含义的字符），用于设定匹配规则。</li><li><strong>标志</strong>： <ul><li><code>g</code> (全局搜索)</li><li><code>i</code> (不区分大小写)</li><li><code>m</code> (多行搜索)</li><li><code>u</code> (Unicode模式)</li><li><code>y</code> (粘性搜索)</li><li><code>s</code> (dotAll模式，使<code>.</code>匹配包括换行符在内的所有字符)</li></ul></li></ul></div><ol start="2"><li><p><strong>JS中正则表达式的常用方法</strong>:</p><p>JavaScript的<code>String</code>对象提供了几个可以使用正则表达式的方法，例如：</p><ul><li><code>test()</code>: 测试给定的字符串是否符合正则表达式。</li><li><code>exec()</code>: 在一个指定字符串中执行一个搜索匹配，返回一个结果数组或null。</li><li><code>match()</code>: 返回一个数组，其中包含匹配的结果，如果没有匹配到，则返回null。</li><li><code>search()</code>: 返回正则表达式在字符串中匹配到的位置索引，若未找到匹配则返回-1。</li><li><code>replace()</code>: 替换与正则表达式匹配的子串。</li><li><code>split()</code>: 使用正则表达式或固定字符串分割字符串。</li></ul></li><li><p><strong>示例</strong>: 查找字符串中所有的数字：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> text <span class="token operator">=</span> <span class="token string">&#39;Room 101 or Room 202&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\b\\d+\\b</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span>
<span class="token keyword">const</span> matches <span class="token operator">=</span> text<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>matches<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: [&quot;101&quot;, &quot;202&quot;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="通用regex语法" tabindex="-1"><a class="header-anchor" href="#通用regex语法"><span>通用Regex语法</span></a></h3><ol><li><p><strong>字符类别</strong>:</p><p>在正则表达式中，某些元字符在方括号<code>[]</code>内表现为字符类别，它们匹配特定类型的字符：</p><ul><li><code>[abc]</code>: 匹配<code>a</code>、<code>b</code>或<code>c</code>中的任意一个字符</li><li><code>[^abc]</code>: 匹配任何不是<code>a</code>、<code>b</code>或<code>c</code>的字符</li><li><code>[0-9]</code>: 匹配任意一个数字字符</li><li><code>\\d</code>: 匹配任意一个数字，相当于[0-9]</li><li><code>\\D</code>: 匹配任何非数字的字符，相当于[^0-9]</li><li><code>\\w</code>: 匹配任意一个单词字符（字母、数字或下划线）</li><li><code>\\W</code>: 匹配任意一个非单词字符</li><li><code>\\s</code>: 匹配任意一个空白字符（空格、制表符、换行符等）</li><li><code>\\S</code>: 匹配任意一个非空白字符</li><li><code>.</code>: 匹配任何单个字符，除了换行符（在<code>s</code>标志下也包括换行符）</li></ul></li><li><p><strong>特殊字符</strong>:</p><p>正则表达式中的特殊字符包括：<code>. \\ + * ? ^ $ { } [ ] | ( )</code>等。这些特殊字符如果要作为普通字符匹配，需要使用反斜杠<code>\\</code>进行转义。</p></li><li><p><strong>量词</strong>: 用于指定一个模式可以出现的次数：</p><ul><li><code>*</code>: 匹配0次或多次</li><li><code>+</code>: 匹配1次或多次</li><li><code>?</code>: 匹配0次或1次</li><li><code>{n}</code>: 匹配确切的n次</li><li><code>{n,}</code>: 匹配至少n次</li><li><code>{n,m}</code>: 匹配n到m次</li></ul></li><li><p><strong>分组和引用</strong>:</p><ul><li><code>(abc)</code>: 捕获分组，匹配并捕获括号中的表达式</li><li><code>(?:abc)</code>: 非捕获分组，匹配但不捕获括号中的表达式</li><li><code>\\1</code>, <code>\\2</code>, etc.: 引用之前捕获的分组内容</li></ul></li><li><p><strong>边界匹配器</strong>:</p><ul><li><code>^</code>: 匹配字符串的开始</li><li><code>$</code>: 匹配字符串的结束</li><li><code>\\b</code>: 匹配单词边界</li><li><code>\\B</code>: 匹配非单词边界</li></ul></li></ol>`,22);function M(T,D){const a=o("ExternalLinkIcon");return c(),l("div",null,[u,r,n("ul",null,[n("li",null,[n("a",k,[d,t(a)]),s(" 新项目不再建议使用")]),n("li",null,[n("a",m,[v,t(a)]),s(" ： 由 Moment.js 团队的成员创建，它的 API 设计是对 Moment.js 的一个改进")]),n("li",null,[n("a",g,[b,t(a)]),s(" : 旨在成为 Moment.js 的极简替代品，使用类似的 API")]),n("li",null,[n("a",h,[f,t(a)]),s(": 提供了一系列用于操作 JavaScript Date 对象的函数")])]),y,n("p",null,[s("在现实的应用中，你可能会需要更复杂的日期操作和格式化，这时候可以使用第三方库如"),n("a",j,[x,t(a)]),s(","),w,s("或"),q,s("来简化处理。这些库提供了非常丰富和便潺的日期处理函数。")]),S,n("p",null,[n("a",A,[s("Axios"),t(a)]),s("是一个基于Promise的HTTP客户端，适用于浏览器和Node.js。它允许浏览器和Node.js使用相同代码库进行HTTP通信")]),_])}const N=e(i,[["render",M],["__file","js2.html.vue"]]),R=JSON.parse('{"path":"/web/base/js/js2.html","title":"JavaScript应用","lang":"en-US","frontmatter":{"order":5,"title":"JavaScript应用","description":"日期和时间处理 在JavaScript中，日期和时间通常通过Date对象来处理。但Date对象本身在格式化等方面使用不方便，通常都会用一些第三方库： moment.js 新项目不再建议使用 Luxon ： 由 Moment.js 团队的成员创建，它的 API 设计是对 Moment.js 的一个改进 Day.js : 旨在成为 Moment.js 的极...","head":[["meta",{"property":"og:url","content":"https://x.app/notebook/web/base/js/js2.html"}],["meta",{"property":"og:site_name","content":"Notebook"}],["meta",{"property":"og:title","content":"JavaScript应用"}],["meta",{"property":"og:description","content":"日期和时间处理 在JavaScript中，日期和时间通常通过Date对象来处理。但Date对象本身在格式化等方面使用不方便，通常都会用一些第三方库： moment.js 新项目不再建议使用 Luxon ： 由 Moment.js 团队的成员创建，它的 API 设计是对 Moment.js 的一个改进 Day.js : 旨在成为 Moment.js 的极..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-05-15T17:43:10.000Z"}],["meta",{"property":"article:author","content":"Mr.Topple"}],["meta",{"property":"article:modified_time","content":"2024-05-15T17:43:10.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"JavaScript应用\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-05-15T17:43:10.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Topple\\",\\"url\\":\\"https://www.baidu.com\\"}]}"]]},"headers":[{"level":2,"title":"日期和时间处理","slug":"日期和时间处理","link":"#日期和时间处理","children":[{"level":3,"title":"Date常用方法","slug":"date常用方法","link":"#date常用方法","children":[]},{"level":3,"title":"操作时间戳","slug":"操作时间戳","link":"#操作时间戳","children":[]},{"level":3,"title":"格式化日期和时间","slug":"格式化日期和时间","link":"#格式化日期和时间","children":[]},{"level":3,"title":"时区划分与表示","slug":"时区划分与表示","link":"#时区划分与表示","children":[]}]},{"level":2,"title":"常用数学运算","slug":"常用数学运算","link":"#常用数学运算","children":[{"level":3,"title":"Math常用方法","slug":"math常用方法","link":"#math常用方法","children":[]},{"level":3,"title":"随机数生成","slug":"随机数生成","link":"#随机数生成","children":[]},{"level":3,"title":"准确的小数计算","slug":"准确的小数计算","link":"#准确的小数计算","children":[]}]},{"level":2,"title":"数组和数组高阶函数","slug":"数组和数组高阶函数","link":"#数组和数组高阶函数","children":[{"level":3,"title":"数组的定义和使用","slug":"数组的定义和使用","link":"#数组的定义和使用","children":[]},{"level":3,"title":"遍历数组","slug":"遍历数组","link":"#遍历数组","children":[]},{"level":3,"title":"数组高阶函数","slug":"数组高阶函数","link":"#数组高阶函数","children":[]},{"level":3,"title":"ES6对数组的改进","slug":"es6对数组的改进","link":"#es6对数组的改进","children":[]}]},{"level":2,"title":"网络请求与数据传输","slug":"网络请求与数据传输","link":"#网络请求与数据传输","children":[{"level":3,"title":"AJAX","slug":"ajax","link":"#ajax","children":[]},{"level":3,"title":"Fetch API","slug":"fetch-api","link":"#fetch-api","children":[]},{"level":3,"title":"Axios","slug":"axios","link":"#axios","children":[]},{"level":3,"title":"JSON","slug":"json","link":"#json","children":[]}]},{"level":2,"title":"Regex正则表达式","slug":"regex-id","link":"#regex-id","children":[{"level":3,"title":"Regex的创建和使用","slug":"regex的创建和使用","link":"#regex的创建和使用","children":[]},{"level":3,"title":"通用Regex语法","slug":"通用regex语法","link":"#通用regex语法","children":[]}]}],"git":{"createdTime":1715794990000,"updatedTime":1715794990000,"contributors":[{"name":"Neil","email":"msdrizzle@outlook.com","commits":1}]},"readingTime":{"minutes":24.09,"words":7228},"filePathRelative":"web/base/js/js2.md","localizedDate":"May 15, 2024","autoDesc":true}');export{N as comp,R as data};
