import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,o as l,b as i}from"./app-BzfVS64I.js";const t="/notebook/assets/image-20220215135414096-BEaE3iTy.png",n={},r=i('<p>Java虚拟机（JVM）是运行Java字节码的虚拟计算机。它的设计目标是提供一种跨平台的执行环境，使得Java程序“一次编写，到处运行”。</p><p>Java Virtual Machine，JAVA程序的<strong>运行环境</strong>（JAVA二进制字节码的运行环境）</p><ul><li>一次编写，到处运行</li><li>自动内存管理，垃圾回收机制</li><li>数组下标越界检查</li></ul><div class="hint-container info"><p class="hint-container-title">jdk、jre和jvm</p><ul><li><p><strong>JDK (Java Development Kits)</strong> -- Java 开发工具集</p><p>JDK 是整个 JAVA 的核心，包括了 Java 运行环 境（Java Runtime Environment），一堆 Java 工具（javac/java/jdb 等）和 Java 基的类库（即 Java API 包括 rt.jar），它不提供具体的开发软件，它提供的是无论你用何种开发软件写 Java 程序都必须用到的类库和 Java 语言规范。</p></li><li><p><strong>JRE (Java Runtime Environment)</strong> --Java 运行时环境</p></li><li><p><strong>JVM （Java Virtual Machine）</strong>-- Java虚拟机</p><p>JVM 可以理解成一个可运行 Java 字节码的虚拟计算机系统， 它有一个解释器组件，可以实现 Java 字节码和计算机操作系统之间的通信 ，对于不同的运行平台，有不同 的 JVM，JVM 屏蔽了底层运行平台的差别，实现了“一次编译，随处运行”。</p></li></ul></div><figure><img src="'+t+'" alt="JVM" tabindex="0" loading="lazy"><figcaption>JVM</figcaption></figure><p>值得注意的是：Java 虚拟机不和包括Java 在内的任何语言绑定，它只与“Class 文件”这种特定的二进制文件格式所关联。<br> 无论使用何种语言进行软件开发，只要能将源文件编译为正确的Class文件，那么这种语言就可以在Java虚拟机上执行。可以说，统一而强大的Class文件结构，就是Java虚拟机的基石、桥梁。</p><p>JVM体系结构主要包括以下核心组件：</p><div class="hint-container tip"><p class="hint-container-title">JVM体系结构</p><ol><li><strong>类加载器子系统</strong>：负责查找并加载类文件的二进制数据，转换为JVM可以理解的内部表示形式。</li><li><strong>运行时数据区</strong>：包括方法区、堆、Java虚拟机栈、本地方法栈、程序计数器等，用于存储程序运行时的数据和控制信息。</li><li><strong>执行引擎</strong>：负责解释或编译字节码至机器码，并执行这些代码。</li><li><strong>本地接口</strong>：允许Java代码调用本地方法库，实现与操作系统交互的能力。</li><li><strong>垃圾收集器</strong>：自动管理内存的分配和回收，主要针对堆区。</li></ol></div><h4 id="jvm执行引擎工作原理" tabindex="-1"><a class="header-anchor" href="#jvm执行引擎工作原理"><span>JVM执行引擎工作原理</span></a></h4><p>JVM执行引擎是JVM的核心组件之一，负责将字节码转换为机器码并执行。其工作流程大致可以分为三个阶段：</p><ol><li><strong>加载与验证</strong>：类加载器加载类文件后，执行引擎会对字节码进行验证，确保其符合JVM规范。</li><li><strong>准备与解析</strong>：为类变量分配内存并初始化为默认值，同时解析符号引用转为直接引用。</li><li><strong>执行</strong>：这是执行引擎的核心步骤，可以通过两种方式执行字节码： <ul><li><strong>解释执行</strong>：逐条解释字节码指令，每遇到一条指令就解释并执行。</li><li><strong>即时编译（JIT）</strong>：将频繁执行的热点代码编译成本地机器码，以提高执行效率。</li></ul></li></ol><h4 id="字节码与字节码解释器" tabindex="-1"><a class="header-anchor" href="#字节码与字节码解释器"><span>字节码与字节码解释器</span></a></h4><ul><li><strong>字节码</strong>：Java源代码被编译成一种中间格式——字节码（.class文件），它是平台无关的，便于跨平台运行。</li><li><strong>字节码解释器</strong>：JVM的一部分，用于读取字节码并逐条转换为对应平台的机器指令执行。这一过程降低了执行速度，但带来了高度的平台兼容性。</li></ul><h4 id="just-in-time-jit-编译与热点代码识别" tabindex="-1"><a class="header-anchor" href="#just-in-time-jit-编译与热点代码识别"><span>Just-In-Time (JIT) 编译与热点代码识别</span></a></h4><ul><li><strong>Just-In-Time (JIT) 编译</strong>：JVM监测并识别出经常被执行的“热点”代码区域，将其从字节码转换为高度优化的本地机器码。这种动态编译技术显著提升了程序的运行效率。</li><li><strong>热点代码识别</strong>：JVM通过统计方法的调用频率和循环执行次数来确定哪些代码是热点。一旦某段代码被标识为热点，JIT编译器就会介入，将其编译为本地代码，并缓存起来供后续直接使用。这一步骤是自动进行的，无需开发者干预。</li></ul><p>综上所述，JVM的体系结构和执行引擎设计确保了Java程序的跨平台运行能力、安全性以及高性能，通过字节码解释和JIT编译的结合，实现了执行效率与灵活性的平衡。</p><p>Oracle所给的相关规范：<a href="https://docs.oracle.com/javase/specs/index.html" target="_blank" rel="noopener noreferrer">https://docs.oracle.com/javase/specs/index.html</a></p><p><a href="https://docs.oracle.com/javase/specs/" target="_blank" rel="noopener noreferrer">Java SE Specifications</a></p><p>HTML：<a href="https://docs.oracle.com/javase/specs/jvms/se8/html/index.html" target="_blank" rel="noopener noreferrer">The Java® Virtual Machine Specification</a></p><p>PDF：<a href="https://docs.oracle.com/javase/specs/jvms/se8/jvms8.pdf" target="_blank" rel="noopener noreferrer">https://docs.oracle.com/javase/specs/jvms/se8/jvms8.pdf</a></p><h3 id="_1-jvm架构与基础" tabindex="-1"><a class="header-anchor" href="#_1-jvm架构与基础"><span>1. JVM架构与基础</span></a></h3><ul><li>JVM体系结构概览</li><li>JVM执行引擎工作原理</li><li>字节码与字节码解释器</li><li>Just-In-Time (JIT) 编译与热点代码识别</li></ul><h3 id="_2-类加载机制" tabindex="-1"><a class="header-anchor" href="#_2-类加载机制"><span>2. 类加载机制</span></a></h3><ul><li>类加载过程深入</li><li>双亲委派模型</li><li>类加载器分类与自定义类加载器</li><li>类加载器缓存机制</li></ul><h3 id="_3-内存管理与垃圾回收" tabindex="-1"><a class="header-anchor" href="#_3-内存管理与垃圾回收"><span>3. 内存管理与垃圾回收</span></a></h3><ul><li>内存区域详细划分与功能</li><li>对象生命周期与分配策略</li><li>垃圾回收算法详解（包括但不限于上述提到的）</li><li>垃圾收集器介绍与选择（Serial, Parallel, CMS, G1, ZGC, Shenandoah等）</li><li>GC调优实践与监控工具（JVisualVM, JConsole, GC日志分析）</li></ul><h3 id="_4-内存泄漏与性能优化" tabindex="-1"><a class="header-anchor" href="#_4-内存泄漏与性能优化"><span>4. 内存泄漏与性能优化</span></a></h3><ul><li>内存泄漏的识别与避免</li><li>性能监控与分析工具</li><li>堆栈溢出分析与解决</li><li>线程与锁的性能影响</li><li>JVM性能调优策略</li></ul><h3 id="_5-并发与多线程" tabindex="-1"><a class="header-anchor" href="#_5-并发与多线程"><span>5. 并发与多线程</span></a></h3><ul><li>Java内存模型（JMM）</li><li>synchronized与volatile关键字</li><li>Locks与原子类</li><li>线程池与Executor框架</li><li>并发容器与工具类</li></ul><h3 id="_6-虚拟机字节码与指令集" tabindex="-1"><a class="header-anchor" href="#_6-虚拟机字节码与指令集"><span>6. 虚拟机字节码与指令集</span></a></h3><ul><li>Java字节码结构</li><li>常见字节码指令分析</li><li>字节码操作与ASM库使用</li></ul><h3 id="_7-方法区与元数据管理" tabindex="-1"><a class="header-anchor" href="#_7-方法区与元数据管理"><span>7. 方法区与元数据管理</span></a></h3><ul><li>运行时常量池细节</li><li>类元数据存储与访问</li><li>PermGen与Metaspace区别</li></ul><h3 id="_8-安全性与防护机制" tabindex="-1"><a class="header-anchor" href="#_8-安全性与防护机制"><span>8. 安全性与防护机制</span></a></h3><ul><li>类加载的安全策略</li><li>代码审计与沙箱机制</li><li>安全管理器与权限控制</li></ul><h3 id="_9-高级特性与实践" tabindex="-1"><a class="header-anchor" href="#_9-高级特性与实践"><span>9. 高级特性与实践</span></a></h3><ul><li>字符串常量池与 intern() 方法</li><li>类型擦除与泛型实现</li><li>Lambda表达式与 invokedynamic 指令</li><li>AOT编译（ Ahead-of-Time）与 GraalVM</li></ul><h3 id="_10-实战与案例分析" tabindex="-1"><a class="header-anchor" href="#_10-实战与案例分析"><span>10. 实战与案例分析</span></a></h3><ul><li>应用部署与JVM配置实战</li><li>真实场景下的性能瓶颈分析</li><li>OpenJDK源码阅读指导</li><li>第三方JVM与替代实现（如OpenJ9）</li></ul>',40),s=[r];function o(p,c){return l(),e("div",null,s)}const J=a(n,[["render",o],["__file","index.html.vue"]]),v=JSON.parse('{"path":"/java/senior/jvm/","title":"Java虚拟机","lang":"en-US","frontmatter":{"dir":{"order":10},"index":false,"title":"Java虚拟机","description":"Java虚拟机（JVM）是运行Java字节码的虚拟计算机。它的设计目标是提供一种跨平台的执行环境，使得Java程序“一次编写，到处运行”。 Java Virtual Machine，JAVA程序的运行环境（JAVA二进制字节码的运行环境） 一次编写，到处运行 自动内存管理，垃圾回收机制 数组下标越界检查 jdk、jre和jvm JDK (Java De...","head":[["meta",{"property":"og:url","content":"https://x.app/notebook/java/senior/jvm/"}],["meta",{"property":"og:site_name","content":"Notebook"}],["meta",{"property":"og:title","content":"Java虚拟机"}],["meta",{"property":"og:description","content":"Java虚拟机（JVM）是运行Java字节码的虚拟计算机。它的设计目标是提供一种跨平台的执行环境，使得Java程序“一次编写，到处运行”。 Java Virtual Machine，JAVA程序的运行环境（JAVA二进制字节码的运行环境） 一次编写，到处运行 自动内存管理，垃圾回收机制 数组下标越界检查 jdk、jre和jvm JDK (Java De..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-07-02T13:54:19.000Z"}],["meta",{"property":"article:author","content":"Mr.Topple"}],["meta",{"property":"article:modified_time","content":"2024-07-02T13:54:19.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java虚拟机\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-07-02T13:54:19.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Topple\\",\\"url\\":\\"https://www.baidu.com\\"}]}"]]},"headers":[{"level":3,"title":"1. JVM架构与基础","slug":"_1-jvm架构与基础","link":"#_1-jvm架构与基础","children":[]},{"level":3,"title":"2. 类加载机制","slug":"_2-类加载机制","link":"#_2-类加载机制","children":[]},{"level":3,"title":"3. 内存管理与垃圾回收","slug":"_3-内存管理与垃圾回收","link":"#_3-内存管理与垃圾回收","children":[]},{"level":3,"title":"4. 内存泄漏与性能优化","slug":"_4-内存泄漏与性能优化","link":"#_4-内存泄漏与性能优化","children":[]},{"level":3,"title":"5. 并发与多线程","slug":"_5-并发与多线程","link":"#_5-并发与多线程","children":[]},{"level":3,"title":"6. 虚拟机字节码与指令集","slug":"_6-虚拟机字节码与指令集","link":"#_6-虚拟机字节码与指令集","children":[]},{"level":3,"title":"7. 方法区与元数据管理","slug":"_7-方法区与元数据管理","link":"#_7-方法区与元数据管理","children":[]},{"level":3,"title":"8. 安全性与防护机制","slug":"_8-安全性与防护机制","link":"#_8-安全性与防护机制","children":[]},{"level":3,"title":"9. 高级特性与实践","slug":"_9-高级特性与实践","link":"#_9-高级特性与实践","children":[]},{"level":3,"title":"10. 实战与案例分析","slug":"_10-实战与案例分析","link":"#_10-实战与案例分析","children":[]}],"git":{"createdTime":1713172018000,"updatedTime":1719928459000,"contributors":[{"name":"Neil","email":"msdrizzle@outlook.com","commits":3}]},"readingTime":{"minutes":5.53,"words":1660},"filePathRelative":"java/senior/jvm/README.md","localizedDate":"April 15, 2024","autoDesc":true}');export{J as comp,v as data};
