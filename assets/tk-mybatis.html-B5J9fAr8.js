import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as c,c as l,a as n,b as a,d as e,e as t}from"./app-D_MzZNfF.js";const i={},u=n("h1",{id:"tk-mybatis",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#tk-mybatis"},[n("span",null,"tk-mybatis")])],-1),r=n("h2",{id:"一-配置tk-mybatis环境",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#一-配置tk-mybatis环境"},[n("span",null,"一 配置tk-mybatis环境")])],-1),d={href:"https://github.com/abel533/Mapper",target:"_blank",rel:"noopener noreferrer"},k=t(`<h3 id="_1-配置mybatis环境" tabindex="-1"><a class="header-anchor" href="#_1-配置mybatis环境"><span>1. 配置mybatis环境</span></a></h3><p>tk-mybatis是基于mybatis实现的，所以需要先配置好mybatis的环境和mysql驱动</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>5.1.47<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.mybatis.spring.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mybatis-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.2.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>配置：数据源与mapper映射文件位置</p></blockquote><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>
    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.cj.jdbc.Driver
    <span class="token key atrule">username</span><span class="token punctuation">:</span> root
    <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">123456</span>
    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3306/tk_mybatis<span class="token punctuation">?</span>serverTimezone=UTC<span class="token important">&amp;characterEncoding=utf-</span><span class="token number">8</span>

<span class="token key atrule">mybatis</span><span class="token punctuation">:</span>
  <span class="token key atrule">mapper-locations</span><span class="token punctuation">:</span> classpath<span class="token punctuation">:</span>cn/itdrizzle/mapper/<span class="token important">*Mapper.xml</span>
  <span class="token key atrule">type-aliases-package</span><span class="token punctuation">:</span> cn.itdrizzle.pojo
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h3 id="_2-tk-mybatis集成" tabindex="-1"><a class="header-anchor" href="#_2-tk-mybatis集成"><span>2. tk-mybatis集成</span></a></h3><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>tk.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mapper-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.1.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最新版本号如上所示，你也可以从下面地址查看：</p>`,9),m={href:"http://mvnrepository.com/artifact/tk.mybatis/mapper-spring-boot-starter",target:"_blank",rel:"noopener noreferrer"},v=t(`<blockquote><p><strong>注意：引入该 starter 时，和 MyBatis 官方的 starter 没有冲突，但是官方的自动配置不会生效！</strong></p></blockquote><p>如果你需要对通用 Mapper 进行配置，你可以在 Spring Boot 的配置文件中配置 <code>mapper.</code> 前缀的配置。</p><p>例如在 yml 格式中配置：</p><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">mapper</span><span class="token punctuation">:</span>
  <span class="token key atrule">mappers</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> tk.mybatis.mapper.common.Mapper
    <span class="token punctuation">-</span> tk.mybatis.mapper.common.Mapper2
  <span class="token key atrule">notEmpty</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 properties 配置中：</p><div class="language-properties line-numbers-mode" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="token key attr-name">mapper.mappers</span><span class="token punctuation">=</span><span class="token value attr-value">tk.mybatis.mapper.common.Mapper,tk.mybatis.mapper.common.Mapper2</span>
<span class="token key attr-name">mapper.notEmpty</span><span class="token punctuation">=</span><span class="token value attr-value">true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><br><h3 id="_3-注解-mapperscan" tabindex="-1"><a class="header-anchor" href="#_3-注解-mapperscan"><span>3. 注解@MapperScan</span></a></h3><p>你可以给带有 <code>@Configuration</code> 的类配置该注解，或者直接配置到 Spring Boot 的启动类上，如下：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>
<span class="token annotation punctuation">@tk.mybatis.spring.annotation.MapperScan</span><span class="token punctuation">(</span>basePackages <span class="token operator">=</span> <span class="token string">&quot;扫描包&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SampleMapperApplication</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">SampleMapperApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意：这里使用的 <code>tk.mybatis.spring.annotation.MapperScan</code> !</strong></p><p><strong>Spring Boot 中注解注意事项</strong>：</p><p><strong>如果你使用了 <code>@tk.xxx.MapperScan</code> 注解（包名必填）</strong>，通用 Mapper 就会自动处理所有通用方法。</p><p><strong>如果不使用该注解</strong>，你没有别的办法设置包名，所以通用 Mapper 就无法判断哪些接口属于 DAO 层，因此你需要给所有的 Mapper 接口<strong>增加 <code>@org.xxx.Mapper</code> 注解</strong>，否则 MyBatis 就扫描不到任何接口</p><br><h2 id="二-orm对象关系映射" tabindex="-1"><a class="header-anchor" href="#二-orm对象关系映射"><span>二 ORM对象关系映射</span></a></h2><h3 id="_1-通用mapper快速入门" tabindex="-1"><a class="header-anchor" href="#_1-通用mapper快速入门"><span>1. 通用Mapper快速入门</span></a></h3><p>数据库（MySql ）准备如下表：</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">\`</span>country<span class="token punctuation">\`</span></span> <span class="token punctuation">(</span>
  <span class="token identifier"><span class="token punctuation">\`</span>id<span class="token punctuation">\`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;主键&#39;</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">\`</span>countryname<span class="token punctuation">\`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;名称&#39;</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">\`</span>countrycode<span class="token punctuation">\`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;代码&#39;</span><span class="token punctuation">,</span>
  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">\`</span>Id<span class="token punctuation">\`</span></span><span class="token punctuation">)</span>
<span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token operator">=</span><span class="token number">10011</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8mb4 <span class="token keyword">COMMENT</span><span class="token operator">=</span><span class="token string">&#39;国家信息&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><p>对应的 Java 实体类如下：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Country</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Id</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span>  countryname<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span>  countrycode<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最简单的情况下，只需要一个 <code>@Id</code> 标记字段为主键即可。数据库中的字段名和实体类的字段名是完全相同的情况下，实体类和表可以直接映射。</p><p><strong>提醒：如果实体类中没有一个标记 <code>@Id</code> 的字段，当你使用带有 <code>ByPrimaryKey</code> 的方法时，所有的字段会作为联合主键来使用，也就会出现类似 <code>where id = ? and countryname = ? and countrycode = ?</code> 的情况</strong> 。</p><br><h4 id="通用mapper接口" tabindex="-1"><a class="header-anchor" href="#通用mapper接口"><span>通用Mapper接口</span></a></h4><p><strong>通用 Mapper 提供了大量的通用接口，这里以最常用的 Mapper 接口为例</strong> ，如下：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">tk<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>mapper<span class="token punctuation">.</span>common<span class="token punctuation">.</span></span><span class="token class-name">Mapper</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">CountryMapper</span> <span class="token keyword">extends</span> <span class="token class-name">Mapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Country</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>只要配置 MyBatis 时能注册或者扫描到该接口，该接口提供的方法就都可以使用。</p></blockquote><p>该接口默认继承的方法如下：</p><ul><li><em>selectOne</em></li><li><em>select</em></li><li><em>selectAll</em></li><li><em>selectCount</em></li><li><em>selectByPrimaryKey</em></li><li><em>方法太多，省略其他...</em></li></ul><br><p>从 MyBatis 或者 Spring 中获取该接口后就可以直接使用：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootTest</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CountryMapperTest</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token class-name">CountryMapper</span> countryMapper<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testInsertCountry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">Country</span> country <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Country</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        country<span class="token punctuation">.</span><span class="token function">setCountrycode</span><span class="token punctuation">(</span><span class="token string">&quot;10088&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        country<span class="token punctuation">.</span><span class="token function">setCountryname</span><span class="token punctuation">(</span><span class="token string">&quot;China&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        countryMapper<span class="token punctuation">.</span><span class="token function">insertSelective</span><span class="token punctuation">(</span>country<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>country<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSelectAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Country</span><span class="token punctuation">&gt;</span></span> countryList <span class="token operator">=</span> countryMapper<span class="token punctuation">.</span><span class="token function">selectAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>countryList<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h4 id="自定义sql查询" tabindex="-1"><a class="header-anchor" href="#自定义sql查询"><span>自定义SQL查询</span></a></h4><p><strong>如果想要增加自己写的方法，可以直接在 <code>CountryMapper</code> 中增加，跟以前直接使用mybatis一样</strong>。</p><p><strong>1. 使用纯接口注解方式时</strong></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span></span><span class="token class-name">Select</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">tk<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>mapper<span class="token punctuation">.</span>common<span class="token punctuation">.</span></span><span class="token class-name">Mapper</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">CountryMapper</span> <span class="token keyword">extends</span> <span class="token class-name">Mapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Country</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">&quot;select * from country where countryname = #{countryname}&quot;</span><span class="token punctuation">)</span>
    <span class="token class-name">Country</span> <span class="token function">selectByCountryName</span><span class="token punctuation">(</span><span class="token class-name">String</span> countryname<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>这里只是举了个简单的例子，可以是很复杂的查询。</p></blockquote><p><strong>2. 如果使用 XML 方式，需要提供接口对应的 XML 文件</strong></p><p>例如提供了 <code>CountryMapper.xml</code> 文件，内容如下：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">mapper</span>
        <span class="token name">PUBLIC</span> <span class="token string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span>
        <span class="token string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>tk.mybatis.sample.mapper.CountryMapper<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>selectByCountryName<span class="token punctuation">&quot;</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>tk.mybatis.model.Country<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        select * from country where countryname = #{countryname}
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在接口中添加对应的方法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">tk<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>mapper<span class="token punctuation">.</span>common<span class="token punctuation">.</span></span><span class="token class-name">Mapper</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">CountryMapper</span> <span class="token keyword">extends</span> <span class="token class-name">Mapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Country</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token class-name">Country</span> <span class="token function">selectByCountryName</span><span class="token punctuation">(</span><span class="token class-name">String</span> countryname<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在接口中添加其他方法的时候和只用 MyBatis 是完全一样的，<strong>但是需要注意，在对应的 XML 中，不能出现和继承接口中同名的方法</strong> ！</p><br><h3 id="_2-数据库与实体类映射" tabindex="-1"><a class="header-anchor" href="#_2-数据库与实体类映射"><span>2. 数据库与实体类映射</span></a></h3><p><strong>通用 Mapper 中，默认情况下是将实体类字段按照驼峰转下划线形式的表名列名进行转换。</strong></p><blockquote><p>例如</p><p>实体类的 <code>userName</code> 可以映射到表的 <code>user_name</code> 上。</p><p>如果想要修改默认的转换方式，可以修改 <code>style</code> 全局配置。</p></blockquote><p>数据库映射主要涉及到一些注解和全局配置，通用 Mapper 默认使用了几个简单的注解，其他 JPA 的注解默认并不支持.</p><p>但是如果你开发自己的通用方法，你可以使用 JPA 注解或者引入自己的注解。</p><br><h4 id="namestyle注解" tabindex="-1"><a class="header-anchor" href="#namestyle注解"><span>@NameStyle注解</span></a></h4><p>这个注解可以在类上进行配置，优先级高于对应的 <code>style</code> 全局配置。注解支持以下几个选项：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>normal<span class="token punctuation">,</span>                     <span class="token comment">//原值</span>
camelhump<span class="token punctuation">,</span>                  <span class="token comment">//驼峰转下划线</span>
uppercase<span class="token punctuation">,</span>                  <span class="token comment">//转换为大写</span>
lowercase<span class="token punctuation">,</span>                  <span class="token comment">//转换为小写</span>
camelhumpAndUppercase<span class="token punctuation">,</span>      <span class="token comment">//驼峰转下划线大写形式</span>
camelhumpAndLowercase<span class="token punctuation">,</span>      <span class="token comment">//驼峰转下划线小写形式</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用时，直接在类上配置即可，例如：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@NameStyle</span><span class="token punctuation">(</span><span class="token class-name">Style</span><span class="token punctuation">.</span>camelhumpAndUppercase<span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Country</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>配置该注解后，对该类和其中的字段进行转换时，会将形如 <code>userName</code> 的字段转换为表中的 <code>USER_NAME</code> 字段。</p><br><h4 id="table和-column" tabindex="-1"><a class="header-anchor" href="#table和-column"><span>@Table和@Column</span></a></h4><p><code>@Table</code> 注解可以配置 <code>name</code>,<code>catalog</code> 和 <code>schema</code> 三个属性，配置 <code>name</code> 属性后，直接使用提供的表名，不再根据实体类名进行转换。其他两个属性中，同时配置时，<code>catalog</code> 优先级高于 <code>schema</code>，也就是只有 <code>catalog</code> 会生效。</p><p>配置示例如下：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Table</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;sys_user&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>将 <code>User</code> 实体映射到 <code>sys_user</code> 表。</p><br><p><code>@Column</code> 注解支持 <code>name</code>, <code>insertable</code> 和 <code>updateable</code> 三个属性。</p><p><code>name</code> 配置映射的列名。</p><p><code>insertable</code> 对提供的 <code>insert</code> 方法有效，如果设置 <code>false</code> 就不会出现在 SQL 中。</p><p><code>updateable</code> 对提供的 <code>update</code> 方法有效，设置为 <code>false</code> 后不会出现在 SQL 中。</p><p>配置示例如：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;user_name&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>除了直接映射 <code>name</code> 到 <code>user_name</code> 这种用法外，在使用关键字的情况，还会有下面的用法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;\`order\`&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">private</span> <span class="token class-name">String</span> order<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>对于关键字这种情况，通用 Mapper 支持自动转换，可以查看后续配置文档中的 <strong>wrapKeyword</strong> 配置。</p><br><p><code>@ColumnType</code> 注解（Mapper）：</p><p>这个注解提供的 <code>column</code>属性和 <code>@Column</code> 中的 <code>name</code> 作用相同。但是 <code>@Column</code> 的优先级更高。</p><p>除了 <code>name</code> 属性外，这个注解主要提供了 <code>jdbcType</code> 属性和 <code>typeHandler</code> 属性。</p><p><code>jdbcType</code> 用于设置特殊数据库类型时指定数据库中的 <code>jdbcType</code>。</p><p><code>typeHandler</code> 用于设置特殊类型处理器，常见的是枚举。</p><p>用法示例如下：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@ColumnType</span><span class="token punctuation">(</span>
        column <span class="token operator">=</span> <span class="token string">&quot;countryname&quot;</span><span class="token punctuation">,</span>
        jdbcType <span class="token operator">=</span> <span class="token class-name">JdbcType</span><span class="token punctuation">.</span><span class="token constant">VARCHAR</span><span class="token punctuation">,</span>
        typeHandler <span class="token operator">=</span> <span class="token class-name">StringTypeHandler</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">private</span> <span class="token class-name">String</span>  countryname<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h4 id="transient注解" tabindex="-1"><a class="header-anchor" href="#transient注解"><span>@Transient注解</span></a></h4><p>一般情况下，实体中的字段和数据库表中的字段是一一对应的，但是也有很多情况我们会在实体中增加一些额外的属性，这种情况下，就需要使用 <code>@Transient</code> 注解来告诉通用 Mapper 这不是表中的字段。</p><p>默认情况下，只有简单类型会被自动认为是表中的字段（可以通过配置中的 <strong><code>useSimpleType</code></strong> 控制）。</p><blockquote><p>这里的简单类型不包含 Java 中的8种基本类型：</p><p>byte,short,int,long,float,double,char,boolean</p><p>这是因为在类中，基本类型会有默认值，而 MyBatis 中经常会需要判断属性值是否为空，所以不要在类中使用基本类型，否则会遇到莫名其妙的错误。</p></blockquote><p>对于类中的复杂对象，以及 <code>Map</code>,<code>List</code> 等属性不需要配置这个注解。</p><p>对于枚举类型作为数据库字段的情况，需要看配置中的 <strong><code>enumAsSimpleType</code></strong> 参数。</p><p>配置示例：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Transient</span>
<span class="token keyword">private</span> <span class="token class-name">String</span> otherThings<span class="token punctuation">;</span> <span class="token comment">//非数据库表中字段</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><br><h3 id="_3-标记主键和主键策略" tabindex="-1"><a class="header-anchor" href="#_3-标记主键和主键策略"><span>3. 标记主键和主键策略</span></a></h3><h4 id="id标记主键注解" tabindex="-1"><a class="header-anchor" href="#id标记主键注解"><span>@Id标记主键注解</span></a></h4><p>上面几个注解都涉及到映射。 <code>@Id</code> 注解和映射无关，它是一个特殊的标记，用于标识数据库中的主键字段。</p><p>正常情况下，<strong>一个实体类中至少需要一个标记 <code>@Id</code> 注解的字段，存在联合主键时可以标记多个。</strong></p><p>如果表中没有主键，类中就可以不标记。</p><p>当类中没有存在标记 <code>@Id</code> 注解的字段时，你可以理解为类中的<strong>所有字段是联合主键</strong>。使用所有的 <code>ByPrimaryKey</code> 相关的方法时，有 <code>where</code> 条件的地方，会将所有列作为条件。</p><p>配置示例：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Id</span>
<span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>或者联合主键：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Id</span>
<span class="token keyword">private</span> <span class="token class-name">Integer</span> userId<span class="token punctuation">;</span>
<span class="token annotation punctuation">@Id</span>
<span class="token keyword">private</span> <span class="token class-name">Integer</span> roleId<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h4 id="主键策略及相关注解" tabindex="-1"><a class="header-anchor" href="#主键策略及相关注解"><span>主键策略及相关注解</span></a></h4><p>首先主键策略和数据库关系很大，有些数据库支持主键自增，而有些数据库只能通过序列来获得。</p><ul><li><p>通过 <code>getGeneratedKeys</code> 方法取回主键</p><p>这种情况首先需要数据库支持自增，其次数据库提供的 JDBC 支持 <code>getGeneratedKeys</code> 方法</p><p>常见的如 MySql，SqlServer 支持这种模式，这种情况下，配置主键策略最简单。用法如下：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Id</span>
<span class="token annotation punctuation">@KeySql</span><span class="token punctuation">(</span>useGeneratedKeys <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
<span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>新增的<code>@KeySql</code> 注解用于替换 <code>@GeneratedValue</code> 注解，因此 <code>@KeySql</code> 能以更简单方式实现原来的功能</p><p>或：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Id</span>
<span class="token annotation punctuation">@GeneratedValue</span><span class="token punctuation">(</span>generator <span class="token operator">=</span> <span class="token string">&quot;JDBC&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为了让大家容易理解这里配置和 MyBatis 写法的关系，大家可以看看对应生成的 XML 代码：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>insert<span class="token punctuation">&quot;</span></span> <span class="token attr-name">useGeneratedKeys</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>true<span class="token punctuation">&quot;</span></span> <span class="token attr-name">keyProperty</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>id<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    insert into country (id, countryname, countrycode)
    values (#{id},#{countryname},#{countrycode})
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br></li><li><p>通过序列和任意 SQL 获取主键值(像 Oracle 中通过序列获取主键就属于这种情况)</p><p>除了类似序列获取值外，还可以是获取 UUID 的 SQL 语句 （详情请参考官方文档）</p></li></ul><br><p>第一种方法是插入表之后才有 id 的值，第二种则是插入数据库前需要获取一个值作为主键。</p><br><h2 id="三-example的创建及用法" tabindex="-1"><a class="header-anchor" href="#三-example的创建及用法"><span>三 Example的创建及用法</span></a></h2><p>通用 Mapper 中的 Example 方法有两大类定义，一个参数和两个参数的，例如下面两个：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>List&lt;T&gt; selectByExample(Object example);

int updateByExampleSelective(@Param(&quot;record&quot;) T record, @Param(&quot;example&quot;) Object example);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>所有 Example 方法中的 example 类型都是 <code>Object</code> 类型，这是因为通用 Mapper 支持所有符合 Example 结构的参数，例如通过 MBG 生成的 CountryExample、UserExample 类。还有通用 Mapper 中提供的通用 Example，以及支持 Java8 方法引用的 Weekend 类型。</p>`,114),b={href:"https://github.com/abel533/Mapper/wiki/3.config#314--checkexampleentityclass",target:"_blank",rel:"noopener noreferrer"},g=t(`<h3 id="_1-mbg生成的example" tabindex="-1"><a class="header-anchor" href="#_1-mbg生成的example"><span>1. MBG生成的Example</span></a></h3><p>用法如下：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">CountryExample</span> example <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CountryExample</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
example<span class="token punctuation">.</span><span class="token function">createCriteria</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">andCountrynameLike</span><span class="token punctuation">(</span><span class="token string">&quot;A%&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
example<span class="token punctuation">.</span><span class="token function">or</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">andIdGreaterThan</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
example<span class="token punctuation">.</span><span class="token function">setDistinct</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> count <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">deleteByExample</span><span class="token punctuation">(</span>example<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于的 SQL 日志如下：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>DEBUG <span class="token punctuation">[</span>main<span class="token punctuation">]</span> - <span class="token operator">==</span><span class="token operator">&gt;</span>  Preparing: DELETE FROM country WHERE <span class="token punctuation">(</span> countryname like ? <span class="token punctuation">)</span> or <span class="token punctuation">(</span> Id <span class="token operator">&gt;</span> ? <span class="token punctuation">)</span> 
DEBUG <span class="token punctuation">[</span>main<span class="token punctuation">]</span> - <span class="token operator">==</span><span class="token operator">&gt;</span> Parameters: A%<span class="token punctuation">(</span>String<span class="token punctuation">)</span>, <span class="token number">100</span><span class="token punctuation">(</span>Integer<span class="token punctuation">)</span>
DEBUG <span class="token punctuation">[</span>main<span class="token punctuation">]</span> - <span class="token operator">&lt;=</span><span class="token operator">=</span>    Updates: <span class="token number">95</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>生成的 CountryExample 中包含了和字段相关的多种方法，根据自己的需要设置相应的条件即可。</p><br><h3 id="_2-通用example方式" tabindex="-1"><a class="header-anchor" href="#_2-通用example方式"><span>2. 通用Example方式</span></a></h3><p>这是由通用 Mapper 提供的一个类，这个类和 MBG 生成的相比，需要自己设置属性名。这个类还额外提供了更多的方法。</p><p><strong>2.1 查询</strong>：</p><p>示例：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Example</span> example <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Example</span><span class="token punctuation">(</span><span class="token class-name">Country</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
example<span class="token punctuation">.</span><span class="token function">setForUpdate</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
example<span class="token punctuation">.</span><span class="token function">createCriteria</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">andGreaterThan</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">andLessThan</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">,</span><span class="token number">151</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
example<span class="token punctuation">.</span><span class="token function">or</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">andLessThan</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">,</span> <span class="token number">41</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Country</span><span class="token punctuation">&gt;</span></span> countries <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">selectByExample</span><span class="token punctuation">(</span>example<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>日志：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>DEBUG <span class="token punctuation">[</span>main<span class="token punctuation">]</span> - <span class="token operator">==</span><span class="token operator">&gt;</span>  Preparing: SELECT id,countryname,countrycode FROM country WHERE <span class="token punctuation">(</span> <span class="token function">id</span> <span class="token operator">&gt;</span> ? and <span class="token function">id</span> <span class="token operator">&lt;</span> ? <span class="token punctuation">)</span> or <span class="token punctuation">(</span> <span class="token function">id</span> <span class="token operator">&lt;</span> ? <span class="token punctuation">)</span> ORDER BY <span class="token function">id</span> desc FOR UPDATE 
DEBUG <span class="token punctuation">[</span>main<span class="token punctuation">]</span> - <span class="token operator">==</span><span class="token operator">&gt;</span> Parameters: <span class="token number">100</span><span class="token punctuation">(</span>Integer<span class="token punctuation">)</span>, <span class="token number">151</span><span class="token punctuation">(</span>Integer<span class="token punctuation">)</span>, <span class="token number">41</span><span class="token punctuation">(</span>Integer<span class="token punctuation">)</span>
DEBUG <span class="token punctuation">[</span>main<span class="token punctuation">]</span> - <span class="token operator">&lt;=</span><span class="token operator">=</span>      Total: <span class="token number">90</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>2.2 动态 SQL</strong></p><p>示例：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Example</span> example <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Example</span><span class="token punctuation">(</span><span class="token class-name">Country</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Example<span class="token punctuation">.</span>Criteria</span> criteria <span class="token operator">=</span> example<span class="token punctuation">.</span><span class="token function">createCriteria</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>query<span class="token punctuation">.</span><span class="token function">getCountryname</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    criteria<span class="token punctuation">.</span><span class="token function">andLike</span><span class="token punctuation">(</span><span class="token string">&quot;countryname&quot;</span><span class="token punctuation">,</span> query<span class="token punctuation">.</span><span class="token function">getCountryname</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;%&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>query<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    criteria<span class="token punctuation">.</span><span class="token function">andGreaterThan</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">,</span> query<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Country</span><span class="token punctuation">&gt;</span></span> countries <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">selectByExample</span><span class="token punctuation">(</span>example<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>日志：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>DEBUG <span class="token punctuation">[</span>main<span class="token punctuation">]</span> - <span class="token operator">==</span><span class="token operator">&gt;</span>  Preparing: SELECT id,countryname,countrycode FROM country WHERE <span class="token punctuation">(</span> countryname like ? <span class="token punctuation">)</span> ORDER BY <span class="token function">id</span> desc 
DEBUG <span class="token punctuation">[</span>main<span class="token punctuation">]</span> - <span class="token operator">==</span><span class="token operator">&gt;</span> Parameters: China%<span class="token punctuation">(</span>String<span class="token punctuation">)</span>
DEBUG <span class="token punctuation">[</span>main<span class="token punctuation">]</span> - <span class="token operator">&lt;=</span><span class="token operator">=</span>      Total: <span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>2.3 排序</strong>：</p><p>示例：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Example</span> example <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Example</span><span class="token punctuation">(</span><span class="token class-name">Country</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
example<span class="token punctuation">.</span><span class="token function">orderBy</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">desc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orderBy</span><span class="token punctuation">(</span><span class="token string">&quot;countryname&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orderBy</span><span class="token punctuation">(</span><span class="token string">&quot;countrycode&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">asc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Country</span><span class="token punctuation">&gt;</span></span> countries <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">selectByExample</span><span class="token punctuation">(</span>example<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>日志：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>DEBUG <span class="token punctuation">[</span>main<span class="token punctuation">]</span> - <span class="token operator">==</span><span class="token operator">&gt;</span>  Preparing: SELECT id,countryname,countrycode FROM country order by <span class="token function">id</span> DESC,countryname,countrycode ASC 
DEBUG <span class="token punctuation">[</span>main<span class="token punctuation">]</span> - <span class="token operator">==</span><span class="token operator">&gt;</span> Parameters: 
DEBUG <span class="token punctuation">[</span>main<span class="token punctuation">]</span> - <span class="token operator">&lt;=</span><span class="token operator">=</span>      Total: <span class="token number">183</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>2.4 去重</strong>：</p><p>示例：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>CountryExample example = new CountryExample();
//设置 distinct
example.setDistinct(true);
example.createCriteria().andCountrynameLike(&quot;A%&quot;);
example.or().andIdGreaterThan(100);
List&lt;Country&gt; countries = mapper.selectByExample(example);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>日志：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>DEBUG [main] - ==&gt;  Preparing: SELECT distinct id,countryname,countrycode FROM country WHERE ( countryname like ? ) or ( Id &gt; ? ) ORDER BY id desc 
DEBUG [main] - ==&gt; Parameters: A%(String), 100(Integer)
DEBUG [main] - &lt;==      Total: 95
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>2.5 设置查询列</strong>：</p><p>示例：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Example</span> example <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Example</span><span class="token punctuation">(</span><span class="token class-name">Country</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
example<span class="token punctuation">.</span><span class="token function">selectProperties</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;countryname&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Country</span><span class="token punctuation">&gt;</span></span> countries <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">selectByExample</span><span class="token punctuation">(</span>example<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>日志：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>DEBUG <span class="token punctuation">[</span>main<span class="token punctuation">]</span> - <span class="token operator">==</span><span class="token operator">&gt;</span>  Preparing: SELECT <span class="token function">id</span> , countryname FROM country ORDER BY <span class="token function">id</span> desc 
DEBUG <span class="token punctuation">[</span>main<span class="token punctuation">]</span> - <span class="token operator">==</span><span class="token operator">&gt;</span> Parameters: 
DEBUG <span class="token punctuation">[</span>main<span class="token punctuation">]</span> - <span class="token operator">&lt;=</span><span class="token operator">=</span>      Total: <span class="token number">183</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>除了这里提到的方法外，还有很多其他的方法，可以查看 Example 源码进行了解。</p></blockquote><h3 id="_3-example-builder方式" tabindex="-1"><a class="header-anchor" href="#_3-example-builder方式"><span>3 Example.builder方式</span></a></h3><p>示例：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Example</span> example <span class="token operator">=</span> <span class="token class-name">Example</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token class-name">Country</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">&quot;countryname&quot;</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token class-name">Sqls</span><span class="token punctuation">.</span><span class="token function">custom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">andGreaterThan</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">orderByAsc</span><span class="token punctuation">(</span><span class="token string">&quot;countrycode&quot;</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">forUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Country</span><span class="token punctuation">&gt;</span></span> countries <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">selectByExample</span><span class="token punctuation">(</span>example<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>日志：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>DEBUG <span class="token punctuation">[</span>main<span class="token punctuation">]</span> - <span class="token operator">==</span><span class="token operator">&gt;</span>  Preparing: SELECT countryname FROM country WHERE <span class="token punctuation">(</span> <span class="token function">id</span> <span class="token operator">&gt;</span> ? <span class="token punctuation">)</span> order by countrycode Asc FOR UPDATE 
DEBUG <span class="token punctuation">[</span>main<span class="token punctuation">]</span> - <span class="token operator">==</span><span class="token operator">&gt;</span> Parameters: <span class="token number">100</span><span class="token punctuation">(</span>Integer<span class="token punctuation">)</span>
DEBUG <span class="token punctuation">[</span>main<span class="token punctuation">]</span> - <span class="token operator">&lt;=</span><span class="token operator">=</span>      Total: <span class="token number">83</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-weekend方式" tabindex="-1"><a class="header-anchor" href="#_4-weekend方式"><span>4. Weekend方式</span></a></h3><p>使用 通用 Example和 Example.builder方式中的 Example 时，需要自己输入属性名，例如 <code>&quot;countryname&quot;</code>，假设输入错误，或者数据库有变化，这里很可能就会出错，因此基于 Java 8 的方法引用是一种更安全的用法：Weekend</p><p>示例：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Country</span><span class="token punctuation">&gt;</span></span> selectByWeekendSql <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">selectByExample</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Example<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token class-name">Country</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token class-name">WeekendSqls</span><span class="token punctuation">.</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Country</span><span class="token punctuation">&gt;</span></span><span class="token function">custom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">andLike</span><span class="token punctuation">(</span><span class="token class-name">Country</span><span class="token operator">::</span><span class="token function">getCountryname</span><span class="token punctuation">,</span> <span class="token string">&quot;%a%&quot;</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">andGreaterThan</span><span class="token punctuation">(</span><span class="token class-name">Country</span><span class="token operator">::</span><span class="token function">getCountrycode</span><span class="token punctuation">,</span> <span class="token string">&quot;123&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>日志：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>DEBUG <span class="token punctuation">[</span>main<span class="token punctuation">]</span> - <span class="token operator">==</span><span class="token operator">&gt;</span>  Preparing: SELECT id,countryname,countrycode FROM country WHERE <span class="token punctuation">(</span> countryname like ? and countrycode <span class="token operator">&gt;</span> ? <span class="token punctuation">)</span> 
DEBUG <span class="token punctuation">[</span>main<span class="token punctuation">]</span> - <span class="token operator">==</span><span class="token operator">&gt;</span> Parameters: %a%<span class="token punctuation">(</span>String<span class="token punctuation">)</span>, <span class="token number">123</span><span class="token punctuation">(</span>String<span class="token punctuation">)</span>
DEBUG <span class="token punctuation">[</span>main<span class="token punctuation">]</span> - <span class="token operator">&lt;=</span><span class="token operator">=</span>      Total: <span class="token number">151</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在代码中的 <code>Country::getCountryname</code> 就是方法引用，通过该方法可以自动转换对应的列名。</p><br><h2 id="四-tk-mybatis配置介绍" tabindex="-1"><a class="header-anchor" href="#四-tk-mybatis配置介绍"><span>四 tk-mybatis配置介绍</span></a></h2><h3 id="_1-tk-mybatis配置" tabindex="-1"><a class="header-anchor" href="#_1-tk-mybatis配置"><span>1. tk-mybatis配置</span></a></h3><p>如果你需要对通用 Mapper 进行配置，你可以在 Spring Boot 的配置文件中配置 <code>mapper.</code> 前缀的配置</p><p>例如在 yml 格式中配置：</p><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">mapper</span><span class="token punctuation">:</span>
  <span class="token key atrule">mappers</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> tk.mybatis.mapper.common.Mapper
    <span class="token punctuation">-</span> tk.mybatis.mapper.common.Mapper2
  <span class="token key atrule">notEmpty</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 properties 配置中：</p><div class="language-properties line-numbers-mode" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="token key attr-name">mapper.mappers</span><span class="token punctuation">=</span><span class="token value attr-value">tk.mybatis.mapper.common.Mapper,tk.mybatis.mapper.common.Mapper2</span>
<span class="token key attr-name">mapper.notEmpty</span><span class="token punctuation">=</span><span class="token value attr-value">true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><br><p>通用 Mapper 提供了下面这些参数：</p><ol><li>mappers</li><li>IDENTITY</li><li>ORDER(别名: order, before)</li><li>catalog</li><li>schema</li><li>notEmpty</li><li>style</li><li>enableMethodAnnotation</li><li>useSimpleType</li><li>usePrimitiveType</li><li>simpleTypes</li><li>enumAsSimpleType</li><li>wrapKeyword</li><li>checkExampleEntityClass</li><li>safeDelete</li><li>safeUpdate</li><li>useJavaType</li></ol>`,58),y={href:"https://github.com/abel533/Mapper/wiki/3.config",target:"_blank",rel:"noopener noreferrer"},h=t(`<br><h3 id="_2-style转换规则" tabindex="-1"><a class="header-anchor" href="#_2-style转换规则"><span>2. style转换规则</span></a></h3><p>实体和表转换时的默认规则，在 2.2 和 2.2.1 中都提到了这个参数，可选值如下：</p><ul><li>normal：原值</li><li>camelhump：驼峰转下划线</li><li>uppercase：转换为大写</li><li>lowercase：转换为小写</li><li>camelhumpAndUppercase：驼峰转下划线大写形式</li><li>camelhumpAndLowercase：驼峰转下划线小写形式</li></ul><p>配置方式如下：</p><div class="language-properties line-numbers-mode" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="token key attr-name">style</span><span class="token punctuation">=</span><span class="token value attr-value">camelhumpAndUppercase</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><br><h3 id="_3-usesimpletype" tabindex="-1"><a class="header-anchor" href="#_3-usesimpletype"><span>3. useSimpleType</span></a></h3><p>默认 <code>true</code>，启用后判断实体类属性是否为表字段时校验字段是否为简单类型，如果不是就忽略该属性，这个配置优先级高于所有注解。</p><p><strong>注意：byte, short, int, long, float, double, char, boolean 由于存在默认值，这里不会作为简单类型对待！也就是默认情况下，这些字段不会和表字段进行映射。2.2.5 中也强调了这一点。</strong></p><p>配置方式如下：</p><div class="language-properties line-numbers-mode" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="token key attr-name">useSimpleType</span><span class="token punctuation">=</span><span class="token value attr-value">true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><br><h3 id="_4-safedelete和safeupdate" tabindex="-1"><a class="header-anchor" href="#_4-safedelete和safeupdate"><span>4. safeDelete和safeUpdate</span></a></h3><p>safeDelete配置为 true 后，delete 和 deleteByExample 都必须设置查询条件才能删除，否则会抛出异常。</p><p>配置如下：</p><div class="language-properties line-numbers-mode" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="token key attr-name">safeDelete</span><span class="token punctuation">=</span><span class="token value attr-value">true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>使用效果：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>Caused by: tk.mybatis.mapper.MapperException: 通用 Mapper 安全检查: 当前操作的方法没有指定查询条件，不允许执行该操作<span class="token operator">!</span>
	at tk.mybatis.mapper.util.OGNL.notAllNullParameterCheck<span class="token punctuation">(</span>OGNL.java:91<span class="token punctuation">)</span>
	at sun.reflect.NativeMethodAccessorImpl.invoke0<span class="token punctuation">(</span>Native Method<span class="token punctuation">)</span>
	at sun.reflect.NativeMethodAccessorImpl.invoke<span class="token punctuation">(</span>NativeMethodAccessorImpl.java:62<span class="token punctuation">)</span>
	at sun.reflect.DelegatingMethodAccessorImpl.invoke<span class="token punctuation">(</span>DelegatingMethodAccessorImpl.java:43<span class="token punctuation">)</span>
	at java.lang.reflect.Method.invoke<span class="token punctuation">(</span>Method.java:497<span class="token punctuation">)</span>
	at org.apache.ibatis.ognl.OgnlRuntime.invokeMethod<span class="token punctuation">(</span>OgnlRuntime.java:899<span class="token punctuation">)</span>
	at org.apache.ibatis.ognl.OgnlRuntime.callAppropriateMethod<span class="token punctuation">(</span>OgnlRuntime.java:1544<span class="token punctuation">)</span>
	<span class="token punctuation">..</span>. <span class="token number">53</span> <span class="token function">more</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><p>safeUpdate配置为 true 后，updateByExample 和 updateByExampleSelective 都必须设置查询条件才能删除，否则会抛出异常（<code>org.apache.ibatis.exceptions.PersistenceException</code>）。</p><blockquote><p>updateByPrimaryKey 和 updateByPrimaryKeySelective 由于要求必须使用主键，不存在这个问题。</p></blockquote><p>配置如下：</p><div class="language-properties line-numbers-mode" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="token key attr-name">safeUpdate</span><span class="token punctuation">=</span><span class="token value attr-value">true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>使用效果：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>Caused by: tk.mybatis.mapper.MapperException: 通用 Mapper 安全检查: 当前操作的方法没有指定查询条件，不允许执行该操作!
	at tk.mybatis.mapper.util.OGNL.notAllNullParameterCheck(OGNL.java:91)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:497)
	at org.apache.ibatis.ognl.OgnlRuntime.invokeMethod(OgnlRuntime.java:899)
	at org.apache.ibatis.ognl.OgnlRuntime.callAppropriateMethod(OgnlRuntime.java:1544)
	... 53 more
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h3 id="_5-enumassimpletype" tabindex="-1"><a class="header-anchor" href="#_5-enumassimpletype"><span>5. enumAsSimpleType</span></a></h3><p>用于配置是否将枚举类型当成基本类型对待。</p><p>默认 simpleType 会忽略枚举类型，使用 enumAsSimpleType 配置后会把枚举按简单类型处理，需要自己配置好 <code>typeHandler</code>。</p><p>配置方式如下：</p><div class="language-properties line-numbers-mode" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="token key attr-name">enumAsSimpleType</span><span class="token punctuation">=</span><span class="token value attr-value">true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><br><h2 id="五-tk-mybatis代码生成" tabindex="-1"><a class="header-anchor" href="#五-tk-mybatis代码生成"><span>五 tk-mybatis代码生成</span></a></h2><h3 id="_1-mybatis-geneator" tabindex="-1"><a class="header-anchor" href="#_1-mybatis-geneator"><span>1. Mybatis Geneator</span></a></h3><p>使用该插件可以很方便的生成实体类、Mapper接口以及对应的XML文件。</p><p>首先对MBG不太了解的可以先阅读下面的文档</p>`,37),x=n("p",null,"Mybatis Geneator 详解",-1),f={href:"http://blog.csdn.net/isea533/article/details/42102297",target:"_blank",rel:"noopener noreferrer"},E={href:"https://github.com/abel533/Mapper/wiki/4.1.mappergenerator",target:"_blank",rel:"noopener noreferrer"},M=n("br",null,null,-1),_=n("h3",{id:"_2-codegenerator",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2-codegenerator"},[n("span",null,"2. codegenerator")])],-1),j=n("p",null,"代码生成器文档：代码生成器是基于 MBG 插件的，所以需要配合 MBG 使用。",-1),q={href:"https://github.com/abel533/Mapper/wiki/4.2.codegenerator",target:"_blank",rel:"noopener noreferrer"};function w(C,T){const s=o("ExternalLinkIcon");return c(),l("div",null,[u,r,n("p",null,[a("Github："),n("a",d,[a("https://github.com/abel533/Mapper"),e(s)])]),k,n("p",null,[n("a",m,[a("http://mvnrepository.com/artifact/tk.mybatis/mapper-spring-boot-starter"),e(s)])]),v,n("blockquote",null,[n("p",null,[a("配置中有一个和 Example 有关的参数，点击查看 "),n("a",b,[a("3.14 checkExampleEntityClass"),e(s)]),a("。")])]),g,n("p",null,[a("Github文档地址："),n("a",y,[a("https://github.com/abel533/Mapper/wiki/3.config"),e(s)])]),h,n("blockquote",null,[x,n("p",null,[n("a",f,[a("http://blog.csdn.net/isea533/article/details/42102297"),e(s)])])]),n("p",null,[a("Github参考文档："),n("a",E,[a("https://github.com/abel533/Mapper/wiki/4.1.mappergenerator"),e(s)])]),M,_,j,n("p",null,[a("Github参考文档："),n("a",q,[a("https://github.com/abel533/Mapper/wiki/4.2.codegenerator"),e(s)])])])}const I=p(i,[["render",w],["__file","tk-mybatis.html.vue"]]),A=JSON.parse('{"path":"/java/database/Mybatis/tk-mybatis.html","title":"tk-mybatis","lang":"en-US","frontmatter":{"order":15,"description":"tk-mybatis 一 配置tk-mybatis环境 Github：https://github.com/abel533/Mapper 1. 配置mybatis环境 tk-mybatis是基于mybatis实现的，所以需要先配置好mybatis的环境和mysql驱动 配置：数据源与mapper映射文件位置 2. tk-mybatis集成 最新版本号如...","head":[["meta",{"property":"og:url","content":"https://x.app/notebook/java/database/Mybatis/tk-mybatis.html"}],["meta",{"property":"og:site_name","content":"Notebook"}],["meta",{"property":"og:title","content":"tk-mybatis"}],["meta",{"property":"og:description","content":"tk-mybatis 一 配置tk-mybatis环境 Github：https://github.com/abel533/Mapper 1. 配置mybatis环境 tk-mybatis是基于mybatis实现的，所以需要先配置好mybatis的环境和mysql驱动 配置：数据源与mapper映射文件位置 2. tk-mybatis集成 最新版本号如..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-04-15T09:06:58.000Z"}],["meta",{"property":"article:author","content":"Mr.Topple"}],["meta",{"property":"article:modified_time","content":"2024-04-15T09:06:58.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"tk-mybatis\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-04-15T09:06:58.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Topple\\",\\"url\\":\\"https://www.baidu.com\\"}]}"]]},"headers":[{"level":2,"title":"一 配置tk-mybatis环境","slug":"一-配置tk-mybatis环境","link":"#一-配置tk-mybatis环境","children":[{"level":3,"title":"1. 配置mybatis环境","slug":"_1-配置mybatis环境","link":"#_1-配置mybatis环境","children":[]},{"level":3,"title":"2. tk-mybatis集成","slug":"_2-tk-mybatis集成","link":"#_2-tk-mybatis集成","children":[]},{"level":3,"title":"3. 注解@MapperScan","slug":"_3-注解-mapperscan","link":"#_3-注解-mapperscan","children":[]}]},{"level":2,"title":"二 ORM对象关系映射","slug":"二-orm对象关系映射","link":"#二-orm对象关系映射","children":[{"level":3,"title":"1. 通用Mapper快速入门","slug":"_1-通用mapper快速入门","link":"#_1-通用mapper快速入门","children":[]},{"level":3,"title":"2.  数据库与实体类映射","slug":"_2-数据库与实体类映射","link":"#_2-数据库与实体类映射","children":[]},{"level":3,"title":"3. 标记主键和主键策略","slug":"_3-标记主键和主键策略","link":"#_3-标记主键和主键策略","children":[]}]},{"level":2,"title":"三 Example的创建及用法","slug":"三-example的创建及用法","link":"#三-example的创建及用法","children":[{"level":3,"title":"1. MBG生成的Example","slug":"_1-mbg生成的example","link":"#_1-mbg生成的example","children":[]},{"level":3,"title":"2. 通用Example方式","slug":"_2-通用example方式","link":"#_2-通用example方式","children":[]},{"level":3,"title":"3 Example.builder方式","slug":"_3-example-builder方式","link":"#_3-example-builder方式","children":[]},{"level":3,"title":"4. Weekend方式","slug":"_4-weekend方式","link":"#_4-weekend方式","children":[]}]},{"level":2,"title":"四 tk-mybatis配置介绍","slug":"四-tk-mybatis配置介绍","link":"#四-tk-mybatis配置介绍","children":[{"level":3,"title":"1. tk-mybatis配置","slug":"_1-tk-mybatis配置","link":"#_1-tk-mybatis配置","children":[]},{"level":3,"title":"2. style转换规则","slug":"_2-style转换规则","link":"#_2-style转换规则","children":[]},{"level":3,"title":"3. useSimpleType","slug":"_3-usesimpletype","link":"#_3-usesimpletype","children":[]},{"level":3,"title":"4. safeDelete和safeUpdate","slug":"_4-safedelete和safeupdate","link":"#_4-safedelete和safeupdate","children":[]},{"level":3,"title":"5. enumAsSimpleType","slug":"_5-enumassimpletype","link":"#_5-enumassimpletype","children":[]}]},{"level":2,"title":"五 tk-mybatis代码生成","slug":"五-tk-mybatis代码生成","link":"#五-tk-mybatis代码生成","children":[{"level":3,"title":"1. Mybatis Geneator","slug":"_1-mybatis-geneator","link":"#_1-mybatis-geneator","children":[]},{"level":3,"title":"2. codegenerator","slug":"_2-codegenerator","link":"#_2-codegenerator","children":[]}]}],"git":{"createdTime":1713172018000,"updatedTime":1713172018000,"contributors":[{"name":"Neil","email":"msdrizzle@outlook.com","commits":1}]},"readingTime":{"minutes":13.43,"words":4030},"filePathRelative":"java/database/Mybatis/tk-mybatis.md","localizedDate":"April 15, 2024","autoDesc":true}');export{I as comp,A as data};
